
#cython: language_level=3, c_string_type=unicode, c_string_encoding=utf8

from cython.view cimport array

from libc.stdint cimport int32_t, int16_t
from libc.stdlib cimport malloc, free
from libc.string cimport strcpy, strcat, strncat, memset, memchr, memcmp, memcpy, memmove

import threading
from threading import current_thread

thread_local = threading.local()

from geosoft.gxapi import GXCancel, GXExit, GXAPIError, GXError

ctypedef Py_UNICODE WCHAR
ctypedef const WCHAR* LPCWSTR
ctypedef size_t HWND
ctypedef size_t HDC
cdef extern void Destr_SYS(void*, const int32_t* p1);
cdef extern int32_t iCheckTerminate_SYS(void*, int32_t* p1);
cdef extern int16_t sGetError_GEO(void*, char*, int32_t, char*, int32_t, int32_t*);

cdef void callback_free_data(void *p):
    print("In callback_free_data")
    free(p)

# Class 3DN


cdef extern void Copy_3DN(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t Create_3DN(void*);


cdef extern void Destroy_3DN(void*, const int32_t* p1);


cdef extern void GetPointOfView_3DN(void*, const int32_t* p1, double* p2, double* p3, double* p4);


cdef extern void GetScale_3DN(void*, const int32_t* p1, double* p2, double* p3, double* p4);


cdef extern int32_t iGetAxisColor_3DN(void*, const int32_t* p1);


cdef extern void IGetAxisFont_3DN(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern int32_t iGetBackgroundColor_3DN(void*, const int32_t* p1);


cdef extern void IGetRenderControls_3DN(void*, const int32_t* p1, int32_t* p2, int32_t* p3, char* p4, const int32_t* p5, char* p6, const int32_t* p7, char* p8, const int32_t* p9);


cdef extern int32_t iGetShading_3DN(void*, const int32_t* p1);


cdef extern void SetAxisColor_3DN(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetAxisFont_3DN(void*, const int32_t* p1, const char* p2);


cdef extern void SetBackgroundColor_3DN(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetPointOfView_3DN(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4);


cdef extern void SetRenderControls_3DN(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4, const char* p5, const char* p6);


cdef extern void SetScale_3DN(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4);


cdef extern void SetShading_3DN(void*, const int32_t* p1, const int32_t* p2);



# Class 3DV


cdef extern int32_t OpenMVIEW_3DV(void*, const int32_t* p1, const int32_t* p2);


cdef extern void ICopyToMAP_3DV(void*, const int32_t* p1, const int32_t* p2, const char* p3, const double* p4, const double* p5, const double* p6, const double* p7, const int32_t* p8, char* p9, const int32_t* p10, char* p11, const int32_t* p12);


cdef extern int32_t CreateNew_3DV(void*, const char* p1, const int32_t* p2);


cdef extern int32_t Open_3DV(void*, const char* p1);


cdef extern int32_t FromMap_3DV(void*, const int32_t* p1);


cdef extern void CRC3DV_3DV(void*, const int32_t* p1, int32_t* p2, const char* p3);



# Class AGG


cdef extern void _SetModel_AGG(void*, const int32_t* p1, const int32_t* p2);


cdef extern void ChangeBrightness_AGG(void*, const int32_t* p1, const double* p2);


cdef extern int32_t Create_AGG(void*);


cdef extern int32_t CreateMap_AGG(void*, const int32_t* p1, const char* p2);


cdef extern void Destroy_AGG(void*, const int32_t* p1);


cdef extern void GetLayerITR_AGG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t iListImg_AGG(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iNumLayers_AGG(void*, const int32_t* p1);


cdef extern void LayerIMG_AGG(void*, const int32_t* p1, const char* p2, const int32_t* p3, const char* p4, const double* p5);


cdef extern void LayerIMGEx_AGG(void*, const int32_t* p1, const char* p2, const int32_t* p3, const char* p4, const double* p5, const double* p6, const double* p7);


cdef extern void LayerShadeIMG_AGG(void*, const int32_t* p1, const char* p2, const char* p3, const double* p4, const double* p5, double* p6);


cdef extern double rGetBrightness_AGG(void*, const int32_t* p1);


cdef extern void SetLayerITR_AGG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetRenderMethod_AGG(void*, const int32_t* p1, const int32_t* p2);



# Class BF


cdef extern void _ChSize_BF(void*, const int32_t* p1, const int32_t* p2);


cdef extern void _Seek_BF(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void Copy_BF(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t CRC_BF(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t Create_BF(void*, const char* p1, const int32_t* p2);


cdef extern int32_t CreateSBF_BF(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void Destroy_BF(void*, const int32_t* p1, const int32_t* p2);


cdef extern void DestroyEx_BF(void*, const int32_t* p1);


cdef extern int32_t iEOF_BF(void*, const int32_t* p1);


cdef extern int32_t iQueryWrite_BF(void*, const int32_t* p1);


cdef extern void IReadBinaryString_BF(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, char* p4, const int32_t* p5);


cdef extern int32_t iSize_BF(void*, const int32_t* p1);


cdef extern int32_t iTell_BF(void*, const int32_t* p1);


cdef extern void ReadInt_BF(void*, const int32_t* p1, const int32_t* p2, int32_t* p3);


cdef extern void ReadReal_BF(void*, const int32_t* p1, const int32_t* p2, double* p3);


cdef extern void ReadVV_BF(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetDestroyStatus_BF(void*, const int32_t* p1, const int32_t* p2);


cdef extern void WriteBinaryString_BF(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void WriteDataNull_BF(void*, const int32_t* p1);


cdef extern void WriteInt_BF(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void WriteReal_BF(void*, const int32_t* p1, const int32_t* p2, const double* p3);


cdef extern void WriteVV_BF(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);



# Class DAT


cdef extern int32_t CreateDB_DAT(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4);


cdef extern int32_t CreateXGD_DAT(void*, const char* p1, const int32_t* p2);


cdef extern void Destroy_DAT(void*, const int32_t* p1);


cdef extern void GetLST_DAT(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4);


cdef extern void RangeXYZ_DAT(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, double* p6, double* p7, int32_t* p8);



# Class DATALINKD


cdef extern int32_t CreateArcLYR_DATALINKD(void*, const char* p1);


cdef extern int32_t CreateArcLYREx_DATALINKD(void*, const char* p1, const int32_t* p2);


cdef extern int32_t CreateArcLYRFromTMP_DATALINKD(void*, const char* p1);


cdef extern int32_t CreateArcLYRFromTMPEx_DATALINKD(void*, const char* p1, const int32_t* p2);


cdef extern int32_t CreateBING_DATALINKD(void*, const int32_t* p1);


cdef extern void Destroy_DATALINKD(void*, const int32_t* p1);


cdef extern void GetExtents_DATALINKD(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5);


cdef extern void GetIPJ_DATALINKD(void*, const int32_t* p1, const int32_t* p2);



# Class DATAMINE


cdef extern void CreateVoxel_DATAMINE(void*, const char* p1, const char* p2, const int32_t* p3, const int32_t* p4, const char* p5);


cdef extern void NumericFieldLST_DATAMINE(void*, const char* p1, const int32_t* p2);



# Class DB

# Channel




cdef extern void CreateDup_DB(void*, const int32_t* p1, const char* p2);


cdef extern void CreateDupComp_DB(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern int32_t DupSymbAcross_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void EasyMakerSymb_DB(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4);


cdef extern void GetChanStr_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, char* p5, const int32_t* p6);


cdef extern void GetChanVV_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void GetChanVVExpanded_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void GetIPJ_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void GetITR_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void GetRegSymb_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void GetRegSymbSetting_DB(void*, const int32_t* p1, const int32_t* p2, const char* p3, char* p4, const int32_t* p5);


cdef extern void GetVaChanVV_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern int32_t iBlobsMax_DB(void*, const int32_t* p1);


cdef extern int32_t iChansMax_DB(void*, const int32_t* p1);


cdef extern void IFormatChan_DB(void*, const int32_t* p1, const int32_t* p2, const double* p3, char* p4, const int32_t* p5);


cdef extern int32_t iGetChanArraySize_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void IGetChanClass_DB(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern int32_t iGetChanDecimal_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iGetChanFormat_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iGetChanInt_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void IGetChanLabel_DB(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern void IGetChanName_DB(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern int32_t iGetChanProtect_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iGetChanType_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void IGetChanUnit_DB(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern int32_t iGetChanWidth_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void IGetName_DB(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern int32_t iGetRegSymbSetting_DB(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void IGetSymbName_DB(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern int32_t iHaveITR_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t IiCoordPair_DB(void*, const int32_t* p1, const char* p2, char* p3, const int32_t* p4);


cdef extern int32_t iLinesMax_DB(void*, const int32_t* p1);


cdef extern int32_t iUsersMax_DB(void*, const int32_t* p1);


cdef extern void MakerSymb_DB(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const char* p5);


cdef extern void PutChanVV_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void PutVaChanVV_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void ReadBlobBF_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern double rGetChanReal_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern double rGetRegSymbSetting_DB(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void SetAllChanProtect_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetChanClass_DB(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void SetChanDecimal_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetChanFormat_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetChanInt_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void SetChanLabel_DB(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void SetChanName_DB(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void SetChanProtect_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetChanReal_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5);


cdef extern void SetChanStr_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5);


cdef extern void SetChanUnit_DB(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void SetChanWidth_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetIPJ_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void SetITR_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetRegSymb_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetRegSymbSetting_DB(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4);


cdef extern void WriteBlobBF_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


# Control




cdef extern void Commit_DB(void*, const int32_t* p1);


cdef extern void Compact_DB(void*, const int32_t* p1);


cdef extern void Create_DB(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const char* p7, const char* p8);


cdef extern void CreateComp_DB(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const char* p7, const char* p8, const int32_t* p9, const int32_t* p10);


cdef extern void CreateEx_DB(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const char* p7, const char* p8, const int32_t* p9);


cdef extern void DelLine0_DB(void*, const int32_t* p1);


cdef extern void Destroy_DB(void*, const int32_t* p1);


cdef extern void Discard_DB(void*, const int32_t* p1);


cdef extern void Grow_DB(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern int32_t iCanOpen_DB(void*, const char* p1, const char* p2, const char* p3);


cdef extern int32_t iCanOpenReadOnly_DB(void*, const char* p1, const char* p2, const char* p3);


cdef extern int32_t iCheck_DB(void*, const int32_t* p1);


cdef extern int32_t iIsEmpty_DB(void*, const int32_t* p1);


cdef extern int32_t iIsLineEmpty_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t Open_DB(void*, const char* p1, const char* p2, const char* p3);


cdef extern int32_t OpenReadOnly_DB(void*, const char* p1, const char* p2, const char* p3);


cdef extern void Repair_DB(void*, const char* p1);


cdef extern void Sync_DB(void*, const int32_t* p1);


# Data




cdef extern void CopyData_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern int32_t iGetColVA_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iGetChannelLength_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern double rGetFidIncr_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern double rGetFidStart_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetFid_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const double* p5);


cdef extern void WindowVACh_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void WindowVACh2_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


# Line




cdef extern void SetLineSelection_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t iGetLineSelection_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t FirstSelLine_DB(void*, const int32_t* p1);


cdef extern void GetLineMapFid_DB(void*, const int32_t* p1, const int32_t* p2, double* p3, double* p4);


cdef extern int32_t GetSelect_DB(void*, const int32_t* p1);


cdef extern int32_t iCountSelLines_DB(void*, const int32_t* p1);


cdef extern int32_t iIsChanName_DB(void*, const char* p1);


cdef extern int32_t iIsChanValid_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iIsLineName_DB(void*, const char* p1);


cdef extern int32_t iIsLineValid_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iLineCategory_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iLineFlight_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void ILineLabel_DB(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4, const int32_t* p5);


cdef extern int32_t iLineNumber_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void ILineNumber2_DB(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern int32_t iLineType_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iLineVersion_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void ISetLineName_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, char* p4, const int32_t* p5);


cdef extern void ISetLineName2_DB(void*, const char* p1, const int32_t* p2, const int32_t* p3, char* p4, const int32_t* p5);


cdef extern void LoadSelect_DB(void*, const int32_t* p1, const char* p2);


cdef extern int32_t NextSelLine_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern double rLineBearing_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern double rLineDate_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SaveSelect_DB(void*, const int32_t* p1, const char* p2);


cdef extern void Select_DB(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void SetLineBearing_DB(void*, const int32_t* p1, const int32_t* p2, const double* p3);


cdef extern void SetLineDate_DB(void*, const int32_t* p1, const int32_t* p2, const double* p3);


cdef extern void SetLineFlight_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetLineMapFid_DB(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4);


cdef extern void SetLineNum_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetLineType_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetLineVer_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetSelect_DB(void*, const int32_t* p1, const int32_t* p2);


# META




cdef extern void GetMETA_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetMETA_DB(void*, const int32_t* p1, const int32_t* p2);


# Symbols




cdef extern void ArrayLST_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void ArraySizeLST_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void ChanLST_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void NormalChanLST_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void ClassChanLST_DB(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void ClassGroupLST_DB(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern int32_t CreateSymb_DB(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern int32_t CreateSymbEx_DB(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void CSVChanLST_DB(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void DeleteSymb_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t DupLineSymb_DB(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern int32_t DupSymb_DB(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern int32_t DupSymbNoLock_DB(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern int32_t FindChan_DB(void*, const int32_t* p1, const char* p2);


cdef extern int32_t FindSymb_DB(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void GetChanOrderLST_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t GetXYZChanSymb_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iClassChanList_DB(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern int32_t iExistChan_DB(void*, const int32_t* p1, const char* p2);


cdef extern int32_t iExistSymb_DB(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern int32_t iValidSymb_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t iGetSymbLock_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void IGetXYZChan_DB(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern int32_t iSymbList_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void LineLST_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void LockSymb_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void MaskChanLST_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SelectedLineLST_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetChanOrderLST_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetXYZChan_DB(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void StringChanLST_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SymbLST_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void UnLockAllSymb_DB(void*, const int32_t* p1);


cdef extern void UnLockSymb_DB(void*, const int32_t* p1, const int32_t* p2);


# VA Channels




cdef extern void AddAssociatedLoad_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void AddComment_DB(void*, const int32_t* p1, const char* p2, const char* p3, const int32_t* p4);


cdef extern void AddIntComment_DB(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4);


cdef extern void AddRealComment_DB(void*, const int32_t* p1, const char* p2, const double* p3, const int32_t* p4);


cdef extern void AddTimeComment_DB(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void Associate_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void AssociateAll_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void AssociateClass_DB(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void GenValidChanSymb_DB(void*, const char* p1, char* p2, const int32_t* p3);


cdef extern void GenValidLineSymb_DB(void*, const char* p1, char* p2, const int32_t* p3);


cdef extern void GetChanVA_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void GetVAScaling_DB(void*, const int32_t* p1, const int32_t* p2, double* p3, double* p4);


cdef extern void GetVAWindows_DB(void*, const int32_t* p1, const int32_t* p2, int32_t* p3, int32_t* p4);


cdef extern void SetVABaseCoordinateInfo_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const int32_t* p5, const char* p6, const int32_t* p7);


cdef extern void GetVABaseCoordinateInfo_DB(void*, const int32_t* p1, const int32_t* p2, int32_t* p3, double* p4, const int32_t* p5, char* p6, const int32_t* p7);


cdef extern void IGetGroupClass_DB(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern int32_t iGetInfo_DB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void IGetVAProfColorFile_DB(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern void IGetVAProfSectOption_DB(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern void IGetVASectColorFile_DB(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern int32_t iIsAssociated_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t iIsWholeplot_DB(void*, const int32_t* p1);


cdef extern void PutChanVA_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void SetGroupClass_DB(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void SetVAProfColorFile_DB(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void SetVAProfSectOption_DB(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void SetVAScaling_DB(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4);


cdef extern void SetVASectColorFile_DB(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void SetVAWindows_DB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);




# Class DBREAD

# Create Methods




cdef extern int32_t Create_DBREAD(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t CreateXY_DBREAD(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t CreateXYZ_DBREAD(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Destroy_DBREAD(void*, const int32_t* p1);


cdef extern int32_t iAddChannel_DBREAD(void*, const int32_t* p1, const int32_t* p2);


# Data Access Methods




cdef extern int32_t GetVV_DBREAD(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t GetVA_DBREAD(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t GetVVx_DBREAD(void*, const int32_t* p1);


cdef extern int32_t GetVVy_DBREAD(void*, const int32_t* p1);


cdef extern int32_t GetVVz_DBREAD(void*, const int32_t* p1);


cdef extern int32_t iGetChanArraySize_DBREAD(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iGetNumberOfBlocksToProcess_DBREAD(void*, const int32_t* p1);


# Processing




cdef extern int32_t iGetNextBlock_DBREAD(void*, const int32_t* p1, int32_t* p2, int32_t* p3, int32_t* p4);




# Class DBWRITE

# Create Methods




cdef extern int32_t Create_DBWRITE(void*, const int32_t* p1);


cdef extern int32_t CreateXY_DBWRITE(void*, const int32_t* p1);


cdef extern int32_t CreateXYZ_DBWRITE(void*, const int32_t* p1);


cdef extern void Destroy_DBWRITE(void*, const int32_t* p1);


cdef extern int32_t iAddChannel_DBWRITE(void*, const int32_t* p1, const int32_t* p2);


# Data Access Methods




cdef extern int32_t GetDB_DBWRITE(void*, const int32_t* p1);


cdef extern int32_t GetVV_DBWRITE(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t GetVA_DBWRITE(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t GetVVx_DBWRITE(void*, const int32_t* p1);


cdef extern int32_t GetVVy_DBWRITE(void*, const int32_t* p1);


cdef extern int32_t GetVVz_DBWRITE(void*, const int32_t* p1);


cdef extern int32_t iGetChanArraySize_DBWRITE(void*, const int32_t* p1, const int32_t* p2);


# Processing




cdef extern void AddBlock_DBWRITE(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Commit_DBWRITE(void*, const int32_t* p1);


cdef extern void TestFunc_DBWRITE(void*, const int32_t* p1, const int32_t* p2);




# Class DSEL


cdef extern int32_t Create_DSEL(void*);


cdef extern void DataSignificantFigures_DSEL(void*, const int32_t* p1, const double* p2);


cdef extern void Destroy_DSEL(void*, const int32_t* p1);


cdef extern void MetaQuery_DSEL(void*, const int32_t* p1, const char* p2);


cdef extern void PictureQuality_DSEL(void*, const int32_t* p1, const int32_t* p2);


cdef extern void RequestAllInfo_DSEL(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SelectArea_DSEL(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SelectRect_DSEL(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5);


cdef extern void SelectResolution_DSEL(void*, const int32_t* p1, const double* p2, const int32_t* p3);


cdef extern void SelectSize_DSEL(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetExtractAsDocument_DSEL(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetIPJ_DSEL(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SpatialAccuracy_DSEL(void*, const int32_t* p1, const double* p2);



# Class E3DV


cdef extern int32_t GetDataView_E3DV(void*, const int32_t* p1);


cdef extern int32_t GetBaseView_E3DV(void*, const int32_t* p1);



# Class EXT


cdef extern void GetInfo_EXT(void*, const char* p1, double* p2, double* p3, double* p4, double* p5, const int32_t* p6);



# Class GEO



# Class GEOSOFT



# Class GEOSTRING


cdef extern int32_t Open_GEOSTRING(void*, const char* p1, const int32_t* p2);


cdef extern void Destroy_GEOSTRING(void*, const int32_t* p1);


cdef extern void GetIPJ_GEOSTRING(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetFeatures_GEOSTRING(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetSections_GEOSTRING(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetAllShapes_GEOSTRING(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetShapesForFeature_GEOSTRING(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void GetShapesForSection_GEOSTRING(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void GetShapesForFeatureAndSection_GEOSTRING(void*, const int32_t* p1, const char* p2, const char* p3, const int32_t* p4);


cdef extern void GetFeatureProperties_GEOSTRING(void*, const int32_t* p1, const char* p2, char* p3, const int32_t* p4, char* p5, const int32_t* p6, int32_t* p7, int32_t* p8, double* p9, double* p10, double* p11, int32_t* p12, int32_t* p13, int32_t* p14, double* p15, double* p16, int32_t* p17);


cdef extern void GetSectionProperties_GEOSTRING(void*, const int32_t* p1, const char* p2, char* p3, const int32_t* p4, char* p5, const int32_t* p6, int32_t* p7, double* p8, double* p9, double* p10, double* p11, double* p12, double* p13, double* p14, double* p15, double* p16);


cdef extern void GetShapeProperties_GEOSTRING(void*, const int32_t* p1, const char* p2, char* p3, const int32_t* p4, char* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9);



# Class GIS


cdef extern int32_t Create_GIS(void*, const char* p1, const char* p2, const int32_t* p3);


cdef extern void CreateMap2D_GIS(void*, const int32_t* p1, const char* p2, const double* p3, const int32_t* p4, const int32_t* p5);


cdef extern void Destroy_GIS(void*, const int32_t* p1);


cdef extern void GetBPRModelsLST_GIS(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern int32_t GetIPJ_GIS(void*, const int32_t* p1);


cdef extern void GetMETA_GIS(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetRange_GIS(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, double* p6, double* p7);


cdef extern int32_t iDatamineType_GIS(void*, const char* p1);


cdef extern void IGetFileName_GIS(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern int32_t iIsMIMapFile_GIS(void*, const char* p1);


cdef extern int32_t iIsMIRasterTabFile_GIS(void*, const char* p1);


cdef extern int32_t iIsMIRotatedRasterTabFile_GIS(void*, const char* p1);


cdef extern int32_t iIsSHPFile3D_GIS(void*, const int32_t* p1);


cdef extern int32_t iIsSHPFilePoint_GIS(void*, const int32_t* p1);


cdef extern int32_t iNumAttribs_GIS(void*, const int32_t* p1);


cdef extern int32_t iNumShapes_GIS(void*, const int32_t* p1);


cdef extern void IScanMIRasterTabFile_GIS(void*, const char* p1, char* p2, const int32_t* p3, const int32_t* p4);


cdef extern void LoadASCII_GIS(void*, const int32_t* p1, const int32_t* p2);


cdef extern void LoadGDB_GIS(void*, const int32_t* p1, const int32_t* p2);


cdef extern void LoadMAP_GIS(void*, const int32_t* p1, const int32_t* p2);


cdef extern void LoadMAPEx_GIS(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void LoadMetaGroupsMAP_GIS(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5, const char* p6);


cdef extern void LoadPLY_GIS(void*, const int32_t* p1, const int32_t* p2);


cdef extern void LoadShapesGDB_GIS(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetDmWireframePtFile_GIS(void*, const int32_t* p1, const char* p2);


cdef extern void SetIPJ_GIS(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetLST_GIS(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetMETA_GIS(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetTriangulationObjectIndex_GIS(void*, const int32_t* p1, const int32_t* p2);



# Class HGD


cdef extern int32_t Create_HGD(void*, const char* p1);


cdef extern void Destroy_HGD(void*, const int32_t* p1);


cdef extern void ExportIMG_HGD(void*, const int32_t* p1, const char* p2);


cdef extern void GetMETA_HGD(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t hCreateIMG_HGD(void*, const int32_t* p1, const char* p2);


cdef extern void SetMETA_HGD(void*, const int32_t* p1, const int32_t* p2);



# Class HXYZ


cdef extern int32_t Create_HXYZ(void*, const char* p1);


cdef extern void Destroy_HXYZ(void*, const int32_t* p1);


cdef extern void GetMETA_HXYZ(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t hCreateDB_HXYZ(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern int32_t hCreateSQL_HXYZ(void*, const char* p1, const char* p2, const char* p3, const char* p4, const int32_t* p5, const char* p6);


cdef extern void SetMETA_HXYZ(void*, const int32_t* p1, const int32_t* p2);



# Class IGRF


cdef extern void Calc_IGRF(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, double* p5, double* p6, double* p7);


cdef extern void CalcVV_IGRF(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern int32_t Create_IGRF(void*, const double* p1, const int32_t* p2, const char* p3);


cdef extern void DateRange_IGRF(void*, const char* p1, double* p2, double* p3);


cdef extern void Destroy_IGRF(void*, const int32_t* p1);



# Class IMG


cdef extern void Average2_IMG(void*, const char* p1, const char* p2);


cdef extern void Copy_IMG(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t Create_IMG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern int32_t CreateFile_IMG(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern int32_t CreateMem_IMG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern int32_t CreateNewFile_IMG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5);


cdef extern int32_t CreateOutFile_IMG(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void CreateProjected_IMG(void*, const int32_t* p1, const int32_t* p2);


cdef extern void CreateProjected2_IMG(void*, const int32_t* p1, const int32_t* p2, const double* p3);


cdef extern void CreateProjected3_IMG(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4);


cdef extern void Destroy_IMG(void*, const int32_t* p1);


cdef extern int32_t GethPG_IMG(void*, const int32_t* p1);


cdef extern void GetInfo_IMG(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, double* p6);


cdef extern void GetIPJ_IMG(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetMETA_IMG(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetPG_IMG(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetProjectedCellSize_IMG(void*, const int32_t* p1, const int32_t* p2, double* p3);


cdef extern void GetTR_IMG(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iElementType_IMG(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iEType_IMG(void*, const int32_t* p1);


cdef extern int32_t iGetDefITR_IMG(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iIsColour_IMG(void*, const int32_t* p1);


cdef extern int32_t iIsValidIMGFile_IMG(void*, const char* p1);


cdef extern int32_t iIsValidIMGFileEx_IMG(void*, const char* p1, char* p2, const int32_t* p3);


cdef extern int32_t iNE_IMG(void*, const int32_t* p1);


cdef extern void Inherit_IMG(void*, const int32_t* p1, const int32_t* p2, const double* p3);


cdef extern void InheritIMG_IMG(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iNV_IMG(void*, const int32_t* p1);


cdef extern int32_t iNX_IMG(void*, const int32_t* p1);


cdef extern int32_t iNY_IMG(void*, const int32_t* p1);


cdef extern int32_t iQuery_IMG(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iQueryKX_IMG(void*, const int32_t* p1);


cdef extern int32_t iSetDefITR_IMG(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iUserPreferenceToPlotAsColourShadedGrid_IMG(void*);


cdef extern void LoadIMG_IMG(void*, const int32_t* p1, const int32_t* p2);


cdef extern void LoadIntoPager_IMG(void*, const int32_t* p1);


cdef extern void OptKX_IMG(void*, const int32_t* p1, const int32_t* p2);


cdef extern void ReadV_IMG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void ReadX_IMG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void ReadY_IMG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void RefreshGI_IMG(void*, const char* p1);


cdef extern void Relocate_IMG(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const int32_t* p6);


cdef extern void Report_IMG(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5);


cdef extern void ReportCSV_IMG(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern double rGetZ_IMG(void*, const int32_t* p1, const double* p2, const double* p3);


cdef extern double rQuery_IMG(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetGridUnchanged_IMG(void*, const int32_t* p1);


cdef extern void SetInfo_IMG(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6);


cdef extern void SetIPJ_IMG(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetMETA_IMG(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetPG_IMG(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetTR_IMG(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Sync_IMG(void*, const char* p1);


cdef extern void WriteV_IMG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void WriteX_IMG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void WriteY_IMG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void SetRealParameter_IMG(void*, const int32_t* p1, const char* p2, const double* p3);


cdef extern double rGetRealParameter_IMG(void*, const int32_t* p1, const char* p2);



# Class IMU


cdef extern void AggToGeoColor_IMU(void*, const int32_t* p1, const char* p2, const int32_t* p3, const double* p4);


cdef extern int32_t CRC_IMU(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t CRCGrid_IMU(void*, const char* p1, const int32_t* p2);


cdef extern int32_t CRCGridInexact_IMU(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern int32_t CRCInexact_IMU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void ExportGridWithoutDataSectionXML_IMU(void*, const char* p1, int32_t* p2, const char* p3);


cdef extern void ExportGridXML_IMU(void*, const char* p1, int32_t* p2, const char* p3);


cdef extern void ExportRawXML_IMU(void*, const int32_t* p1, int32_t* p2, const char* p3);


cdef extern void ExportXML_IMU(void*, const int32_t* p1, int32_t* p2, const char* p3);


cdef extern void GetZVV_IMU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void GetZPeaksVV_IMU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void GridAdd_IMU(void*, const int32_t* p1, const double* p2, const int32_t* p3, const double* p4, const int32_t* p5);


cdef extern void GridAGC_IMU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const int32_t* p5);


cdef extern void GridBool_IMU(void*, const int32_t* p1, const int32_t* p2, const char* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void GridEdge_IMU(void*, const char* p1, const int32_t* p2, const int32_t* p3);


cdef extern void GridEdgePLY_IMU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void GridExpand_IMU(void*, const int32_t* p1, const char* p2, const double* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void GridExpFill_IMU(void*, const char* p1, const char* p2, const double* p3, const int32_t* p4);


cdef extern void GridFill_IMU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const double* p7, const double* p8, const double* p9, const int32_t* p10, const int32_t* p11);


cdef extern void GridFilt_IMU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const char* p8, const int32_t* p9);


cdef extern void GridHead_IMU(void*, const char* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6);


cdef extern void GridInFill_IMU(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4);


cdef extern void GridMask_IMU(void*, const char* p1, const char* p2, const int32_t* p3, const int32_t* p4);


cdef extern void GridPeak_IMU(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void GridPLY_IMU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void GridPLYEx_IMU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void GridReprojectAndWindow_IMU(void*, const char* p1, const char* p2, const int32_t* p3, const double* p4, const double* p5, const double* p6, const double* p7);


cdef extern void GridResample_IMU(void*, const char* p1, const char* p2, const double* p3, const double* p4, const double* p5, const double* p6, const int32_t* p7, const int32_t* p8);


cdef extern void GridResize_IMU(void*, const char* p1, const char* p2);


cdef extern void GridShad_IMU(void*, const char* p1, const char* p2, double* p3, double* p4, double* p5);


cdef extern void GridST_IMU(void*, const char* p1, const int32_t* p2);


cdef extern void GridStat_IMU(void*, const char* p1, int32_t* p2, int32_t* p3, int32_t* p4, double* p5, double* p6, int32_t* p7, double* p8, double* p9, double* p10, double* p11, double* p12);


cdef extern void GridStatComp_IMU(void*, const char* p1, int32_t* p2, int32_t* p3, int32_t* p4, double* p5, double* p6, int32_t* p7, double* p8, double* p9, double* p10, double* p11, double* p12, double* p13);


cdef extern void GridStatExt_IMU(void*, const char* p1, const int32_t* p2, int32_t* p3, int32_t* p4, double* p5, double* p6, double* p7, double* p8);


cdef extern void GridStatTrend_IMU(void*, const char* p1, int32_t* p2, double* p3, double* p4, double* p5);


cdef extern void GridStatTrendExt_IMU(void*, const char* p1, int32_t* p2, int32_t* p3, double* p4, double* p5, const int32_t* p6);


cdef extern double rSlopeStandardDeviation_IMU(void*, const int32_t* p1);


cdef extern void GridStitch_IMU(void*, const char* p1, const char* p2, const char* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const double* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11, const double* p12, const int32_t* p13);


cdef extern void GridStitchCtl_IMU(void*, const char* p1);


cdef extern void GridTiff_IMU(void*, const char* p1, const char* p2, const char* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const double* p7, const int32_t* p8, const double* p9);


cdef extern void GridTrnd_IMU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void GridTrns_IMU(void*, const char* p1, const int32_t* p2);


cdef extern void GridVD_IMU(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GridVol_IMU(void*, const int32_t* p1, const double* p2, const double* p3, double* p4, double* p5, double* p6);


cdef extern void GridWind_IMU(void*, const int32_t* p1, const char* p2, const int32_t* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10, const int32_t* p11, const int32_t* p12, const char* p13);


cdef extern void GridWind2_IMU(void*, const int32_t* p1, const char* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const int32_t* p9);


cdef extern void GridXYZ_IMU(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern int32_t iGridType_IMU(void*, const char* p1);


cdef extern void MakeMITabFile_IMU(void*, const char* p1);


cdef extern void MakeMITabfromGrid_IMU(void*, const char* p1);


cdef extern void MakeMITabfromMap_IMU(void*, const char* p1);


cdef extern int32_t Mosaic_IMU(void*, const char* p1, const char* p2, const int32_t* p3, const double* p4);


cdef extern void PeakSize_IMU(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, const int32_t* p6);


cdef extern void PeakSize2_IMU(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void PigeonHole_IMU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, int32_t* p4);


cdef extern void Profile_IMU(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const int32_t* p7);


cdef extern void ProfileVV_IMU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void RangeGrids_IMU(void*, const char* p1, const int32_t* p2, double* p3, double* p4, double* p5, double* p6);


cdef extern void RangeLL_IMU(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5);


cdef extern void StatWindow_IMU(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const int32_t* p6, const int32_t* p7);


cdef extern void UpdatePLY_IMU(void*, const int32_t* p1, const int32_t* p2);



# Class IPJ


cdef extern void _ClearWarp_IPJ(void*, const int32_t* p1);


cdef extern void _MakeGeographic_IPJ(void*, const int32_t* p1);


cdef extern void _MakeWGS84_IPJ(void*, const int32_t* p1);


cdef extern void _SetUnits_IPJ(void*, const int32_t* p1, const double* p2, const char* p3);


cdef extern void AddExaggWarp_IPJ(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7);


cdef extern void AddLogWarp_IPJ(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void AddMatrixWarp_IPJ(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10, const double* p11, const double* p12, const double* p13, const double* p14, const double* p15, const double* p16, const double* p17);


cdef extern void AddWarp_IPJ(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void ClearCoordinateSystem_IPJ(void*, const int32_t* p1);


cdef extern void ClearOrientation_IPJ(void*, const int32_t* p1);


cdef extern void ConvertOrientationWarpVV_IPJ(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void Copy_IPJ(void*, const int32_t* p1, const int32_t* p2);


cdef extern void CopyProjection_IPJ(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t Create_IPJ(void*);


cdef extern int32_t CreateS_IPJ(void*, const int32_t* p1);


cdef extern int32_t CreateXML_IPJ(void*, const char* p1);


cdef extern void Destroy_IPJ(void*, const int32_t* p1);


cdef extern void Get3DView_IPJ(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, double* p6, double* p7, double* p8, double* p9, double* p10);


cdef extern void Get3DViewEx_IPJ(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, double* p6, double* p7, double* p8, double* p9, double* p10, int32_t* p11, int32_t* p12);


cdef extern void GetCrookedSectionViewVVs_IPJ(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, int32_t* p5);


cdef extern void GetList_IPJ(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void GetOrientationInfo_IPJ(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, double* p6);


cdef extern void GetPlaneEquation_IPJ(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, double* p6, double* p7, double* p8, double* p9, double* p10, double* p11, double* p12, double* p13, double* p14);


cdef extern void GetPlaneEquation2_IPJ(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const double* p5, const double* p6, double* p7, double* p8, double* p9, double* p10, double* p11, double* p12, double* p13, double* p14, double* p15);


cdef extern int32_t iCompareDatums_IPJ(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iConvertWarp_IPJ(void*, const int32_t* p1, double* p2, double* p3, double* p4, const int32_t* p5);


cdef extern int32_t iConvertWarpVV_IPJ(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern int32_t iCoordinateSystemsAreTheSame_IPJ(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iCoordinateSystemsAreTheSameWithinASmallTolerance_IPJ(void*, const int32_t* p1, const int32_t* p2);


cdef extern void IGetDisplayName_IPJ(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void IGetESRI_IPJ(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void IGetGXF_IPJ(void*, const int32_t* p1, char* p2, char* p3, char* p4, char* p5, char* p6, const int32_t* p7);


cdef extern void IGetMICoordSys_IPJ(void*, const int32_t* p1, char* p2, const int32_t* p3, char* p4, const int32_t* p5);


cdef extern void IGetName_IPJ(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern void SetVCS_IPJ(void*, const int32_t* p1, const char* p2);


cdef extern int32_t iGetOrientation_IPJ(void*, const int32_t* p1);


cdef extern void IGetOrientationName_IPJ(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void IGetUnits_IPJ(void*, const int32_t* p1, double* p2, char* p3, const int32_t* p4);


cdef extern void IGetXML_IPJ(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern int32_t iHasProjection_IPJ(void*, const int32_t* p1);


cdef extern int32_t iIs3DInverted_IPJ(void*, const int32_t* p1);


cdef extern int32_t iIs3DInvertedAngles_IPJ(void*, const int32_t* p1);


cdef extern int32_t iIsGeographic_IPJ(void*, const int32_t* p1);


cdef extern int32_t iOrientationsAreTheSame_IPJ(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iOrientationsAreTheSameWithinASmallTolerance_IPJ(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iHasSectionOrientation_IPJ(void*, const int32_t* p1);


cdef extern int32_t iProjectionTypeIsFullySupported_IPJ(void*, const int32_t* p1);


cdef extern int32_t iSetGXF_IPJ(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const char* p5, const char* p6);


cdef extern int32_t iSourceType_IPJ(void*, const int32_t* p1);


cdef extern int32_t iSupportDatumTransform_IPJ(void*, const int32_t* p1, const int32_t* p2);


cdef extern void IUnitName_IPJ(void*, const double* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern int32_t iWarped_IPJ(void*, const int32_t* p1);


cdef extern int32_t iWarpsAreTheSame_IPJ(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iWarpsAreTheSameWithinASmallTolerance_IPJ(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iWarpType_IPJ(void*, const int32_t* p1);


cdef extern void MakeProjected_IPJ(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5);


cdef extern void NewBoxResolution_IPJ(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, double* p8, double* p9, double* p10);


cdef extern void Read_IPJ(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const char* p5);


cdef extern double rGetMethodParm_IPJ(void*, const int32_t* p1, const int32_t* p2);


cdef extern double rGetNorthAzimuth_IPJ(void*, const int32_t* p1, const double* p2, const double* p3);


cdef extern double rUnitScale_IPJ(void*, const char* p1, const double* p2);


cdef extern void Serial_IPJ(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SerialFGDCXML_IPJ(void*, const int32_t* p1, const char* p2);


cdef extern void SerialISOXML_IPJ(void*, const int32_t* p1, const char* p2);


cdef extern void SerialXML_IPJ(void*, const int32_t* p1, const char* p2);


cdef extern void Set3DInverted_IPJ(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Set3DInvertedAngles_IPJ(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Set3DView_IPJ(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10);


cdef extern void Set3DViewEx_IPJ(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10, const int32_t* p11, const int32_t* p12);


cdef extern void Set3DViewFromAxes_IPJ(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10, const double* p11, const double* p12, const double* p13);


cdef extern void SetCrookedSectionView_IPJ(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void SetDepthSectionView_IPJ(void*, const int32_t* p1, const double* p2);


cdef extern void SetESRI_IPJ(void*, const int32_t* p1, const char* p2);


cdef extern void SetGXF_IPJ(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const char* p5, const char* p6);


cdef extern void SetMethodParm_IPJ(void*, const int32_t* p1, const int32_t* p2, const double* p3);


cdef extern void SetMICoordSys_IPJ(void*, const int32_t* p1, const char* p2, const char* p3);


cdef extern void SetNormalSectionView_IPJ(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6);


cdef extern void SetPlanView_IPJ(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5);


cdef extern void SetSectionView_IPJ(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6);


cdef extern void SetWMSCoordSys_IPJ(void*, const int32_t* p1, const char* p2, const double* p3, const double* p4, const double* p5, const double* p6);


cdef extern void SetXML_IPJ(void*, const int32_t* p1, const char* p2);


cdef extern void Get3DMatrixOrientation_IPJ(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, double* p6, double* p7, double* p8, double* p9, double* p10, double* p11, double* p12, double* p13, double* p14, double* p15, double* p16, double* p17);


cdef extern void Set3DMatrixOrientation_IPJ(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10, const double* p11, const double* p12, const double* p13, const double* p14, const double* p15, const double* p16, const double* p17);


cdef extern void ReprojectSectionGrid_IPJ(void*, const int32_t* p1, const int32_t* p2, double* p3, double* p4, double* p5, double* p6, double* p7);



# Class ITR


cdef extern void ChangeBrightness_ITR(void*, const int32_t* p1, const double* p2);


cdef extern void ColorVV_ITR(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void Copy_ITR(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t Create_ITR(void*);


cdef extern int32_t CreateFile_ITR(void*, const char* p1);


cdef extern int32_t CreateIMG_ITR(void*, const int32_t* p1, const char* p2, const int32_t* p3, const double* p4);


cdef extern int32_t CreateMap_ITR(void*, const int32_t* p1, const char* p2);


cdef extern int32_t CreateS_ITR(void*, const int32_t* p1);


cdef extern void Destroy_ITR(void*, const int32_t* p1);


cdef extern void EqualArea_ITR(void*, const int32_t* p1, const int32_t* p2, const double* p3);


cdef extern void GetDataLimits_ITR(void*, const int32_t* p1, double* p2, double* p3);


cdef extern int32_t GetREG_ITR(void*, const int32_t* p1);


cdef extern void GetZoneColor_ITR(void*, const int32_t* p1, const int32_t* p2, int32_t* p3);


cdef extern int32_t iColorValue_ITR(void*, const int32_t* p1, const double* p2);


cdef extern int32_t iGetSize_ITR(void*, const int32_t* p1);


cdef extern int32_t iGetZoneModelType_ITR(void*, const int32_t* p1);


cdef extern void Linear_ITR(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4);


cdef extern void LoadA_ITR(void*, const int32_t* p1, const char* p2);


cdef extern void LogLinear_ITR(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4);


cdef extern void Normal_ITR(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5);


cdef extern void PowerZone_ITR(void*, const int32_t* p1, const int32_t* p2);


cdef extern double rGetBrightness_ITR(void*, const int32_t* p1);


cdef extern double rGetZoneValue_ITR(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SaveA_ITR(void*, const int32_t* p1, const char* p2);


cdef extern void SaveFile_ITR(void*, const int32_t* p1, const char* p2);


cdef extern void Serial_ITR(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetAggMap_ITR(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void SetBrightContrast_ITR(void*, const int32_t* p1, const double* p2, const double* p3);


cdef extern void SetColorModel_ITR(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetDataLimits_ITR(void*, const int32_t* p1, const double* p2, const double* p3);


cdef extern void SetSize_ITR(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetZoneColor_ITR(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetZoneValue_ITR(void*, const int32_t* p1, const int32_t* p2, const double* p3);



# Class LAYOUT


cdef extern void CalculateRects_LAYOUT(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5);


cdef extern void ClearAll_LAYOUT(void*, const int32_t* p1);


cdef extern void ClearConstraints_LAYOUT(void*, const int32_t* p1);


cdef extern int32_t Create_LAYOUT(void*, const int32_t* p1, const char* p2);


cdef extern void Destroy_LAYOUT(void*, const int32_t* p1);


cdef extern void GetRectangle_LAYOUT(void*, const int32_t* p1, const int32_t* p2, double* p3, double* p4, double* p5, double* p6);


cdef extern void GetRectName_LAYOUT(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern int32_t iAddConstraint_LAYOUT(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const double* p6, const double* p7);


cdef extern int32_t iAddRectangle_LAYOUT(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5);


cdef extern int32_t iNumRectangles_LAYOUT(void*, const int32_t* p1);


cdef extern void SetRectangle_LAYOUT(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const double* p5, const double* p6);


cdef extern void SetRectangleName_LAYOUT(void*, const int32_t* p1, const int32_t* p2, const char* p3);



# Class LL2


cdef extern int32_t Create_LL2(void*, const double* p1, const double* p2, const double* p3, const double* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8);


cdef extern void Destroy_LL2(void*, const int32_t* p1);


cdef extern void Save_LL2(void*, const int32_t* p1, const char* p2);


cdef extern void SetRow_LL2(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);



# Class LPT


cdef extern int32_t Create_LPT(void*);


cdef extern void Destroy_LPT(void*, const int32_t* p1);


cdef extern void GetLST_LPT(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetStandardLST_LPT(void*, const int32_t* p1, const int32_t* p2);



# Class LST


cdef extern void AddItem_LST(void*, const int32_t* p1, const char* p2, const char* p3);


cdef extern void AddSymbItem_LST(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void AddUniqueItem_LST(void*, const int32_t* p1, const char* p2, const char* p3);


cdef extern void Append_LST(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t AssayChannel_LST(void*);


cdef extern void Clear_LST(void*, const int32_t* p1);


cdef extern void ConvertFromCSVString_LST(void*, const int32_t* p1, const char* p2);


cdef extern void Copy_LST(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t Create_LST(void*, const int32_t* p1);


cdef extern int32_t CreateS_LST(void*, const int32_t* p1);


cdef extern void DelItem_LST(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Destroy_LST(void*, const int32_t* p1);


cdef extern void FindItems_LST(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void GtItem_LST(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, char* p4, const int32_t* p5);


cdef extern void GtSymbItem_LST(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4, int32_t* p5);


cdef extern void IConvertToCSVString_LST(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern int32_t iFindItem_LST(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern int32_t iFindItemMask_LST(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern int32_t iGetInt_LST(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void InsertItem_LST(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4);


cdef extern int32_t iSize_LST(void*, const int32_t* p1);


cdef extern void LoadCSV_LST(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4);


cdef extern void LoadFile_LST(void*, const int32_t* p1, const char* p2);


cdef extern void Resource_LST(void*, const int32_t* p1, const char* p2);


cdef extern double rGetReal_LST(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SaveFile_LST(void*, const int32_t* p1, const char* p2);


cdef extern void SelectCSVStringItems_LST(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void Serial_LST(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetItem_LST(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4);


cdef extern void Sort_LST(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);



# Class LTB


cdef extern void AddRecord_LTB(void*, const int32_t* p1, const char* p2, int32_t* p3);


cdef extern int32_t Contract_LTB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t Create_LTB(void*, const char* p1, const int32_t* p2, const int32_t* p3, const char* p4);


cdef extern int32_t CreateCrypt_LTB(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5, const char* p6);


cdef extern int32_t CreateEx_LTB(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5);


cdef extern void DeleteRecord_LTB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Destroy_LTB(void*, const int32_t* p1);


cdef extern void GetConLST_LTB(void*, const int32_t* p1, const int32_t* p2, const char* p3, const int32_t* p4, const int32_t* p5);


cdef extern void GetLST_LTB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void GetLST2_LTB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern int32_t iFields_LTB(void*, const int32_t* p1);


cdef extern int32_t iFindField_LTB(void*, const int32_t* p1, const char* p2);


cdef extern int32_t iFindKey_LTB(void*, const int32_t* p1, const char* p2);


cdef extern void IGetField_LTB(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern int32_t iGetInt_LTB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void IGetString_LTB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, char* p4, const int32_t* p5);


cdef extern void IGetEnglishString_LTB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, char* p4, const int32_t* p5);


cdef extern int32_t iRecords_LTB(void*, const int32_t* p1);


cdef extern int32_t iSearch_LTB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4);


cdef extern int32_t Merge_LTB(void*, const int32_t* p1, const int32_t* p2);


cdef extern double rGetReal_LTB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void Save_LTB(void*, const int32_t* p1, const char* p2);


cdef extern void SaveCrypt_LTB(void*, const int32_t* p1, const char* p2, const char* p3);


cdef extern void SetInt_LTB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void SetReal_LTB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4);


cdef extern void SetString_LTB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4);



# Class MAP

# Export




cdef extern void ExportAllInView_MAP(void*, const int32_t* p1, const char* p2, const char* p3, const double* p4, const double* p5, const int32_t* p6, const int32_t* p7, const char* p8, const char* p9);


cdef extern void ExportAllRaster_MAP(void*, const int32_t* p1, const char* p2, const char* p3, const int32_t* p4, const int32_t* p5, const double* p6, const int32_t* p7, const int32_t* p8, const char* p9, const char* p10);


cdef extern void ExportAreaInView_MAP(void*, const int32_t* p1, const char* p2, const char* p3, const double* p4, const double* p5, const int32_t* p6, const int32_t* p7, const double* p8, const double* p9, const double* p10, const double* p11, const char* p12, const char* p13);


cdef extern void ExportAreaRaster_MAP(void*, const int32_t* p1, const char* p2, const char* p3, const double* p4, const double* p5, const double* p6, const double* p7, const int32_t* p8, const int32_t* p9, const double* p10, const int32_t* p11, const int32_t* p12, const char* p13, const char* p14);


cdef extern void RenderBitmap_MAP(void*, const int32_t* p1, const char* p2, const double* p3, const double* p4, const double* p5, const double* p6, const char* p7, const int32_t* p8);


# 3D View




cdef extern void CreateLinked3DView_MAP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const double* p4, const double* p5, const double* p6, const double* p7);


# Miscellaneous




cdef extern void AGGList_MAP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void AGGListEx_MAP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void Clean_MAP(void*, const int32_t* p1);


cdef extern void Commit_MAP(void*, const int32_t* p1);


cdef extern void CopyMapToView_MAP(void*, const int32_t* p1, const char* p2, const char* p3);


cdef extern void CRCMap_MAP(void*, const int32_t* p1, int32_t* p2, const char* p3);


cdef extern int32_t Create_MAP(void*, const char* p1, const int32_t* p2);


cdef extern int32_t App_Current_MAP(void*);


cdef extern void DeleteView_MAP(void*, const int32_t* p1, const char* p2);


cdef extern void Destroy_MAP(void*, const int32_t* p1);


cdef extern void Discard_MAP(void*, const int32_t* p1);


cdef extern void DupMap_MAP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t GetLPT_MAP(void*, const int32_t* p1);


cdef extern void GetMapSize_MAP(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5);


cdef extern int32_t GetMETA_MAP(void*, const int32_t* p1);


cdef extern int32_t GetREG_MAP(void*, const int32_t* p1);


cdef extern void GroupList_MAP(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GroupListEx_MAP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void IDuplicateView_MAP(void*, const int32_t* p1, const char* p2, char* p3, const int32_t* p4, const int32_t* p5);


cdef extern int32_t iExistView_MAP(void*, const int32_t* p1, const char* p2);


cdef extern void IGetClassName_MAP(void*, const int32_t* p1, const char* p2, char* p3, const int32_t* p4);


cdef extern void IGetFileName_MAP(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void IGetMapName_MAP(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern int32_t iPackedFiles_MAP(void*, const int32_t* p1);


cdef extern void IUnPackFilesEx_MAP(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern void IUnPackFilesToFolder_MAP(void*, const int32_t* p1, const int32_t* p2, const char* p3, char* p4, const int32_t* p5);


cdef extern void PackFiles_MAP(void*, const int32_t* p1);


cdef extern void Render_MAP(void*, const int32_t* p1, const char* p2);


cdef extern void ResizeAll_MAP(void*, const int32_t* p1);


cdef extern void ResizeAllEx_MAP(void*, const int32_t* p1, const int32_t* p2);


cdef extern double rGetMapScale_MAP(void*, const int32_t* p1);


cdef extern void SaveAsMXD_MAP(void*, const int32_t* p1, const char* p2);


cdef extern void SetClassName_MAP(void*, const int32_t* p1, const char* p2, const char* p3);


cdef extern void App_SetCurrent_MAP(void*, const int32_t* p1);


cdef extern void SetMapName_MAP(void*, const int32_t* p1, const char* p2);


cdef extern void SetMapScale_MAP(void*, const int32_t* p1, const double* p2);


cdef extern void SetMapSize_MAP(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5);


cdef extern void SetMETA_MAP(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetREG_MAP(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Sync_MAP(void*, const char* p1);


cdef extern void UnPackFiles_MAP(void*, const int32_t* p1);


cdef extern void ViewList_MAP(void*, const int32_t* p1, const int32_t* p2);


cdef extern void ViewListEx_MAP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t GetDataProj_MAP(void*, const int32_t* p1);




# Class MAPL


cdef extern int32_t Create_MAPL(void*, const char* p1, const char* p2, const int32_t* p3);


cdef extern int32_t CreateREG_MAPL(void*, const char* p1, const char* p2, const int32_t* p3, const int32_t* p4);


cdef extern void Destroy_MAPL(void*, const int32_t* p1);


cdef extern void Process_MAPL(void*, const int32_t* p1, const int32_t* p2);


cdef extern void ReplaceString_MAPL(void*, const int32_t* p1, const char* p2, const char* p3);



# Class MAPTEMPLATE

# Content Manipulation Methods




cdef extern void GetTmpCopy_MAPTEMPLATE(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void UpdateFromTmpCopy_MAPTEMPLATE(void*, const int32_t* p1, const char* p2);


# File Methods




cdef extern void Commit_MAPTEMPLATE(void*, const int32_t* p1);


cdef extern int32_t Create_MAPTEMPLATE(void*, const char* p1, const char* p2, const int32_t* p3);


cdef extern void Destroy_MAPTEMPLATE(void*, const int32_t* p1);


cdef extern void Discard_MAPTEMPLATE(void*, const int32_t* p1);


cdef extern void GetFileName_MAPTEMPLATE(void*, const int32_t* p1, char* p2, const int32_t* p3);


# Map Making




cdef extern void CreateMap_MAPTEMPLATE(void*, const int32_t* p1, const char* p2, const char* p3);


# Render/Preview




cdef extern void Refresh_MAPTEMPLATE(void*, const int32_t* p1);


cdef extern void RenderPreview_MAPTEMPLATE(void*, const int32_t* p1, HDC p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void RenderPreviewMapProduction_MAPTEMPLATE(void*, const int32_t* p1, HDC p2, int32_t* p3, int32_t* p4, int32_t* p5, int32_t* p6);




# Class MATH


cdef extern void CrossProduct_MATH(void*, const double* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, double* p7, double* p8, double* p9);


cdef extern int32_t iAbs_MATH(void*, const int32_t* p1);


cdef extern int32_t iAnd_MATH(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iMod_MATH(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iOr_MATH(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iRound_MATH(void*, const double* p1);


cdef extern int32_t iXor_MATH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void NicerLogScale_MATH(void*, double* p1, double* p2, const int32_t* p3);


cdef extern void NicerScale_MATH(void*, double* p1, double* p2, double* p3, int32_t* p4);


cdef extern void Normalise3D_MATH(void*, double* p1, double* p2, double* p3);


cdef extern double rAbs_MATH(void*, const double* p1);


cdef extern double rArcCos_MATH(void*, const double* p1);


cdef extern double rArcSin_MATH(void*, const double* p1);


cdef extern double rArcTan_MATH(void*, const double* p1);


cdef extern double rArcTan2_MATH(void*, const double* p1, const double* p2);


cdef extern double rCeil_MATH(void*, const double* p1);


cdef extern double rCos_MATH(void*, const double* p1);


cdef extern double rDotProduct3D_MATH(void*, const double* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6);


cdef extern double rExp_MATH(void*, const double* p1);


cdef extern double rFloor_MATH(void*, const double* p1);


cdef extern double rHypot_MATH(void*, const double* p1, const double* p2);


cdef extern double rLambdaTrans_MATH(void*, const double* p1, const double* p2);


cdef extern double rLambdaTransRev_MATH(void*, const double* p1, const double* p2);


cdef extern double rLog_MATH(void*, const double* p1);


cdef extern double rLog10_MATH(void*, const double* p1);


cdef extern double rLogZ_MATH(void*, const double* p1, const int32_t* p2, const double* p3);


cdef extern double rMod_MATH(void*, const double* p1, const double* p2);


cdef extern void RotateVector_MATH(void*, const double* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, double* p8, double* p9, double* p10);


cdef extern double rPow_MATH(void*, const double* p1, const double* p2);


cdef extern double rRand_MATH(void*);


cdef extern double rRound_MATH(void*, const double* p1, const int32_t* p2);


cdef extern double rSign_MATH(void*, const double* p1, const double* p2);


cdef extern double rSin_MATH(void*, const double* p1);


cdef extern double rSqrt_MATH(void*, const double* p1);


cdef extern double rTan_MATH(void*, const double* p1);


cdef extern double rUnLogZ_MATH(void*, const double* p1, const int32_t* p2, const double* p3);


cdef extern void SRand_MATH(void*);



# Class META

# Attribute




cdef extern int32_t CreateAttrib_META(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4);


cdef extern void DeleteAttrib_META(void*, const int32_t* p1, const int32_t* p2);


# Browser




cdef extern void SetAttributeEditable_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetAttributeVisible_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


# Class




cdef extern int32_t CreateClass_META(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void DeleteClass_META(void*, const int32_t* p1, const int32_t* p2);


# Core




cdef extern void Copy_META(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t Create_META(void*);


cdef extern int32_t CreateS_META(void*, const int32_t* p1);


cdef extern void Destroy_META(void*, const int32_t* p1);


cdef extern void Serial_META(void*, const int32_t* p1, const int32_t* p2);


# Get Data




cdef extern int32_t FindData_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void GetAttribBool_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, int32_t* p4);


cdef extern void GetAttribEnum_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, int32_t* p4);


cdef extern void GetAttribInt_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, int32_t* p4);


cdef extern void GetAttribReal_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, double* p4);


cdef extern void IGetAttribString_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, char* p4, const int32_t* p5);


cdef extern int32_t iHasValue_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


# Import/Export




cdef extern void ExportTableCSV_META(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void ImportTableCSV_META(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void WriteText_META(void*, const int32_t* p1, const int32_t* p2);


# Item




cdef extern void DeleteAllItems_META(void*, const int32_t* p1, const int32_t* p2);


cdef extern void DeleteItem_META(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t hCreatItem_META(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern int32_t hGetNextItem_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


# Object




cdef extern void GetAttribOBJ_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void SetAttribOBJ_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


# Set Data




cdef extern void SetAttribBool_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void SetAttribEnum_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void SetAttribInt_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void SetAttribReal_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4);


cdef extern void SetAttribString_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4);


cdef extern void SetEmptyAttrib_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


# Transfer




cdef extern int32_t hCopyAcrossAttribute_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t hCopyAcrossClass_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t hCopyAcrossData_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t hCopyAcrossItem_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t hCopyAcrossType_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void MoveDatasAcross_META(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


# Type




cdef extern int32_t CreateType_META(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4);


cdef extern void DeleteData_META(void*, const int32_t* p1, const int32_t* p2);


cdef extern void DeleteType_META(void*, const int32_t* p1, const int32_t* p2);


# UMN




cdef extern void IGetObjName_META(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern int32_t ResolveUMN_META(void*, const int32_t* p1, const char* p2);




# Class MVIEW

# 3D Entity




cdef extern void Box3D_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7);


cdef extern void CRCView_MVIEW(void*, const int32_t* p1, int32_t* p2, const char* p3);


cdef extern void CRCViewGroup_MVIEW(void*, const int32_t* p1, const char* p2, int32_t* p3, const char* p4);


cdef extern void Cylinder3D_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const int32_t* p10);


cdef extern void DrawObject3D_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11, const int32_t* p12, const int32_t* p13, const int32_t* p14);


cdef extern void DrawSurface3DEx_MVIEW(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11, const int32_t* p12, const int32_t* p13, const int32_t* p14);


cdef extern void DrawSurface3DFromFile_MVIEW(void*, const int32_t* p1, const char* p2, const char* p3);


cdef extern void FontWeightLST_MVIEW(void*, const int32_t* p1);


cdef extern void GetAGGFileNames_MVIEW(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern int32_t IGetMeta_MVIEW(void*, const int32_t* p1, const char* p2, char* p3, const int32_t* p4);


cdef extern void MeasureText_MVIEW(void*, const int32_t* p1, const char* p2, double* p3, double* p4, double* p5, double* p6);


cdef extern void Point3D_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4);


cdef extern void PolyLine3D_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void RelocateGroup_MVIEW(void*, const int32_t* p1, const char* p2, const double* p3, const double* p4, const double* p5, const double* p6, const int32_t* p7);


cdef extern void SetMeta_MVIEW(void*, const int32_t* p1, const char* p2, const int32_t* p3, const char* p4);


cdef extern void Sphere3D_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5);


cdef extern void UpdateMETAfromGroup_MVIEW(void*, const int32_t* p1, const char* p2, const int32_t* p3);


# 3D Plane




cdef extern void DeletePlane_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void GetPlaneClipPLY_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void GetPlaneEquation_MVIEW(void*, const int32_t* p1, const int32_t* p2, double* p3, double* p4, double* p5, double* p6, double* p7, double* p8, double* p9, double* p10, double* p11);


cdef extern void GetViewPlaneEquation_MVIEW(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, double* p6, double* p7, double* p8, double* p9, double* p10);


cdef extern int32_t iCreatePlane_MVIEW(void*, const int32_t* p1, const char* p2);


cdef extern int32_t iFindPlane_MVIEW(void*, const int32_t* p1, const char* p2);


cdef extern void IGetDefPlane_MVIEW(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern int32_t iIsView3D_MVIEW(void*, const int32_t* p1);


cdef extern int32_t iIsSection_MVIEW(void*, const int32_t* p1);


cdef extern void ListPlaneGroups_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void ListPlanes_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetAllGroupsToPlane_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetAllNewGroupsToPlane_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetDefPlane_MVIEW(void*, const int32_t* p1, const char* p2);


cdef extern void SetGroupToPlane_MVIEW(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void SetH3DN_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Get3DPointOfView_MVIEW(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, double* p6, double* p7);


cdef extern void Set3DPointOfView_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7);


cdef extern void SetPlaneClipPLY_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetPlaneEquation_MVIEW(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10, const double* p11);


cdef extern void SetPlaneSurface_MVIEW(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void SetPlaneSurfInfo_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const double* p5, const double* p6, const double* p7);


# 3D Rendering 2D




cdef extern void DefinePlane3D_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10);


cdef extern void DefineViewerAxis3D_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7);


cdef extern void DefineViewerPlane3D_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4);


# Clipping




cdef extern void _ClipPolyEx_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void _ClipRectEx_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const int32_t* p6, const int32_t* p7);


cdef extern void ClipClear_MVIEW(void*, const int32_t* p1);


cdef extern void ClipGroups_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void ClipMarkedGroups_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void ClipPoly_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void ClipRect_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const int32_t* p6);


cdef extern void DeleteExtClipPLY_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void ExtClipPLYList_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetClipPLY_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetExtClipPLY_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void GetGroupExtClipPLY_MVIEW(void*, const int32_t* p1, const char* p2, int32_t* p3);


cdef extern void GetPLY_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GroupClipMode_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void IGetNameExtClipPLY_MVIEW(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern int32_t iNumExtClipPLY_MVIEW(void*, const int32_t* p1);


cdef extern int32_t iSetExtClipPLY_MVIEW(void*, const int32_t* p1, const int32_t* p2, const char* p3, const int32_t* p4);


cdef extern void SetClipPLY_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetGroupExtClipPLY_MVIEW(void*, const int32_t* p1, const char* p2, const int32_t* p3);


# Color




cdef extern void Color2RGB_MVIEW(void*, const int32_t* p1, int32_t* p2, int32_t* p3, int32_t* p4);


cdef extern void ColorDescr_MVIEW(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern int32_t iColor_MVIEW(void*, const char* p1);


cdef extern int32_t iColorCMY_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t iColorHSV_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t iColorRGB_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


# Drawing Attribute




cdef extern void ClipMode_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void FillColor_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void LineColor_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void LineSmooth_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void LineStyle_MVIEW(void*, const int32_t* p1, const int32_t* p2, const double* p3);


cdef extern void LineThick_MVIEW(void*, const int32_t* p1, const double* p2);


cdef extern void PatAngle_MVIEW(void*, const int32_t* p1, const double* p2);


cdef extern void PatDensity_MVIEW(void*, const int32_t* p1, const double* p2);


cdef extern void PatNumber_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void PatSize_MVIEW(void*, const int32_t* p1, const double* p2);


cdef extern void PatStyle_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void PatThick_MVIEW(void*, const int32_t* p1, const double* p2);


cdef extern void SymbAngle_MVIEW(void*, const int32_t* p1, const double* p2);


cdef extern void SymbColor_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SymbFillColor_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SymbFont_MVIEW(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void SymbNumber_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SymbSize_MVIEW(void*, const int32_t* p1, const double* p2);


cdef extern void TextAngle_MVIEW(void*, const int32_t* p1, const double* p2);


cdef extern void TextColor_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void TextFont_MVIEW(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void TextRef_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void TextSize_MVIEW(void*, const int32_t* p1, const double* p2);


cdef extern void Transparency_MVIEW(void*, const int32_t* p1, const double* p2);


cdef extern void ZValue_MVIEW(void*, const int32_t* p1, const double* p2);


# Drawing Entity




cdef extern void Arc_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8);


cdef extern void Chord_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8);


cdef extern void ClassifiedSymbols_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, const double* p6, const char* p7, const char* p8, const char* p9);


cdef extern void ComplexPolygon_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void Ellipse_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6);


cdef extern void Line_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5);


cdef extern void LineVV_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void PolygonDm_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void PolygonPLY_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void PolyLine_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void PolyLineDm_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void PolyWrap_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void Rectangle_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5);


cdef extern void Segment_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8);


cdef extern void SizeSymbols_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void Symbol_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3);


cdef extern void Symbols_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SymbolsITR_MVIEW(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void Text_MVIEW(void*, const int32_t* p1, const char* p2, const double* p3, const double* p4);


# Drawing Object




cdef extern void Aggregate_MVIEW(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern int32_t GetAggregate_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void ChangeLineMessage_MVIEW(void*, const int32_t* p1, const char* p2);


cdef extern void ColSymbol_MVIEW(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern int32_t GetColSymbol_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void DATALINKD_MVIEW(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern int32_t GetDATALINKD_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void EasyMaker_MVIEW(void*, const int32_t* p1, const char* p2, const char* p3);


cdef extern void EMFObject_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const char* p6);


cdef extern void ExternalStringObject_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const char* p6, const char* p7, const char* p8);


cdef extern void Link_MVIEW(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void Maker_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4, const int32_t* p5, const char* p6, const char* p7);


cdef extern void Meta_MVIEW(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void VOXD_MVIEW(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern int32_t GetVOXD_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void DrawVectorVoxelVectors_MVIEW(void*, const int32_t* p1, const int32_t* p2, const char* p3, const int32_t* p4, const double* p5, const double* p6, const double* p7, const double* p8, const int32_t* p9);


cdef extern int32_t GetVECTOR3D_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void DrawVectors3D_MVIEW(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const double* p10, const double* p11, const double* p12);


# Group Methods




cdef extern void SetGroupITR_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t GetGroupITR_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iGroupITRExists_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void DeleteGroupITR_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetGroupTPAT_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t GetGroupTPAT_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iGroupTPATExists_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void DeleteGroupTPAT_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iGroupStorageExists_MVIEW(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern int32_t ReadGroupStorage_MVIEW(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void DeleteGroupStorage_MVIEW(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void WriteGroupStorage_MVIEW(void*, const int32_t* p1, const int32_t* p2, const char* p3, const int32_t* p4);


cdef extern void CopyMarkedGroups_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void CopyRawMarkedGroups_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t CRCGroup_MVIEW(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void DeleteGroup_MVIEW(void*, const int32_t* p1, const char* p2);


cdef extern void DelMarkedGroups_MVIEW(void*, const int32_t* p1);


cdef extern void GetGroupExtent_MVIEW(void*, const int32_t* p1, const char* p2, double* p3, double* p4, double* p5, double* p6, const int32_t* p7);


cdef extern void GetGroupTransparency_MVIEW(void*, const int32_t* p1, const char* p2, double* p3);


cdef extern void GroupToPLY_MVIEW(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void HideMarkedGroups_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void HideShadow2DInterpretations_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iExistGroup_MVIEW(void*, const int32_t* p1, const char* p2);


cdef extern void IGenNewGroupName_MVIEW(void*, const int32_t* p1, const char* p2, char* p3, const int32_t* p4);


cdef extern int32_t iIsGroup_MVIEW(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern int32_t iIsGroupEmpty_MVIEW(void*, const int32_t* p1, const char* p2);


cdef extern int32_t iIsMovable_MVIEW(void*, const int32_t* p1);


cdef extern int32_t iIsVisible_MVIEW(void*, const int32_t* p1);


cdef extern int32_t iListGroups_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t iRenderOrder_MVIEW(void*, const int32_t* p1);


cdef extern void MarkAllGroups_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void MarkEmptyGroups_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void MarkGroup_MVIEW(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void MoveGroupBackward_MVIEW(void*, const int32_t* p1, const char* p2);


cdef extern void MoveGroupForward_MVIEW(void*, const int32_t* p1, const char* p2);


cdef extern void MoveGroupToBack_MVIEW(void*, const int32_t* p1, const char* p2);


cdef extern void MoveGroupToFront_MVIEW(void*, const int32_t* p1, const char* p2);


cdef extern void RenameGroup_MVIEW(void*, const int32_t* p1, const char* p2, const char* p3);


cdef extern void SetGroupMoveable_MVIEW(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void SetGroupTransparency_MVIEW(void*, const int32_t* p1, const char* p2, const double* p3);


cdef extern void SetMarkMoveable_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetMovability_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetRenderOrder_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetVisibility_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void StartGroup_MVIEW(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void GetGroupGUID_MVIEW(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern int32_t iFindGroupByGUID_MVIEW(void*, const int32_t* p1, const char* p2);


# Projection




cdef extern void _SetWorkingIPJ_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void ClearESRILDTs_MVIEW(void*, const int32_t* p1);


cdef extern int32_t iIsProjectionEmpty_MVIEW(void*, const int32_t* p1);


cdef extern void GetIPJ_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetUserIPJ_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void ModePJ_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern double rNorth_MVIEW(void*, const int32_t* p1);


cdef extern void SetIPJ_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetUserIPJ_MVIEW(void*, const int32_t* p1, const int32_t* p2);


# Render




cdef extern int32_t iGet3DGroupFlags_MVIEW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Set3DGroupFlags_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void _GetGroupFreezeScale_MVIEW(void*, const int32_t* p1, const int32_t* p2, double* p3);


cdef extern void _SetFreezeScale_MVIEW(void*, const int32_t* p1, const double* p2);


cdef extern void _SetGroupFreezeScale_MVIEW(void*, const int32_t* p1, const int32_t* p2, const double* p3);


cdef extern int32_t iFindGroup_MVIEW(void*, const int32_t* p1, const char* p2);


cdef extern void IGroupName_MVIEW(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern void Render_MVIEW(void*, const int32_t* p1, HDC p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const double* p7, const double* p8, const double* p9, const double* p10);


# Utility Drawing




cdef extern void _SetUFac_MVIEW(void*, const int32_t* p1, const double* p2);


cdef extern void AxisX_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7);


cdef extern void AxisY_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7);


cdef extern void Grid_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const int32_t* p6);


cdef extern void LabelFid_MVIEW(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7);


cdef extern void LabelX_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8);


cdef extern void LabelY_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8);


cdef extern void OptimumTick_MVIEW(void*, const double* p1, const double* p2, double* p3);


# View




cdef extern int32_t Create_MVIEW(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern int32_t CreateCrookedSection_MVIEW(void*, const int32_t* p1, const int32_t* p2, const char* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10, const double* p11, const int32_t* p12, const int32_t* p13, const int32_t* p14);


cdef extern int32_t CreateCrookedSectionDataProfile_MVIEW(void*, const int32_t* p1, const int32_t* p2, const char* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10, const double* p11, const int32_t* p12, const int32_t* p13, const int32_t* p14, const int32_t* p15);


cdef extern void Destroy_MVIEW(void*, const int32_t* p1);


cdef extern void Extent_MVIEW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, double* p4, double* p5, double* p6, double* p7);


cdef extern int32_t GetMAP_MVIEW(void*, const int32_t* p1);


cdef extern int32_t GetREG_MVIEW(void*, const int32_t* p1);


cdef extern void IGetName_MVIEW(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void GetGUID_MVIEW(void*, const int32_t* p1, char* p2, const int32_t* p3);


# View Control




cdef extern void _PlotToView_MVIEW(void*, const int32_t* p1, double* p2, double* p3);


cdef extern void _SetThinRes_MVIEW(void*, const int32_t* p1, const double* p2);


cdef extern void _ViewToPlot_MVIEW(void*, const int32_t* p1, double* p2, double* p3);


cdef extern void BestFitWindow_MVIEW(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, double* p6, double* p7, double* p8, double* p9, const int32_t* p10);


cdef extern void FitMapWindow3D_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9);


cdef extern void FitWindow_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9);


cdef extern void IGetClassName_MVIEW(void*, const int32_t* p1, const char* p2, char* p3, const int32_t* p4);


cdef extern void MapOrigin_MVIEW(void*, const int32_t* p1, double* p2, double* p3);


cdef extern void ReScale_MVIEW(void*, const int32_t* p1, const double* p2);


cdef extern double rGetMapScale_MVIEW(void*, const int32_t* p1);


cdef extern double rScaleMM_MVIEW(void*, const int32_t* p1);


cdef extern double rScalePjMM_MVIEW(void*, const int32_t* p1);


cdef extern double rScaleYMM_MVIEW(void*, const int32_t* p1);


cdef extern void ScaleAllGroup_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3);


cdef extern void ScaleWindow_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9);


cdef extern void SetClassName_MVIEW(void*, const int32_t* p1, const char* p2, const char* p3);


cdef extern void SetWindow_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const int32_t* p6);


cdef extern void TranScale_MVIEW(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5);


cdef extern void UserToView_MVIEW(void*, const int32_t* p1, double* p2, double* p3);


cdef extern void ViewToUser_MVIEW(void*, const int32_t* p1, double* p2, double* p3);




# Class MVU


cdef extern void Arrow_MVU(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const int32_t* p8);


cdef extern void ArrowVectorVV_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const double* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const double* p11);


cdef extern void BarChart_MVU(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const char* p5, const char* p6, const char* p7, const double* p8, const char* p9, const double* p10, const char* p11, const double* p12, const double* p13, const int32_t* p14, const int32_t* p15, const int32_t* p16, const int32_t* p17, const int32_t* p18, const int32_t* p19, const int32_t* p20, const double* p21, const double* p22, const double* p23, const double* p24, const double* p25, const double* p26, const double* p27, const double* p28);


cdef extern void CDIPixelPlot_MVU(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void CDIPixelPlot3D_MVU(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void ColorBar_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8);


cdef extern void ColorBar2_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9);


cdef extern void ColorBar2Style_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const int32_t* p10);


cdef extern void ColorBarHor_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const int32_t* p9);


cdef extern void ColorBarHor2_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const int32_t* p10);


cdef extern void ColorBarHor2Style_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const int32_t* p10, const int32_t* p11);


cdef extern void ColorBarHorStyle_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const int32_t* p9, const int32_t* p10);


cdef extern void ColorBarStyle_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const int32_t* p9);


cdef extern void ColorBarREG_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void Contour_MVU(void*, const int32_t* p1, const char* p2, const char* p3);


cdef extern void ContourPLY_MVU(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4);


cdef extern void CSymbLegend_MVU(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const char* p6, const char* p7, const char* p8);


cdef extern void DecayCurve_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const double* p7, const double* p8, const int32_t* p9, const int32_t* p10, const double* p11, const double* p12, const double* p13, const double* p14, const double* p15, const double* p16, const double* p17, const double* p18, const double* p19, const int32_t* p20, const char* p21);


cdef extern void DirectionPlot_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const double* p5, const int32_t* p6);


cdef extern void EMForward_MVU(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const int32_t* p8, const double* p9, const double* p10, const double* p11, const double* p12, const int32_t* p13, const int32_t* p14, const int32_t* p15, const int32_t* p16, const int32_t* p17, const int32_t* p18);


cdef extern void ExportDatamineString_MVU(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void ExportDXF3D_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void ExportSurpacSTR_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void FlightPlot_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4, const int32_t* p5, const double* p6, const int32_t* p7, const double* p8, const double* p9);


cdef extern void GenAreas_MVU(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const double* p5);


cdef extern void GetRangeGOCADSurface_MVU(void*, const char* p1, double* p2, double* p3, double* p4, double* p5, double* p6, double* p7);


cdef extern void Histogram_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4, const char* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10, const double* p11, const double* p12, const double* p13, const double* p14, const int32_t* p15, const int32_t* p16, const int32_t* p17, const int32_t* p18);


cdef extern void Histogram2_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4, const char* p5, const double* p6, const char* p7, const double* p8, const char* p9, const double* p10, const double* p11, const double* p12, const double* p13, const double* p14, const double* p15, const double* p16, const double* p17, const double* p18, const int32_t* p19, const int32_t* p20, const int32_t* p21, const int32_t* p22, const double* p23);


cdef extern void Histogram3_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4, const char* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10, const double* p11, const double* p12, const double* p13, const double* p14, const int32_t* p15, const int32_t* p16, const int32_t* p17, const int32_t* p18, const int32_t* p19, const int32_t* p20);


cdef extern void Histogram4_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4, const char* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10, const double* p11, const double* p12, const double* p13, const double* p14, const int32_t* p15, const int32_t* p16, const int32_t* p17, const int32_t* p18, const int32_t* p19, const int32_t* p20, const int32_t* p21);


cdef extern void Histogram5_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4, const char* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10, const double* p11, const double* p12, const double* p13, const double* p14, const double* p15, const int32_t* p16, const int32_t* p17, const int32_t* p18, const int32_t* p19, const int32_t* p20, const int32_t* p21, const int32_t* p22, const int32_t* p23);


cdef extern int32_t iExportableDXF3DGroupsLST_MVU(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iMapsetTest_MVU(void*, const double* p1, const double* p2, const double* p3, const double* p4, const char* p5, const int32_t* p6, const int32_t* p7, double* p8, const double* p9, const double* p10, const double* p11, const double* p12, const double* p13, const double* p14);


cdef extern int32_t iMapset2Test_MVU(void*, const double* p1, const double* p2, const double* p3, const double* p4, const char* p5, const int32_t* p6, const int32_t* p7, double* p8, const double* p9, const double* p10, const double* p11, const double* p12, const double* p13, const double* p14, const double* p15);


cdef extern void ImportGOCADSurface_MVU(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void LoadPlot_MVU(void*, const int32_t* p1, const char* p2);


cdef extern void MapFromPLT_MVU(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const double* p5, const double* p6);


cdef extern void MapMDF_MVU(void*, const int32_t* p1, const char* p2, const char* p3);


cdef extern void Mapset_MVU(void*, const int32_t* p1, const char* p2, const char* p3, const double* p4, const double* p5, const double* p6, const double* p7, const char* p8, const int32_t* p9, const int32_t* p10, const double* p11, const double* p12, const double* p13, const double* p14, const double* p15, const double* p16, const double* p17);


cdef extern void Mapset2_MVU(void*, const int32_t* p1, const char* p2, const char* p3, const double* p4, const double* p5, const double* p6, const double* p7, const char* p8, const int32_t* p9, const int32_t* p10, const double* p11, const double* p12, const double* p13, const double* p14, const double* p15, const double* p16, const double* p17, const double* p18);


cdef extern void MDF_MVU(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4);


cdef extern void PathPlot_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4, const int32_t* p5, const double* p6, const int32_t* p7, const double* p8, const double* p9, const double* p10);


cdef extern void PathPlotEx_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4, const int32_t* p5, const int32_t* p6, const double* p7, const int32_t* p8, const double* p9, const double* p10, const double* p11);


cdef extern void PathPlotEx2_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4, const int32_t* p5, const int32_t* p6, const double* p7, const int32_t* p8, const double* p9, const double* p10, const double* p11, const int32_t* p12);


cdef extern void PlotVoxelSurface_MVU(void*, const int32_t* p1, const int32_t* p2, const double* p3, const int32_t* p4, const double* p5);


cdef extern void PlotVoxelSurface2_MVU(void*, const int32_t* p1, const int32_t* p2, const double* p3, const int32_t* p4, const double* p5, const double* p6, const char* p7);


cdef extern void GenerateSurfaceFromVoxel_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, const double* p6, const int32_t* p7, const double* p8, const double* p9, const char* p10);


cdef extern void Post_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const double* p10);


cdef extern void PostEx_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const double* p7, const double* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11, const double* p12, const double* p13, const int32_t* p14, const double* p15, const int32_t* p16, const double* p17, const int32_t* p18, const double* p19, const int32_t* p20);


cdef extern void Probability_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4, const char* p5, const int32_t* p6, const double* p7, const double* p8, const double* p9, const double* p10, const double* p11, const double* p12, const double* p13, const double* p14, const int32_t* p15, const int32_t* p16, const int32_t* p17, const int32_t* p18);


cdef extern void ProfilePlot_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, const int32_t* p6, const double* p7, const double* p8, const double* p9, const int32_t* p10);


cdef extern void ProfilePlotEx_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, const int32_t* p6, const double* p7, const double* p8, const double* p9, const int32_t* p10, const int32_t* p11, const double* p12, const int32_t* p13, const char* p14, const char* p15);


cdef extern void PropSymbLegend_MVU(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const int32_t* p7, const double* p8, const double* p9, const char* p10, const char* p11);


cdef extern void ReGenAreas_MVU(void*, const int32_t* p1, const char* p2);


cdef extern void SymbOff_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, const double* p6);


cdef extern void TextBox_MVU(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const char* p6, const double* p7, const int32_t* p8);


cdef extern void Tick_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, const double* p6, const double* p7, const double* p8);


cdef extern void TickEx_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9);


cdef extern void TrndPath_MVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5);



# Class MXD


cdef extern void CreateMetadata_MXD(void*, const char* p1);


cdef extern void ConvertToMap_MXD(void*, const char* p1, const char* p2);


cdef extern void Sync_MXD(void*, const char* p1);



# Class PAT


cdef extern int32_t Create_PAT(void*);


cdef extern void Destroy_PAT(void*, const int32_t* p1);


cdef extern void GetLST_PAT(void*, const int32_t* p1, const char* p2, const int32_t* p3);



# Class PG

# 2D Methods




cdef extern void Copy_PG(void*, const int32_t* p1, const int32_t* p2);


cdef extern void CopySubset_PG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8);


cdef extern int32_t Create_PG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t CreateS_PG(void*, const int32_t* p1);


cdef extern void Destroy_PG(void*, const int32_t* p1);


cdef extern void Dummy_PG(void*, const int32_t* p1);


cdef extern int32_t iEType_PG(void*, const int32_t* p1);


cdef extern int32_t iNCols_PG(void*, const int32_t* p1);


cdef extern int32_t iNRows_PG(void*, const int32_t* p1);


cdef extern int32_t iNSlices_PG(void*, const int32_t* p1);


cdef extern void Range_PG(void*, const int32_t* p1, double* p2, double* p3);


cdef extern double rGet_PG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void ReadCol_PG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void ReadRow_PG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void ReAllocate_PG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void Serial_PG(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Statistics_PG(void*, const int32_t* p1, const int32_t* p2);


cdef extern void WriteCol_PG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void WriteRow_PG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


# 3D Methods




cdef extern void CopySubset3D_PG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11);


cdef extern int32_t Create3D_PG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void ReadCol3D_PG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void ReadRow3D_PG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void ReadTrace3D_PG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void ReAllocate3D_PG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void WriteCol3D_PG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void WriteRow3D_PG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void WriteTrace3D_PG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


# Utility Methods




cdef extern void ReadBF_PG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void ReadRA_PG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const char* p7);


cdef extern void WriteBF_PG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void WriteBFEx_PG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const double* p8);


cdef extern void WriteWA_PG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const char* p7);




# Class PJ


cdef extern void ClipPLY_PJ(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const int32_t* p7);


cdef extern void ConvertVV_PJ(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void ConvertVV3_PJ(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void ConvertXY_PJ(void*, const int32_t* p1, double* p2, double* p3);


cdef extern void ConvertXYFromXYZ_PJ(void*, const int32_t* p1, double* p2, double* p3, const double* p4);


cdef extern void ConvertXYZ_PJ(void*, const int32_t* p1, double* p2, double* p3, double* p4);


cdef extern int32_t Create_PJ(void*, const char* p1, const char* p2);


cdef extern int32_t CreateIPJ_PJ(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t CreateRectified_PJ(void*, const double* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const int32_t* p7);


cdef extern void Destroy_PJ(void*, const int32_t* p1);


cdef extern int32_t iElevation_PJ(void*, const int32_t* p1);


cdef extern int32_t iIsInputLL_PJ(void*, const int32_t* p1);


cdef extern int32_t iIsOutputLL_PJ(void*, const int32_t* p1);


cdef extern void ProjectBoundingRectangle_PJ(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5);


cdef extern void ProjectBoundingRectangle2_PJ(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, const double* p6);


cdef extern void ProjectBoundingRectangleRes_PJ(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, double* p6);


cdef extern void ProjectBoundingRectangleRes2_PJ(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, double* p6, const double* p7);


cdef extern void ProjectLimitedBoundingRectangle_PJ(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, double* p6, double* p7, double* p8, double* p9);


cdef extern void SetupLDT_PJ(void*, const int32_t* p1);



# Class PLY


cdef extern void AddPolygon_PLY(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void AddPolygonEx_PLY(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void ChangeIPJ_PLY(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Clear_PLY(void*, const int32_t* p1);


cdef extern void Copy_PLY(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t Create_PLY(void*);


cdef extern int32_t CreateS_PLY(void*, const int32_t* p1);


cdef extern void Destroy_PLY(void*, const int32_t* p1);


cdef extern void Extent_PLY(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5);


cdef extern void GetIPJ_PLY(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetPolygon_PLY(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void GetPolygonEx_PLY(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, int32_t* p5);


cdef extern int32_t iClipArea_PLY(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5);


cdef extern int32_t iClipLineInt_PLY(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const int32_t* p6, const double* p7, int32_t* p8);


cdef extern int32_t iClipPLY_PLY(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void IGetDescription_PLY(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern int32_t iNumPoly_PLY(void*, const int32_t* p1);


cdef extern void LoadTable_PLY(void*, const int32_t* p1, const char* p2);


cdef extern double rArea_PLY(void*, const int32_t* p1);


cdef extern void Rectangle_PLY(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5);


cdef extern void Rotate_PLY(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4);


cdef extern void SaveTable_PLY(void*, const int32_t* p1, const char* p2);


cdef extern void Serial_PLY(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetDescription_PLY(void*, const int32_t* p1, const char* p2);


cdef extern void SetIPJ_PLY(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Thin_PLY(void*, const int32_t* p1, const double* p2);



# Class RA


cdef extern int32_t Create_RA(void*, const char* p1);


cdef extern int32_t CreateSBF_RA(void*, const int32_t* p1, const char* p2);


cdef extern void Destroy_RA(void*, const int32_t* p1);


cdef extern int32_t IiGets_RA(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern int32_t iLen_RA(void*, const int32_t* p1);


cdef extern int32_t iLine_RA(void*, const int32_t* p1);


cdef extern int32_t iSeek_RA(void*, const int32_t* p1, const int32_t* p2);



# Class REG


cdef extern void Clear_REG(void*, const int32_t* p1);


cdef extern void Copy_REG(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t Create_REG(void*, const int32_t* p1);


cdef extern int32_t CreateS_REG(void*, const int32_t* p1);


cdef extern void Destroy_REG(void*, const int32_t* p1);


cdef extern void Get_REG(void*, const int32_t* p1, const char* p2, char* p3, const int32_t* p4);


cdef extern void GetInt_REG(void*, const int32_t* p1, const char* p2, int32_t* p3);


cdef extern void GetOne_REG(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4, char* p5, const int32_t* p6);


cdef extern void GetReal_REG(void*, const int32_t* p1, const char* p2, double* p3);


cdef extern int32_t iEntries_REG(void*, const int32_t* p1);


cdef extern void LoadINI_REG(void*, const int32_t* p1, const char* p2);


cdef extern void MatchString_REG(void*, const int32_t* p1, const char* p2, char* p3, const int32_t* p4);


cdef extern void Merge_REG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SaveINI_REG(void*, const int32_t* p1, const char* p2);


cdef extern void Serial_REG(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Set_REG(void*, const int32_t* p1, const char* p2, const char* p3);


cdef extern void SetInt_REG(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void SetReal_REG(void*, const int32_t* p1, const char* p2, const double* p3);



# Class SBF


cdef extern int32_t Create_SBF(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void CreateObjList_SBF(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void DelDir_SBF(void*, const int32_t* p1, const char* p2);


cdef extern void DelFile_SBF(void*, const int32_t* p1, const char* p2);


cdef extern void Destroy_SBF(void*, const int32_t* p1);


cdef extern int32_t hGetDB_SBF(void*, const int32_t* p1);


cdef extern int32_t hGetMAP_SBF(void*, const int32_t* p1);


cdef extern int32_t hGetSYS_SBF(void*);


cdef extern int32_t iExistDir_SBF(void*, const int32_t* p1, const char* p2);


cdef extern int32_t iExistFile_SBF(void*, const int32_t* p1, const char* p2);


cdef extern void SaveLog_SBF(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const int32_t* p5);



# Class ST


cdef extern int32_t Create_ST(void*);


cdef extern int32_t CreateExact_ST(void*);


cdef extern void Data_ST(void*, const int32_t* p1, const double* p2);


cdef extern void DataVV_ST(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Destroy_ST(void*, const int32_t* p1);


cdef extern void GetHistogramBins_ST(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetHistogramInfo_ST(void*, const int32_t* p1, int32_t* p2, double* p3, double* p4);


cdef extern void Histogram_ST(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Histogram2_ST(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4);


cdef extern double rEquivalentPercentile_ST(void*, const int32_t* p1, const double* p2);


cdef extern double rEquivalentValue_ST(void*, const int32_t* p1, const double* p2);


cdef extern void Reset_ST(void*, const int32_t* p1);


cdef extern double rGetInfo_ST(void*, const int32_t* p1, const int32_t* p2);


cdef extern double rGetNormProb_ST(void*, const double* p1);


cdef extern double rGetNormProbX_ST(void*, const double* p1);


cdef extern double rNormalTest_ST(void*, const int32_t* p1);



# Class ST2


cdef extern int32_t Create_ST2(void*);


cdef extern void DataVV_ST2(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void Destroy_ST2(void*, const int32_t* p1);


cdef extern int32_t iItems_ST2(void*, const int32_t* p1);


cdef extern void Reset_ST2(void*, const int32_t* p1);


cdef extern double rGet_ST2(void*, const int32_t* p1, const int32_t* p2);



# Class STR

# Data Input




cdef extern int32_t iScanI_STR(void*, const char* p1);


cdef extern double rScanDate_STR(void*, const char* p1, const int32_t* p2);


cdef extern double rScanForm_STR(void*, const char* p1, const int32_t* p2);


cdef extern double rScanR_STR(void*, const char* p1);


cdef extern double rScanTime_STR(void*, const char* p1, const int32_t* p2);


# File Name




cdef extern void IFileCombineParts_STR(void*, const char* p1, const char* p2, const char* p3, const char* p4, const char* p5, char* p6, const int32_t* p7);


cdef extern void IFileExt_STR(void*, const char* p1, const char* p2, char* p3, const int32_t* p4, const int32_t* p5);


cdef extern void IFileNamePart_STR(void*, const char* p1, char* p2, const int32_t* p3, const int32_t* p4);


cdef extern void IGetMFile_STR(void*, const char* p1, char* p2, const int32_t* p3, const int32_t* p4);


cdef extern void IRemoveQualifiers_STR(void*, const char* p1, char* p2, const int32_t* p3);


# Formating




cdef extern void IFormatCRC_STR(void*, const int32_t* p1, char* p2, const int32_t* p3, const int32_t* p4);


cdef extern void IFormatDate_STR(void*, const double* p1, char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void IFormatI_STR(void*, const int32_t* p1, char* p2, const int32_t* p3, const int32_t* p4);


cdef extern void IFormatR_STR(void*, const double* p1, char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void IFormatR2_STR(void*, const double* p1, char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void IFormatReal_STR(void*, const double* p1, char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void IFormatTime_STR(void*, const double* p1, char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


# General




cdef extern void _Escape_STR(void*, char* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t iChar_STR(void*, const char* p1);


cdef extern int32_t IiCharN_STR(void*, const char* p1, const int32_t* p2, const int32_t* p3);


cdef extern void IJustify_STR(void*, const char* p1, char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void IReplaceiMatchString_STR(void*, char* p1, const char* p2, const char* p3, const int32_t* p4);


cdef extern void IReplaceMatchString_STR(void*, char* p1, const char* p2, const char* p3, const int32_t* p4);


cdef extern void ISetCharN_STR(void*, char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void ISplitString_STR(void*, char* p1, const char* p2, char* p3, const int32_t* p4);


cdef extern void IStrcat_STR(void*, char* p1, const char* p2, const int32_t* p3);


cdef extern int32_t iStrcmp_STR(void*, const char* p1, const char* p2, const int32_t* p3);


cdef extern void IStrcpy_STR(void*, char* p1, const char* p2, const int32_t* p3);


cdef extern int32_t iStriMask_STR(void*, const char* p1, const char* p2);


cdef extern void IStrins_STR(void*, char* p1, const int32_t* p2, const char* p3, const int32_t* p4);


cdef extern int32_t iStrlen_STR(void*, const char* p1);


cdef extern int32_t iStrMask_STR(void*, const char* p1, const char* p2);


cdef extern int32_t iStrMin_STR(void*, char* p1);


cdef extern int32_t iStrMin2_STR(void*, const char* p1);


cdef extern int32_t iStrncmp_STR(void*, const char* p1, const char* p2, const int32_t* p3, const int32_t* p4);


cdef extern int32_t iStrStr_STR(void*, const char* p1, const char* p2, const int32_t* p3);


cdef extern void ISubstr_STR(void*, char* p1, const int32_t* p2, const char* p3, const int32_t* p4, const int32_t* p5);


cdef extern void IToLower_STR(void*, char* p1, const int32_t* p2);


cdef extern void IToUpper_STR(void*, char* p1, const int32_t* p2);


cdef extern void IXYZLine_STR(void*, const char* p1, char* p2, const int32_t* p3);


cdef extern void MakeAlpha_STR(void*, char* p1);


cdef extern void Printf_STR(void*, char* p1, const int32_t* p2, const char* p3);


cdef extern void ReplaceChar_STR(void*, char* p1, const char* p2, const char* p3);


cdef extern void ReplaceChar2_STR(void*, char* p1, const char* p2, const char* p3);


cdef extern void ReplaceMultiChar_STR(void*, char* p1, const char* p2, const char* p3);


cdef extern void ReplaceNonASCII_STR(void*, char* p1, const char* p2);


cdef extern void SetChar_STR(void*, char* p1, const int32_t* p2);


cdef extern void TrimQuotes_STR(void*, char* p1);


cdef extern void TrimSpace_STR(void*, char* p1, const int32_t* p2);


cdef extern void UnQuote_STR(void*, char* p1);


# Misc




cdef extern void IGenGroupName_STR(void*, const char* p1, const char* p2, const char* p3, char* p4, const int32_t* p5);


# Tokenizing




cdef extern int32_t iCountTokens_STR(void*, const char* p1, const char* p2);


cdef extern void IGetToken_STR(void*, char* p1, const int32_t* p2, const char* p3, const int32_t* p4);


cdef extern int32_t iTokenize_STR(void*, char* p1, const char* p2, const char* p3, const char* p4, const char* p5);


cdef extern int32_t iTokens_STR(void*, char* p1, const char* p2);


cdef extern int32_t iTokens2_STR(void*, char* p1, const char* p2, const char* p3, const char* p4, const char* p5);


cdef extern void ParseList_STR(void*, const char* p1, const int32_t* p2);




# Class SURFACE


cdef extern int32_t Create_SURFACE(void*, const char* p1, const int32_t* p2);


cdef extern int32_t Open_SURFACE(void*, const char* p1, const int32_t* p2);


cdef extern void Destroy_SURFACE(void*, const int32_t* p1);


cdef extern void GetIPJ_SURFACE(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetIPJ_SURFACE(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetSurfaceItems_SURFACE(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t GetSurfaceItem_SURFACE(void*, const int32_t* p1, const char* p2);


cdef extern void AddSurfaceItem_SURFACE(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetSurfaceNames_SURFACE(void*, const char* p1, const int32_t* p2);


cdef extern void GetClosedSurfaceNames_SURFACE(void*, const char* p1, const int32_t* p2);


cdef extern void GetExtents_SURFACE(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, double* p6, double* p7);


cdef extern int32_t CRC_SURFACE(void*, const char* p1, const char* p2, int32_t* p3);


cdef extern void Sync_SURFACE(void*, const char* p1);


cdef extern void CreateFromDXF_SURFACE(void*, const int32_t* p1, const char* p2, const char* p3);


cdef extern void CreateFromVulcanTriangulation_SURFACE(void*, const char* p1, const int32_t* p2, const char* p3);


cdef extern void AppendVulcanTriangulation_SURFACE(void*, const char* p1, const int32_t* p2, const char* p3);



# Class SURFACEITEM


cdef extern int32_t Create_SURFACEITEM(void*, const char* p1, const char* p2);


cdef extern void Destroy_SURFACEITEM(void*, const int32_t* p1);


cdef extern void GetGUID_SURFACEITEM(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void SetProperties_SURFACEITEM(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const char* p5, const double* p6, const char* p7, const char* p8, const double* p9);


cdef extern void SetPropertiesEx_SURFACEITEM(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const char* p5, const double* p6, const char* p7, const char* p8, const int32_t* p9, const double* p10, const double* p11);


cdef extern void GetProperties_SURFACEITEM(void*, const int32_t* p1, char* p2, const int32_t* p3, char* p4, const int32_t* p5, char* p6, const int32_t* p7, char* p8, const int32_t* p9, double* p10, char* p11, const int32_t* p12, char* p13, const int32_t* p14, double* p15);


cdef extern void GetPropertiesEx_SURFACEITEM(void*, const int32_t* p1, char* p2, const int32_t* p3, char* p4, const int32_t* p5, char* p6, const int32_t* p7, char* p8, const int32_t* p9, double* p10, char* p11, const int32_t* p12, char* p13, const int32_t* p14, int32_t* p15, double* p16, double* p17);


cdef extern void SetDefaultRenderProperties_SURFACEITEM(void*, const int32_t* p1, const int32_t* p2, const double* p3, const int32_t* p4);


cdef extern void GetDefaultRenderProperties_SURFACEITEM(void*, const int32_t* p1, int32_t* p2, double* p3, int32_t* p4);


cdef extern int32_t iNumComponents_SURFACEITEM(void*, const int32_t* p1);


cdef extern int32_t iAddMesh_SURFACEITEM(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void GetMesh_SURFACEITEM(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8);


cdef extern void GetExtents_SURFACEITEM(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, double* p6, double* p7);


cdef extern void GetMeshInfo_SURFACEITEM(void*, const int32_t* p1, const int32_t* p2, int32_t* p3, int32_t* p4, double* p5, double* p6, double* p7);


cdef extern void GetInfo_SURFACEITEM(void*, const int32_t* p1, int32_t* p2, double* p3, double* p4, double* p5);


cdef extern void GetGeometryInfo_SURFACEITEM(void*, const int32_t* p1, int32_t* p2, int32_t* p3);


cdef extern void ComputeExtendedInfo_SURFACEITEM(void*, const int32_t* p1, int32_t* p2, int32_t* p3, int32_t* p4, int32_t* p5, int32_t* p6, int32_t* p7, int32_t* p8);



# Class SYS

# Date/Time




cdef extern void BreakDate_SYS(void*, const double* p1, int32_t* p2, int32_t* p3, int32_t* p4);


cdef extern int32_t iDatetoLong_SYS(void*, const double* p1);


cdef extern int32_t iTimetoLong_SYS(void*, const double* p1);


cdef extern double rDate_SYS(void*);


cdef extern double rLongtoDate_SYS(void*, const int32_t* p1);


cdef extern double rLongtoTime_SYS(void*, const int32_t* p1);


cdef extern double rMakeDate_SYS(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern double rSecondstoTime_SYS(void*, const double* p1);


cdef extern double rTime_SYS(void*);


cdef extern double rTimetoSeconds_SYS(void*, const double* p1);


cdef extern double rUTCDate_SYS(void*);


cdef extern double rUTCTime_SYS(void*);


# Environment




cdef extern int32_t iExistEnv_SYS(void*, const char* p1);


cdef extern void IGetEnv_SYS(void*, const char* p1, char* p2, const int32_t* p3);


cdef extern void SetEnv_SYS(void*, const char* p1, const char* p2);


# Error Handling




cdef extern int32_t iClearErrAP_SYS(void*);


cdef extern int32_t iGetTopErrorAP_SYS(void*);


cdef extern void IGetErrorMessageAP_SYS(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern int32_t iNumErrorsAP_SYS(void*);


cdef extern void SetServerMessagesAP_SYS(void*, const int32_t* p1);


# Execution




cdef extern int32_t iRun_SYS(void*, const char* p1, const char* p2, const int32_t* p3);


cdef extern int32_t iRunGS_SYS(void*, const char* p1);


cdef extern int32_t iRunGX_SYS(void*, const char* p1);


cdef extern int32_t iRunGXEx_SYS(void*, const char* p1, int32_t* p2);


cdef extern int32_t App_iRunPDF_SYS(void*, const char* p1, const char* p2);


cdef extern int32_t iShellExecute_SYS(void*, const char* p1, const char* p2, const char* p3, const char* p4, const int32_t* p5);


cdef extern void SetReturn_SYS(void*, const int32_t* p1);


# External DLL




cdef extern void App_DoCommand_SYS(void*, const char* p1);


cdef extern void Error_SYS(void*, const char* p1, const char* p2, const int32_t* p3);


cdef extern void ErrorTag_SYS(void*, const char* p1, const char* p2);


cdef extern int32_t iAssertGX_SYS(void*, const int32_t* p1, const char* p2, const char* p3);


cdef extern int32_t App_iOLEAutomation_SYS(void*, const char* p1, const char* p2, const int32_t* p3);


cdef extern void App_SaveLog_SYS(void*, const char* p1);


cdef extern void App_ShowError_SYS(void*);


cdef extern void Terminate_SYS(void*, const char* p1);


# File System




cdef extern int32_t CRCFile_SYS(void*, const char* p1);


cdef extern int32_t CRCFileOffset_SYS(void*, const char* p1, const int32_t* p2);


cdef extern void FileRen_SYS(void*, const char* p1, const char* p2);


cdef extern void FindFilesVV_SYS(void*, const int32_t* p1, const char* p2);


cdef extern void IAbsoluteFileName_SYS(void*, const char* p1, char* p2, const int32_t* p3);


cdef extern int32_t iCopyFile_SYS(void*, const char* p1, const char* p2);


cdef extern int32_t iDeleteFile_SYS(void*, const char* p1);


cdef extern int32_t iDeleteGIFile_SYS(void*, const char* p1);


cdef extern int32_t iDeleteGridFile_SYS(void*, const char* p1);


cdef extern int32_t iDirExist_SYS(void*, const char* p1);


cdef extern int32_t iFileExist_SYS(void*, const char* p1);


cdef extern int32_t iFileSize_SYS(void*, const char* p1);


cdef extern int32_t iFileWritable_SYS(void*, const char* p1);


cdef extern int32_t iFindPath_SYS(void*, const char* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern int32_t iFindPathEx_SYS(void*, const char* p1, const int32_t* p2, const int32_t* p3, char* p4, const int32_t* p5);


cdef extern void IGetDirectory_SYS(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void IGetPath_SYS(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void IGetWindowsDir_SYS(void*, char* p1, const int32_t* p2);


cdef extern int32_t iMakeDir_SYS(void*, const char* p1);


cdef extern int32_t iMakeFileReadonly_SYS(void*, const char* p1);


cdef extern int32_t iMakeFileWritable_SYS(void*, const char* p1);


cdef extern void IRelativeFileName_SYS(void*, const char* p1, char* p2, const int32_t* p3);


cdef extern void IShortPathFileName_SYS(void*, const char* p1, char* p2, const int32_t* p3);


cdef extern void ITempFileExt_SYS(void*, const char* p1, char* p2, const int32_t* p3);


cdef extern void ITempFileName_SYS(void*, const char* p1, char* p2, const int32_t* p3);


cdef extern void ITransferPath_SYS(void*, const char* p1, char* p2, const int32_t* p3);


cdef extern int32_t iValidFileName_SYS(void*, const char* p1);


cdef extern int32_t iWriteInDir_SYS(void*, const char* p1);


cdef extern double rFileDate_SYS(void*, const char* p1);


cdef extern double rFileTime_SYS(void*, const char* p1);


cdef extern double rUTCFileDate_SYS(void*, const char* p1);


cdef extern double rUTCFileTime_SYS(void*, const char* p1);


# Global Parameter




cdef extern void GetSettingsMETA_SYS(void*, const int32_t* p1);


cdef extern void GlobalReset_SYS(void*, const char* p1);


cdef extern void GlobalSet_SYS(void*, const char* p1, const char* p2);


cdef extern void GlobalWrite_SYS(void*, const char* p1);


cdef extern int32_t IiGlobal_SYS(void*, const char* p1, char* p2, const int32_t* p3);


cdef extern void App_ResetSettings_SYS(void*);


cdef extern void SetSettingsMETA_SYS(void*, const int32_t* p1);


# Licensing




cdef extern int32_t iCheckArcLicense_SYS(void*);


cdef extern int32_t iCheckArcLicenseEx_SYS(void*, char* p1, const int32_t* p2);


cdef extern int32_t iCheckIntrinsic_SYS(void*, const int32_t* p1, const char* p2);


cdef extern int32_t iGetGeodist_SYS(void*);


cdef extern void IGetLicenseClass_SYS(void*, char* p1, const int32_t* p2);


cdef extern void IGetLicensedUser_SYS(void*, char* p1, const int32_t* p2, char* p3, const int32_t* p4);


# Lineage




cdef extern void AddLineageParameter_SYS(void*, const char* p1, const char* p2);


cdef extern void AddLineageSource_SYS(void*, const int32_t* p1, const char* p2);


cdef extern void ClearLineageParameters_SYS(void*);


cdef extern void ClearLineageSources_SYS(void*);


cdef extern void CopyGeoFile_SYS(void*, const char* p1, const char* p2);


cdef extern void IBackupGeoFile_SYS(void*, const char* p1, char* p2, const int32_t* p3);


cdef extern void RemoveLineageOutput_SYS(void*, const char* p1);


cdef extern void RemoveLineageParameter_SYS(void*, const char* p1);


cdef extern void RemoveLineageSource_SYS(void*, const char* p1);


cdef extern void RestoreGeoFile_SYS(void*, const char* p1, const char* p2);


cdef extern void SetLineageDescription_SYS(void*, const char* p1);


cdef extern void SetLineageDisplayName_SYS(void*, const char* p1);


cdef extern void SetLineageName_SYS(void*, const char* p1);


# Menus and Toolbar




cdef extern void App_ClearMenus_SYS(void*, const int32_t* p1);


cdef extern void App_GetLoadedMenus_SYS(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void App_SetLoadedMenus_SYS(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void GetEntitlementRights_SYS(void*, const int32_t* p1);


# Misc




cdef extern void GenerateGUID_SYS(void*, char* p1, const int32_t* p2);


cdef extern void ClipboardToFile_SYS(void*, const char* p1);


cdef extern int32_t CreateClipboardRA_SYS(void*);


cdef extern int32_t CreateClipboardWA_SYS(void*);


cdef extern void EMFObjectSize_SYS(void*, const char* p1, double* p2, double* p3);


cdef extern void FileToClipboard_SYS(void*, const char* p1);


cdef extern void FontLST_SYS(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t IiGetDotNetGXEntries_SYS(void*, const char* p1, char* p2, const int32_t* p3);


cdef extern void SendGeneralMessage_SYS(void*, const char* p1, const char* p2);


cdef extern void WriteDebugLog_SYS(void*, const char* p1);


cdef extern void LogScriptRun_SYS(void*, const char* p1);


# Multithreading




cdef extern int32_t iGetThreadID_SYS(void*);


cdef extern void RunMultiUserScript_SYS(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


# Parameter




cdef extern void ClearGroup_SYS(void*, const char* p1);


cdef extern void ClearGroupParm_SYS(void*, const char* p1);


cdef extern void ClearParm_SYS(void*);


cdef extern void DefaultInt_SYS(void*, const char* p1, const char* p2, const int32_t* p3);


cdef extern void DefaultReal_SYS(void*, const char* p1, const char* p2, const double* p3);


cdef extern void DefaultString_SYS(void*, const char* p1, const char* p2, const char* p3);


cdef extern void GetPattern_SYS(void*, const char* p1, int32_t* p2, double* p3, int32_t* p4, double* p5, int32_t* p6, int32_t* p7);


cdef extern void GetREG_SYS(void*, const int32_t* p1, const char* p2);


cdef extern void GtString_SYS(void*, const char* p1, const char* p2, char* p3, const int32_t* p4);


cdef extern int32_t iExistInt_SYS(void*, const char* p1, const char* p2);


cdef extern int32_t iExistReal_SYS(void*, const char* p1, const char* p2);


cdef extern int32_t iExistString_SYS(void*, const char* p1, const char* p2);


cdef extern int32_t iGetInt_SYS(void*, const char* p1, const char* p2);


cdef extern int32_t iGetYesNo_SYS(void*, const char* p1, const char* p2);


cdef extern void IReplaceString_SYS(void*, const char* p1, char* p2, const int32_t* p3, const char* p4);


cdef extern void LoadParm_SYS(void*, const char* p1, const char* p2);


cdef extern double rGetReal_SYS(void*, const char* p1, const char* p2);


cdef extern void SaveParm_SYS(void*, const char* p1, const int32_t* p2, const char* p3);


cdef extern void FilterParmGroup_SYS(void*, const char* p1, const int32_t* p2);


cdef extern void SetInt_SYS(void*, const char* p1, const char* p2, const int32_t* p3);


cdef extern void SetPattern_SYS(void*, const char* p1, const int32_t* p2, const double* p3, const int32_t* p4, const double* p5, const int32_t* p6, const int32_t* p7);


cdef extern void SetReal_SYS(void*, const char* p1, const char* p2, const double* p3);


cdef extern void SetREG_SYS(void*, const int32_t* p1);


cdef extern void SetString_SYS(void*, const char* p1, const char* p2, const char* p3);


# Progress Control




cdef extern int32_t iCheckStop_SYS(void*);


cdef extern int32_t iProgState_SYS(void*);


cdef extern void ProgName_SYS(void*, const char* p1, const int32_t* p2);


cdef extern void Progress_SYS(void*, const int32_t* p1);


cdef extern void ProgUpdate_SYS(void*, const int32_t* p1);


cdef extern void ProgUpdateL_SYS(void*, const int32_t* p1, const int32_t* p2);


# Registry




cdef extern void IGetSysInfo_SYS(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern int32_t IiRegistryGetVal_SYS(void*, const int32_t* p1, const char* p2, const char* p3, char* p4, const int32_t* p5);


cdef extern int32_t iRegistryDeleteKey_SYS(void*, const int32_t* p1, const char* p2);


cdef extern int32_t iRegistryDeleteVal_SYS(void*, const int32_t* p1, const char* p2, const char* p3);


cdef extern void RegistrySetVal_SYS(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4);


# Temporary File




cdef extern void DestroyPTMP_SYS(void*, const int32_t* p1);


cdef extern void GetPTMP_SYS(void*, const int32_t* p1);


cdef extern int32_t SavePTMP_SYS(void*, const char* p1);


# Termination




cdef extern void _Abort_SYS(void*, const char* p1);


cdef extern void _Assert_SYS(void*, const int32_t* p1);


cdef extern void _Exit_SYS(void*);


cdef extern void Cancel_SYS(void*);


# Timing




cdef extern int32_t iDelay_SYS(void*, const double* p1);


cdef extern int32_t iGetTimer_SYS(void*, const int32_t* p1, double* p2, double* p3);


# User Interaction




cdef extern void App_DisplayHelp_SYS(void*, const char* p1, const char* p2);


cdef extern void App_DisplayHelpTopic_SYS(void*, const char* p1, const char* p2);


cdef extern void App_DisplayInt_SYS(void*, const char* p1, const int32_t* p2);


cdef extern void App_DisplayMessage_SYS(void*, const char* p1, const char* p2);


cdef extern void App_DisplayReal_SYS(void*, const char* p1, const double* p2);


cdef extern int32_t App_iDisplayQuestion_SYS(void*, const char* p1, const char* p2);


cdef extern int32_t App_iDisplayQuestionWithCancel_SYS(void*, const char* p1, const char* p2);


cdef extern int32_t iDisplayTaskDialogUI_SYS(void*, const char* p1, const char* p2, const char* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const char* p7, const int32_t* p8, const char* p9, int32_t* p10, const char* p11, const char* p12, const char* p13);


cdef extern int32_t iInteractive_SYS(void*);


cdef extern int32_t App_IiPrompt_SYS(void*, const char* p1, char* p2, const int32_t* p3);


cdef extern int32_t iScript_SYS(void*);


cdef extern int32_t iScriptRecord_SYS(void*);


cdef extern void App_SetCursor_SYS(void*, const char* p1);


cdef extern void App_SetInfoLine_SYS(void*, const char* p1);


cdef extern void SetInteractive_SYS(void*, const int32_t* p1);


# Workspace




cdef extern void GetWorkspaceREG_SYS(void*, const int32_t* p1);


cdef extern void SetWorkspaceREG_SYS(void*, const int32_t* p1);


# String Encryption




cdef extern void EncryptString_SYS(void*, const char* p1, char* p2, const int32_t* p3, const int32_t* p4);


cdef extern void DecryptString_SYS(void*, const char* p1, char* p2, const int32_t* p3, const int32_t* p4);


cdef extern int32_t IsEncryptedString_SYS(void*, const char* p1);


# GX Debugger




cdef extern void DisableGXDebugger_SYS(void*);


cdef extern void EnableGXDebugger_SYS(void*, const char* p1, const char* p2);




# Class TB


cdef extern void _SetSearchMode_TB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t Create_TB(void*, const char* p1);


cdef extern int32_t CreateDB_TB(void*, const int32_t* p1);


cdef extern int32_t CreateLTB_TB(void*, const int32_t* p1);


cdef extern void Destroy_TB(void*, const int32_t* p1);


cdef extern int32_t Field_TB(void*, const int32_t* p1, const char* p2);


cdef extern void GetString_TB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, char* p4, const int32_t* p5);


cdef extern int32_t iDataType_TB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void IFindColByIndex_TB(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern int32_t iFindColByName_TB(void*, const int32_t* p1, const char* p2);


cdef extern int32_t iFormat_TB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iGetInt_TB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t iNumColumns_TB(void*, const int32_t* p1);


cdef extern int32_t iNumRows_TB(void*, const int32_t* p1);


cdef extern void LoadDB_TB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern double rGetReal_TB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void Save_TB(void*, const int32_t* p1, const char* p2);


cdef extern void SaveDB_TB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SaveToAscii_TB(void*, const int32_t* p1, const char* p2);


cdef extern void SetInt_TB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void SetReal_TB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4);


cdef extern void SetString_TB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4);


cdef extern void Sort_TB(void*, const int32_t* p1, const int32_t* p2);



# Class TPAT


cdef extern void AddColor_TPAT(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const int32_t* p5);


cdef extern int32_t Create_TPAT(void*);


cdef extern void Destroy_TPAT(void*, const int32_t* p1);


cdef extern int32_t iCode_TPAT(void*, const int32_t* p1, const char* p2);


cdef extern void IGetSolidPattern_TPAT(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4, char* p5, const int32_t* p6, char* p7, const int32_t* p8, int32_t* p9);


cdef extern int32_t iSize_TPAT(void*, const int32_t* p1);


cdef extern void LoadCSV_TPAT(void*, const int32_t* p1, const char* p2);


cdef extern void SetupTranslationVV_TPAT(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);



# Class TR


cdef extern int32_t Create_TR(void*, const int32_t* p1);


cdef extern void Destroy_TR(void*, const int32_t* p1);


cdef extern void Copy_TR(void*, const int32_t* p1, const int32_t* p2);



# Class USERMETA


cdef extern int32_t Create_USERMETA(void*, const int32_t* p1);


cdef extern int32_t CreateS_USERMETA(void*, const char* p1);


cdef extern void Destroy_USERMETA(void*, const int32_t* p1);


cdef extern void GetDataCreationDate_USERMETA(void*, const int32_t* p1, double* p2);


cdef extern void GetExtents2d_USERMETA(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5);


cdef extern void GetExtents3d_USERMETA(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, double* p6, double* p7);


cdef extern void GetIPJ_USERMETA(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetMetaCreationDate_USERMETA(void*, const int32_t* p1, double* p2);


cdef extern void GetXMLFormat_USERMETA(void*, const int32_t* p1, int32_t* p2);


cdef extern int32_t iCompare_USERMETA(void*, const int32_t* p1, const int32_t* p2);


cdef extern void IGetDataCreator_USERMETA(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void IGetFormat_USERMETA(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void IGetMetaCreator_USERMETA(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void IGetProject_USERMETA(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void IGetTitle_USERMETA(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void Serial_USERMETA(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void SetDataCreationDate_USERMETA(void*, const int32_t* p1, const double* p2);


cdef extern void SetDataCreator_USERMETA(void*, const int32_t* p1, const char* p2);


cdef extern void SetExtents2d_USERMETA(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5);


cdef extern void SetExtents3d_USERMETA(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7);


cdef extern void SetFormat_USERMETA(void*, const int32_t* p1, const char* p2);


cdef extern void SetIPJ_USERMETA(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetMetaCreationDate_USERMETA(void*, const int32_t* p1, const double* p2);


cdef extern void SetMetaCreator_USERMETA(void*, const int32_t* p1, const char* p2);


cdef extern void SetProject_USERMETA(void*, const int32_t* p1, const char* p2);


cdef extern void SetTitle_USERMETA(void*, const int32_t* p1, const char* p2);


cdef extern void UpdateExtents2D_USERMETA(void*, const char* p1, const int32_t* p2, const double* p3, const double* p4, const double* p5, const double* p6);


cdef extern void UpdateFileType_USERMETA(void*, const char* p1, const char* p2);


cdef extern void SaveFileLineage_USERMETA(void*, const char* p1, const int32_t* p2);



# Class VA


cdef extern int32_t iGetArray_VA(void*, const int32_t* p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, void* p6, int32_t p7);


cdef extern int32_t iSetArray_VA(void*, const int32_t* p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, const void* p6, int32_t p7);


cdef extern void AddElevationsVVToDepths_VA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void Append_VA(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Average_VA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void Copy_VA(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Copy2_VA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8);


cdef extern int32_t Create_VA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t CreateExt_VA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t CreateVV_VA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void Destroy_VA(void*, const int32_t* p1);


cdef extern int32_t GetFullVV_VA(void*, const int32_t* p1);


cdef extern void GetVV_VA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern int32_t iCol_VA(void*, const int32_t* p1);


cdef extern int32_t iGetInt_VA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void IGetString_VA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, char* p4, const int32_t* p5);


cdef extern int32_t iLen_VA(void*, const int32_t* p1);


cdef extern void IndexOrder_VA(void*, const int32_t* p1, const int32_t* p2);


cdef extern void LookupIndex_VA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void RangeDouble_VA(void*, const int32_t* p1, double* p2, double* p3);


cdef extern void ReFid_VA(void*, const int32_t* p1, const double* p2, const double* p3, const int32_t* p4);


cdef extern void Reverse_VA(void*, const int32_t* p1);


cdef extern double rGetFidIncr_VA(void*, const int32_t* p1);


cdef extern double rGetFidStart_VA(void*, const int32_t* p1);


cdef extern double rGetReal_VA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetFidIncr_VA(void*, const int32_t* p1, const double* p2);


cdef extern void SetFidStart_VA(void*, const int32_t* p1, const double* p2);


cdef extern void SetInt_VA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void SetLn_VA(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetReal_VA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4);


cdef extern void SetString_VA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4);


cdef extern void SetVV_VA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void Trans_VA(void*, const int32_t* p1, const double* p2, const double* p3);


cdef extern void Window_VA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void Window2_VA(void*, const int32_t* p1, const double* p2, const double* p3, const int32_t* p4);


cdef extern int32_t iCheckForRepeating_VA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5);


cdef extern int32_t iCheckForRepeating2_VA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, int32_t* p6, int32_t* p7);



# Class VECTOR3D


cdef extern void Destroy_VECTOR3D(void*, const int32_t* p1);


cdef extern void GetITR_VECTOR3D(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetITR_VECTOR3D(void*, const int32_t* p1, const int32_t* p2);



# Class VM


cdef extern int32_t Create_VM(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t CreateExt_VM(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Destroy_VM(void*, const int32_t* p1);


cdef extern int32_t iGetInt_VM(void*, const int32_t* p1, const int32_t* p2);


cdef extern void IGetString_VM(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern int32_t iLength_VM(void*, const int32_t* p1);


cdef extern void ReSize_VM(void*, const int32_t* p1, const int32_t* p2);


cdef extern double rGetReal_VM(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetInt_VM(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetReal_VM(void*, const int32_t* p1, const int32_t* p2, const double* p3);


cdef extern void SetString_VM(void*, const int32_t* p1, const int32_t* p2, const char* p3);



# Class VOX


cdef extern void CalcStats_VOX(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t Create_VOX(void*, const char* p1);


cdef extern int32_t CreatePG_VOX(void*, const int32_t* p1);


cdef extern int32_t CreateTypePG_VOX(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Destroy_VOX(void*, const int32_t* p1);


cdef extern void Dump_VOX(void*, const int32_t* p1, const char* p2);


cdef extern void ExportIMG_VOX(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void ExportToGrids_VOX(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const double* p7, const int32_t* p8);


cdef extern void ExportXML_VOX(void*, const char* p1, int32_t* p2, const char* p3);


cdef extern void ExportSegY_VOX(void*, const int32_t* p1, const char* p2, const double* p3);


cdef extern void ExportJIGsXML_VOX(void*, const char* p1, const char* p2);


cdef extern void ExportXYZ_VOX(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void Filter_VOX(void*, const int32_t* p1, const int32_t* p2, const char* p3, const int32_t* p4, const int32_t* p5, const char* p6);


cdef extern void GenerateDB_VOX(void*, const char* p1, const int32_t* p2, const int32_t* p3);


cdef extern void GenerateVectorVoxelFromDB_VOX(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const double* p7, const double* p8);


cdef extern int32_t GeneratePG_VOX(void*, const char* p1, const int32_t* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const int32_t* p9, const int32_t* p10);


cdef extern int32_t GenerateConstantValue_VOX(void*, const char* p1, const double* p2, const int32_t* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const int32_t* p10, const int32_t* p11, const int32_t* p12, const int32_t* p13, const int32_t* p14);


cdef extern int32_t GeneratePGVV_VOX(void*, const char* p1, const int32_t* p2, const double* p3, const double* p4, const double* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10);


cdef extern int32_t GenerateConstantValueVV_VOX(void*, const char* p1, const double* p2, const int32_t* p3, const double* p4, const double* p5, const double* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11);


cdef extern int32_t InitGenerateBySubsetPG_VOX(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void AddGenerateBySubsetPG_VOX(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void EndGenerateBySubsetPG_VOX(void*, const int32_t* p1, const char* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const int32_t* p9, const int32_t* p10);


cdef extern void GetArea_VOX(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, double* p6, double* p7);


cdef extern void GetGOCADLocation_VOX(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, double* p6, double* p7, double* p8, double* p9, double* p10, double* p11, double* p12, double* p13);


cdef extern void GetGridSectionCellSizes_VOX(void*, const int32_t* p1, const double* p2, double* p3, double* p4);


cdef extern void GetInfo_VOX(void*, const int32_t* p1, int32_t* p2, int32_t* p3, int32_t* p4, int32_t* p5, int32_t* p6);


cdef extern void GetIPJ_VOX(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetLimits_VOX(void*, const int32_t* p1, int32_t* p2, int32_t* p3, int32_t* p4, int32_t* p5, int32_t* p6, int32_t* p7);


cdef extern void GetLimitsXYZ_VOX(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, double* p6, double* p7);


cdef extern void GetLocation_VOX(void*, const int32_t* p1, double* p2, double* p3, double* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void GetLocationPoints_VOX(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void GetMETA_VOX(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetRealLocation_VOX(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, double* p6, double* p7, double* p8, double* p9, double* p10, double* p11, double* p12, double* p13);


cdef extern void GetSimpleLocation_VOX(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, double* p6, double* p7);


cdef extern int32_t GetStats_VOX(void*, const int32_t* p1);


cdef extern void GetTPAT_VOX(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t GridPoints_VOX(void*, const char* p1, const char* p2, const double* p3, const int32_t* p4, const double* p5, const double* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const double* p10, const double* p11, const double* p12, const double* p13, const double* p14, const int32_t* p15, const int32_t* p16, const int32_t* p17, const int32_t* p18, const int32_t* p19, const int32_t* p20);


cdef extern int32_t GridPointsZ_VOX(void*, const char* p1, const char* p2, const double* p3, const char* p4, const int32_t* p5, const double* p6, const double* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const double* p11, const double* p12, const double* p13, const double* p14, const double* p15, const int32_t* p16, const int32_t* p17, const int32_t* p18, const int32_t* p19, const int32_t* p20, const int32_t* p21);


cdef extern int32_t GridPointsZEx_VOX(void*, const char* p1, const char* p2, const double* p3, const char* p4, const int32_t* p5, const double* p6, const double* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const double* p11, double* p12, double* p13, const double* p14, double* p15, const double* p16, const double* p17, const double* p18, const double* p19, const double* p20, const int32_t* p21, const int32_t* p22, const int32_t* p23, const int32_t* p24, const int32_t* p25, const int32_t* p26);


cdef extern int32_t iCanAppendTo_VOX(void*, const int32_t* p1, const char* p2);


cdef extern void IGetCellSizeStrings_VOX(void*, const int32_t* p1, char* p2, const int32_t* p3, char* p4, const int32_t* p5, char* p6, const int32_t* p7, const double* p8, const double* p9, const double* p10);


cdef extern int32_t iIsThematic_VOX(void*, const int32_t* p1);


cdef extern int32_t iIsVectorVoxel_VOX(void*, const int32_t* p1);


cdef extern int32_t iSetCellSizeStrings_VOX(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4);


cdef extern int32_t LogGridPointsZEx_VOX(void*, const char* p1, const char* p2, const double* p3, const char* p4, const int32_t* p5, const double* p6, const double* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const double* p11, double* p12, double* p13, const double* p14, double* p15, const double* p16, const double* p17, const double* p18, const double* p19, const double* p20, const int32_t* p21, const double* p22, const int32_t* p23, const int32_t* p24, const int32_t* p25, const int32_t* p26, const int32_t* p27, const int32_t* p28);


cdef extern int32_t Krig_VOX(void*, const char* p1, const double* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9);


cdef extern int32_t Math_VOX(void*, const char* p1, const char* p2, const char* p3, const char* p4, const char* p5, const int32_t* p6);


cdef extern void Merge_VOX(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4);


cdef extern int32_t NearestNeighbourGrid_VOX(void*, const char* p1, const double* p2, const double* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9);


cdef extern double rComputeCellSize_VOX(void*, const double* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6);


cdef extern void ReGrid_VOX(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4);


cdef extern int32_t ResamplePG_VOX(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11, const double* p12, const double* p13, const int32_t* p14);


cdef extern void RescaleCellSizes_VOX(void*, const int32_t* p1, const double* p2);


cdef extern void SampleCDI_VOX(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const char* p10);


cdef extern void SampleCDIToTopography_VOX(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const char* p8, const char* p9);


cdef extern void SampleVV_VOX(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void SetIPJ_VOX(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetLocation_VOX(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void SetMETA_VOX(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetOrigin_VOX(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const double* p5);


cdef extern void SetSimpleLocation_VOX(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7);


cdef extern void SetTPAT_VOX(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SliceIPJ_VOX(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const double* p5, const double* p6, const double* p7, const double* p8, const int32_t* p9, const int32_t* p10);


cdef extern void SliceMultiLayerIPJ_VOX(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const double* p5, const double* p6, const double* p7, const double* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11, const double* p12, const double* p13);


cdef extern void SubsetToRealExtents_VOX(void*, const int32_t* p1, const char* p2);


cdef extern void Sync_VOX(void*, const char* p1);


cdef extern void WindowPLY_VOX(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const double* p5, const char* p6, const int32_t* p7);


cdef extern void WindowXYZ_VOX(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const char* p8, const int32_t* p9);


cdef extern void WriteXML_VOX(void*, const int32_t* p1, const char* p2);


cdef extern void ConvertNumericToThematic_VOX(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void ConvertThematicToNumeric_VOX(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void ConvertVelocityToDensity_VOX(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const char* p10);


cdef extern void ConvertVelocityInRangeToDensity_VOX(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10, const double* p11, const char* p12);


cdef extern void ConvertDensityToVelocity_VOX(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10, const double* p11, const char* p12);


cdef extern void InvertZ_VOX(void*, const int32_t* p1, const char* p2);


cdef extern void IDWGridDB_VOX(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void TINGridDB_VOX(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9);


cdef extern void IGetMultiVoxsetGUID_VOX(void*, const char* p1, char* p2, const int32_t* p3);


cdef extern int32_t GenerateGOCAD_VOX(void*, const char* p1, const char* p2, const char* p3, const int32_t* p4);


cdef extern int32_t GenerateOrientedGOCAD_VOX(void*, const char* p1, const char* p2, const char* p3, const int32_t* p4, const int32_t* p5);


cdef extern int32_t GenerateUBC_VOX(void*, const char* p1, const char* p2, const char* p3, const double* p4, const int32_t* p5);


cdef extern void GenerateXYZ_VOX(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void ListGOCADProperties_VOX(void*, const char* p1, const int32_t* p2);


cdef extern void ExportDB_VOX(void*, const int32_t* p1, const int32_t* p2, const char* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8);



# Class VOXD


cdef extern int32_t Create_VOXD(void*, const int32_t* p1, const char* p2, const int32_t* p3, const double* p4);


cdef extern int32_t CreateITR_VOXD(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t CreateThematic_VOXD(void*, const int32_t* p1);


cdef extern int32_t iIsThematic_VOXD(void*, const int32_t* p1);


cdef extern void GetThematicInfo_VOXD(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetThematicSelection_VOXD(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Destroy_VOXD(void*, const int32_t* p1);


cdef extern void GetDrawControls_VOXD(void*, const int32_t* p1, int32_t* p2, double* p3, double* p4, double* p5, double* p6, double* p7, double* p8, double* p9);


cdef extern void IGetName_VOXD(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void GetITR_VOXD(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetShellControls_VOXD(void*, const int32_t* p1, double* p2, double* p3);


cdef extern void SetDrawControls_VOXD(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9);


cdef extern void SetITR_VOXD(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetShellControls_VOXD(void*, const int32_t* p1, const double* p2, const double* p3);



# Class VOXE


cdef extern int32_t Create_VOXE(void*, const int32_t* p1);


cdef extern void Destroy_VOXE(void*, const int32_t* p1);


cdef extern void Profile_VOXE(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern double rValue_VOXE(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const int32_t* p5);


cdef extern void Vector_VOXE(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const int32_t* p8, const int32_t* p9);



# Class VULCAN


cdef extern int32_t IsValidTriangulationFile_VULCAN(void*, const char* p1);


cdef extern int32_t IsValidBlockModelFile_VULCAN(void*, const char* p1);


cdef extern void TriangulationToView_VULCAN(void*, const char* p1, const int32_t* p2, const int32_t* p3, const char* p4);


cdef extern void GetBlockModelVariableInfo_VULCAN(void*, const char* p1, const int32_t* p2, const int32_t* p3);


cdef extern void GetBlockModelStringVariableValues_VULCAN(void*, const char* p1, const char* p2, const int32_t* p3);


cdef extern void BlockModelToVoxel_VULCAN(void*, const char* p1, const int32_t* p2, const char* p3, const char* p4, const int32_t* p5, const char* p6);



# Class VV


cdef extern int32_t iGetData_VV(void*, const int32_t* p1, int32_t p2, int32_t p3, void* p4, int32_t p5);


cdef extern int32_t iSetData_VV(void*, const int32_t* p1, int32_t p2, int32_t p3, const void* p4, int32_t p5);


cdef extern void _Copy_VV(void*, const int32_t* p1, const int32_t* p2);


cdef extern void _Copy2_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void _Log_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4);


cdef extern void _LogLinear_VV(void*, const int32_t* p1, const double* p2);


cdef extern void _Mask_VV(void*, const int32_t* p1, const int32_t* p2);


cdef extern void _Reverse_VV(void*, const int32_t* p1);


cdef extern void _Serial_VV(void*, const int32_t* p1, const int32_t* p2);


cdef extern void _Trans_VV(void*, const int32_t* p1, const double* p2, const double* p3);


cdef extern void Abs_VV(void*, const int32_t* p1);


cdef extern void Add_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void Add2_VV(void*, const int32_t* p1, const double* p2, const int32_t* p3, const double* p4, const int32_t* p5);


cdef extern void Append_VV(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t CRC_VV(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t CRCInexact_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern int32_t Create_VV(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t CreateExt_VV(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t CreateS_VV(void*, const int32_t* p1);


cdef extern void Destroy_VV(void*, const int32_t* p1);


cdef extern void Diff_VV(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Divide_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void FidNorm_VV(void*, const int32_t* p1, const int32_t* p2);


cdef extern void FillInt_VV(void*, const int32_t* p1, const int32_t* p2);


cdef extern void FillReal_VV(void*, const int32_t* p1, const double* p2);


cdef extern void FillString_VV(void*, const int32_t* p1, const char* p2);


cdef extern int32_t iCountDummies_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t iFindDum_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern int32_t iGetFidExpansion_VV(void*, const int32_t* p1);


cdef extern int32_t iGetInt_VV(void*, const int32_t* p1, const int32_t* p2);


cdef extern void IGetString_VV(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern int32_t iIndexMax_VV(void*, const int32_t* p1, double* p2);


cdef extern int32_t iLength_VV(void*, const int32_t* p1);


cdef extern void IndexInsert_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void IndexOrder_VV(void*, const int32_t* p1, const int32_t* p2);


cdef extern void InitIndex_VV(void*, const int32_t* p1, const int32_t* p2);


cdef extern void InvLog_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4);


cdef extern int32_t iOrder_VV(void*, const int32_t* p1, int32_t* p2);


cdef extern void LinesToXY_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void LookupIndex_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void MakeMemBased_VV(void*, const int32_t* p1);


cdef extern void MaskAND_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void MaskOR_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void MaskStr_VV(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void Multiply_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void Amplitude3D_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void PolygonMask_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void Project_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void Project3D_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void RangeDouble_VV(void*, const int32_t* p1, double* p2, double* p3);


cdef extern void ReFid_VV(void*, const int32_t* p1, const double* p2, const double* p3, const int32_t* p4);


cdef extern void ReFidVV_VV(void*, const int32_t* p1, const int32_t* p2);


cdef extern void ReSample_VV(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const int32_t* p6, const int32_t* p7);


cdef extern double rGetFidIncr_VV(void*, const int32_t* p1);


cdef extern double rGetFidStart_VV(void*, const int32_t* p1);


cdef extern double rGetReal_VV(void*, const int32_t* p1, const int32_t* p2);


cdef extern double rSum_VV(void*, const int32_t* p1);


cdef extern double rWeightedMean_VV(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetFidExpansion_VV(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetFidIncr_VV(void*, const int32_t* p1, const double* p2);


cdef extern void SetFidStart_VV(void*, const int32_t* p1, const double* p2);


cdef extern void SetInt_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetIntN_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void SetLen_VV(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetReal_VV(void*, const int32_t* p1, const int32_t* p2, const double* p3);


cdef extern void SetRealN_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4);


cdef extern void SetString_VV(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void SetStringN_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4);


cdef extern void SetupIndex_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5);


cdef extern void Sort_VV(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SortIndex_VV(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SortIndex1_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SortIndex2_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void SortIndex3_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void SortIndex4_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9);


cdef extern void Statistics_VV(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Subtract_VV(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void Swap_VV(void*, const int32_t* p1);


cdef extern void Window_VV(void*, const int32_t* p1, const double* p2, const double* p3, const int32_t* p4);


cdef extern void WriteXML_VV(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4);



# Class WA


cdef extern void _Puts_WA(void*, const int32_t* p1, const char* p2);


cdef extern int32_t Create_WA(void*, const char* p1, const int32_t* p2);


cdef extern int32_t CreateEx_WA(void*, const char* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t CreateSBF_WA(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern int32_t CreateSBFEx_WA(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4);


cdef extern void Destroy_WA(void*, const int32_t* p1);


cdef extern void NewLine_WA(void*, const int32_t* p1);



# Class ACQUIRE


cdef extern int32_t Create_ACQUIRE(void*);


cdef extern void DeleteEmptyChan_ACQUIRE(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Destroy_ACQUIRE(void*, const int32_t* p1);


cdef extern int32_t iImportHole_ACQUIRE(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern int32_t iImportPoint_ACQUIRE(void*, const int32_t* p1, const int32_t* p2, const char* p3, const int32_t* p4);


cdef extern int32_t iSelectionTool_ACQUIRE(void*, const int32_t* p1, const char* p2, const int32_t* p3);



# Class ARCDB


cdef extern int32_t CreateDAT_ARCDB(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4);


cdef extern int32_t CreateDAT3D_ARCDB(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const char* p5);


cdef extern int32_t Current_ARCDB(void*);


cdef extern void ExportToDB_ARCDB(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4);


cdef extern void FieldLST_ARCDB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t FromIUnknown_ARCDB(void*, const int32_t* p1);


cdef extern void GetIPJ_ARCDB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iExistField_ARCDB(void*, const int32_t* p1, const char* p2);


cdef extern int32_t iGetIUnknown_ARCDB(void*, const int32_t* p1);


cdef extern int32_t iImportChemDatabaseWizard_ARCDB(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern int32_t SelTblExGUI_ARCDB(void*, int32_t* p1);


cdef extern int32_t SelTblGUI_ARCDB(void*);



# Class ARCDH


cdef extern void CloseProject_ARCDH(void*);


cdef extern void SetProject_ARCDH(void*, const char* p1, const char* p2);


cdef extern void SetStringFileGDB_ARCDH(void*, const char* p1);


cdef extern void StopEditingStringFileGDB_ARCDH(void*);


cdef extern int32_t iHasStringFileGDBEdits_ARCDH(void*);


cdef extern int32_t iGeostringsExtensionAvailable_ARCDH(void*);


cdef extern void GetCurrentStringFileGDB_ARCDH(void*, char* p1, const int32_t* p2);


cdef extern int32_t iIsValidFGDBFileName_ARCDH(void*, const char* p1);


cdef extern int32_t iIsValidFeatureClassName_ARCDH(void*, const char* p1);


cdef extern void sPromptForESRISymbol_ARCDH(void*, HWND p1, const char* p2, const int32_t* p3, char* p4, const int32_t* p5, int32_t* p6, int32_t* p7);



# Class ARCMAP


cdef extern void ChangeSize_ARCMAP(void*, const double* p1, const double* p2);


cdef extern void DisplayIn3DView_ARCMAP(void*, const char* p1);


cdef extern void ExportFeatureLayerByNameTo3DFile_ARCMAP(void*, const char* p1, const char* p2, const char* p3, const char* p4);


cdef extern void ExportSelectedFeatureLayerTo3DFile_ARCMAP(void*, const char* p1);


cdef extern void GetCurrentDocumentInfo_ARCMAP(void*, char* p1, char* p2, char* p3, const int32_t* p4);


cdef extern void GetSelectedLayerInfo_ARCMAP(void*, const int32_t* p1, char* p2, char* p3, const int32_t* p4);


cdef extern int32_t iGetNumberOfSelectedLayers_ARCMAP(void*);


cdef extern int32_t iLoadMAP_ARCMAP(void*, const char* p1, const char* p2, const char* p3, const int32_t* p4);


cdef extern int32_t iLoadMAPEx_ARCMAP(void*, const char* p1, const char* p2, const char* p3, const char* p4, const int32_t* p5);


cdef extern int32_t iLoadShape_ARCMAP(void*, const char* p1, const int32_t* p2);


cdef extern int32_t iLoadSPF_ARCMAP(void*, const char* p1, const int32_t* p2);


cdef extern void LoadLYR_ARCMAP(void*, const char* p1);


cdef extern void LoadMap_ARCMAP(void*, const char* p1, const char* p2, const char* p3, const char* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void LoadMapView_ARCMAP(void*, const char* p1, const char* p2, const char* p3, const int32_t* p4);


cdef extern void LoadRaster_ARCMAP(void*, const char* p1);


cdef extern void LoadShape_ARCMAP(void*, const char* p1, const char* p2, const char* p3);


cdef extern void MapViewToShape_ARCMAP(void*, const char* p1, const char* p2, const char* p3, const int32_t* p4);


cdef extern void QuerySize_ARCMAP(void*, double* p1, double* p2);


cdef extern void ShowLayerByNameIn3D_ARCMAP(void*, const char* p1, const char* p2, const char* p3);


cdef extern void ShowSelectedLayersIn3D_ARCMAP(void*);


cdef extern void GetIPJForPredefinedEsriGCS_ARCMAP(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetIPJForPredefinedEsriPCS_ARCMAP(void*, const int32_t* p1, const int32_t* p2);



# Class ARCSYS


cdef extern void IGetBrowseLoc_ARCSYS(void*, char* p1, const int32_t* p2);


cdef extern void IGetCurrentDoc_ARCSYS(void*, char* p1, const int32_t* p2);


cdef extern void SetBrowseLoc_ARCSYS(void*, const char* p1);



# Class BIGRID


cdef extern void _Clear_BIGRID(void*, const int32_t* p1);


cdef extern int32_t Create_BIGRID(void*);


cdef extern void Destroy_BIGRID(void*, const int32_t* p1);


cdef extern int32_t iLoadParms_BIGRID(void*, const int32_t* p1, const char* p2);


cdef extern int32_t iLoadWarp_BIGRID(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4);


cdef extern void Run_BIGRID(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4);


cdef extern void Run2_BIGRID(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void SaveParms_BIGRID(void*, const int32_t* p1, const char* p2);



# Class CHIMERA


cdef extern void BarPlot_CHIMERA(void*, const int32_t* p1, const char* p2, const char* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const double* p10, const double* p11);


cdef extern void CategorizeByValue_CHIMERA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void CategorizeByValueDetLimit_CHIMERA(void*, const int32_t* p1, const int32_t* p2, const double* p3, const int32_t* p4);


cdef extern void ClipToDetectLimit_CHIMERA(void*, const int32_t* p1, const double* p2, const int32_t* p3);


cdef extern void DrawCircleOffsetMarkers_CHIMERA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const double* p6);


cdef extern void DrawRectangleOffsetMarkers_CHIMERA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const double* p6, const double* p7, const double* p8);


cdef extern void DuplicateChem_CHIMERA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const int32_t* p5, const int32_t* p6, const char* p7, const char* p8, const double* p9, const double* p10, const double* p11, const double* p12);


cdef extern void DuplicateChemView_CHIMERA(void*, const int32_t* p1, const char* p2, const char* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const double* p7, const int32_t* p8, const int32_t* p9, const char* p10, const char* p11, const int32_t* p12, const int32_t* p13, const int32_t* p14, const int32_t* p15, double* p16, double* p17);


cdef extern void GetExpressionDataVV_CHIMERA(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const char* p5, const int32_t* p6);


cdef extern void GetLithogeochemData_CHIMERA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11, const int32_t* p12, const int32_t* p13, const int32_t* p14);


cdef extern void GetTransform_CHIMERA(void*, const int32_t* p1, const char* p2, const int32_t* p3, int32_t* p4, double* p5);


cdef extern int32_t iIsAcquireChan_CHIMERA(void*, const char* p1, char* p2, const int32_t* p3, char* p4, const int32_t* p5, double* p6, int32_t* p7);


cdef extern int32_t iIsElement_CHIMERA(void*, const char* p1, const int32_t* p2);


cdef extern void LaunchHistogram_CHIMERA(void*, const char* p1, const char* p2);


cdef extern void LaunchProbability_CHIMERA(void*, const char* p1, const char* p2);


cdef extern void LaunchScatter_CHIMERA(void*, const char* p1);


cdef extern void LaunchTriplot_CHIMERA(void*, const char* p1);


cdef extern void MaskChanLST_CHIMERA(void*, const int32_t* p1, const int32_t* p2);


cdef extern void OrderedChannelLST_CHIMERA(void*, const int32_t* p1, const int32_t* p2);


cdef extern void PiePlot_CHIMERA(void*, const int32_t* p1, const char* p2, const char* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const double* p10, const double* p11);


cdef extern void PiePlot2_CHIMERA(void*, const int32_t* p1, const char* p2, const char* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const double* p10, const double* p11, const double* p12);


cdef extern void PlotStringClassifiedSymbolsLegendFromClassFile_CHIMERA(void*, const int32_t* p1, const char* p2, const double* p3, const double* p4, const double* p5, const char* p6, const int32_t* p7);


cdef extern double rAtomicWeight_CHIMERA(void*, const char* p1);


cdef extern void RosePlot_CHIMERA(void*, const int32_t* p1, const char* p2, const char* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const double* p10);


cdef extern void RosePlot2_CHIMERA(void*, const int32_t* p1, const char* p2, const char* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const double* p10, const double* p11);


cdef extern void Scatter2_CHIMERA(void*, const int32_t* p1, const char* p2, const double* p3, const double* p4, const double* p5, const double* p6, const int32_t* p7, const int32_t* p8, const char* p9, const int32_t* p10, const int32_t* p11, const int32_t* p12, const int32_t* p13, const char* p14, const char* p15, const char* p16, const char* p17, const double* p18, const double* p19, const double* p20, const double* p21, const double* p22, const double* p23, const double* p24, const double* p25, const int32_t* p26, const int32_t* p27, const int32_t* p28, const int32_t* p29, const int32_t* p30, const int32_t* p31);


cdef extern void FixedSymbolScatterPlot_CHIMERA(void*, const int32_t* p1, const char* p2, const double* p3, const double* p4, const double* p5, const double* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const char* p11, const int32_t* p12, const double* p13, const double* p14, const int32_t* p15, const int32_t* p16, const int32_t* p17, const int32_t* p18, const int32_t* p19, const int32_t* p20, const char* p21, const char* p22, const char* p23, const char* p24, const double* p25, const double* p26, const double* p27, const double* p28, const int32_t* p29, const int32_t* p30, const char* p31);


cdef extern void ZoneColouredScatterPlot_CHIMERA(void*, const int32_t* p1, const char* p2, const double* p3, const double* p4, const double* p5, const double* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11, const char* p12, const char* p13, const int32_t* p14, const double* p15, const double* p16, const int32_t* p17, const int32_t* p18, const int32_t* p19, const int32_t* p20, const int32_t* p21, const int32_t* p22, const int32_t* p23, const char* p24, const char* p25, const char* p26, const char* p27, const double* p28, const double* p29, const double* p30, const double* p31, const int32_t* p32, const int32_t* p33, const char* p34);


cdef extern void StringClassifiedScatterPlot_CHIMERA(void*, const int32_t* p1, const char* p2, const double* p3, const double* p4, const double* p5, const double* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11, const char* p12, const double* p13, const int32_t* p14, const int32_t* p15, const int32_t* p16, const int32_t* p17, const char* p18, const char* p19, const char* p20, const char* p21, const double* p22, const double* p23, const double* p24, const double* p25, const int32_t* p26, const int32_t* p27, const char* p28);


cdef extern void SetLithogeochemData_CHIMERA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10);


cdef extern void StackedBarPlot_CHIMERA(void*, const int32_t* p1, const char* p2, const char* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const double* p10, const double* p11);


cdef extern void Standard_CHIMERA(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const double* p5, const double* p6, const char* p7, const char* p8, const double* p9, const double* p10, const double* p11, const double* p12);


cdef extern void StandardView_CHIMERA(void*, const int32_t* p1, const char* p2, const char* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const double* p7, const double* p8, const double* p9, const char* p10, const char* p11, const double* p12, const int32_t* p13, const int32_t* p14, const int32_t* p15, const int32_t* p16, double* p17, double* p18);


cdef extern void TriPlot2_CHIMERA(void*, const int32_t* p1, const char* p2, const double* p3, const double* p4, const double* p5, const double* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const char* p11, const int32_t* p12, const int32_t* p13, const int32_t* p14, const char* p15, const char* p16, const char* p17, const double* p18, const double* p19, const double* p20, const double* p21, const double* p22, const double* p23, const int32_t* p24, const int32_t* p25, const int32_t* p26, const int32_t* p27, const int32_t* p28, const int32_t* p29, const int32_t* p30, const double* p31, const double* p32);


cdef extern void FixedSymbolTriPlot_CHIMERA(void*, const int32_t* p1, const char* p2, const double* p3, const double* p4, const double* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const char* p11, const int32_t* p12, const double* p13, const double* p14, const int32_t* p15, const int32_t* p16, const int32_t* p17, const int32_t* p18, const int32_t* p19, const char* p20, const char* p21, const char* p22, const int32_t* p23, const double* p24, const double* p25, const char* p26);


cdef extern void ZoneColouredTriPlot_CHIMERA(void*, const int32_t* p1, const char* p2, const double* p3, const double* p4, const double* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11, const char* p12, const char* p13, const int32_t* p14, const double* p15, const double* p16, const int32_t* p17, const int32_t* p18, const int32_t* p19, const int32_t* p20, const int32_t* p21, const int32_t* p22, const char* p23, const char* p24, const char* p25, const int32_t* p26, const double* p27, const double* p28, const char* p29);


cdef extern void StringClassifiedTriPlot_CHIMERA(void*, const int32_t* p1, const char* p2, const double* p3, const double* p4, const double* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11, const char* p12, const double* p13, const int32_t* p14, const int32_t* p15, const int32_t* p16, const char* p17, const char* p18, const char* p19, const int32_t* p20, const double* p21, const double* p22, const char* p23);



# Class COM


cdef extern int32_t Create_COM(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern int32_t CreateNoTerminate_COM(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void Destroy_COM(void*, const int32_t* p1);


cdef extern int32_t IiReadLineNoTerminate_COM(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern int32_t iReadCharsNoTerminate_COM(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void IReadLine_COM(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern int32_t iWriteCharsNoTerminate_COM(void*, const int32_t* p1, const char* p2);


cdef extern void PurgeComm_COM(void*, const int32_t* p1);


cdef extern void ReadChars_COM(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void ReadEM61LinesWA_COM(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void ReadFile2WA_COM(void*, const int32_t* p1, const int32_t* p2);


cdef extern void ReadLinesWA_COM(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetTimeOut_COM(void*, const int32_t* p1, const int32_t* p2);


cdef extern void WriteChars_COM(void*, const int32_t* p1, const char* p2);


cdef extern void WriteLine_COM(void*, const int32_t* p1, const char* p2);



# Class CSYMB


cdef extern void _SetAngle_CSYMB(void*, const int32_t* p1, const double* p2);


cdef extern void _SetBase_CSYMB(void*, const int32_t* p1, const double* p2);


cdef extern void _SetDynamicCol_CSYMB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void _SetFixed_CSYMB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void _SetNumber_CSYMB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void _SetScale_CSYMB(void*, const int32_t* p1, const double* p2);


cdef extern void AddData_CSYMB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern int32_t Create_CSYMB(void*, const char* p1);


cdef extern void Destroy_CSYMB(void*, const int32_t* p1);


cdef extern void GetITR_CSYMB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetFont_CSYMB(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void SetStaticCol_CSYMB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);



# Class DGW


cdef extern int32_t App_Create_DGW(void*, const char* p1);


cdef extern void App_Destroy_DGW(void*, const int32_t* p1);


cdef extern void App_GetInfoMETA_DGW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void App_GetInfoSYS_DGW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4, const char* p5);


cdef extern int32_t App_GetList_DGW(void*, const int32_t* p1, const int32_t* p2);


cdef extern void App_GtInfo_DGW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, char* p4, const int32_t* p5);


cdef extern int32_t App_iRunDialogue_DGW(void*, const int32_t* p1);


cdef extern void App_SetInfo_DGW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4);


cdef extern void App_SetInfoMETA_DGW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void App_SetInfoSYS_DGW(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4, const char* p5);


cdef extern void App_SetTitle_DGW(void*, const int32_t* p1, const char* p2);



# Class DH

# ArcGIS Target Functions




cdef extern int32_t iIsESRI_DH(void*);


# Data processing/conversion methods




cdef extern void CreatChanLST_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void DepthDataLST_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void FromToDataLST_DH(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void GetGeologyContacts_DH(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const int32_t* p5, const double* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9);


cdef extern void GetOrientedCoreDipDir_DH(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const int32_t* p5, const char* p6, const char* p7);


cdef extern void GetUniqueChannelItems_DH(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4);


cdef extern void GetUniqueChannelItemsFromCollar_DH(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4);


cdef extern int32_t iChanType_DH(void*, const int32_t* p1, const char* p2);


cdef extern int32_t iFindHoleIntersection_DH(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, double* p4, double* p5, double* p6);


cdef extern void IGetChanCodeInfo_DH(void*, const int32_t* p1, const char* p2, int32_t* p3, char* p4, const int32_t* p5);


cdef extern int32_t iGridIntersection_DH(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const char* p7, double* p8, double* p9, double* p10);


cdef extern void LithoGrid3D_DH(void*, const int32_t* p1, const char* p2, const int32_t* p3, const char* p4, const double* p5, const double* p6, const double* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10);


cdef extern void NumericChanLST_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void NumericFromToDataLST_DH(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void PunchGridHoles_DH(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const double* p6);


cdef extern void StringChanLST_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void StringFromToDataLST_DH(void*, const int32_t* p1, const char* p2, const int32_t* p3);


# Miscellaneous




cdef extern int32_t _hAssayDB_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t _hAssaySymb_DH(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t _hCollarDB_DH(void*, const int32_t* p1);


cdef extern int32_t _hCollarSymb_DH(void*, const int32_t* p1);


cdef extern int32_t _hDipAzSurveyDB_DH(void*, const int32_t* p1);


cdef extern int32_t _hDipAzSurveySymb_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t _hENSurveyDB_DH(void*, const int32_t* p1);


cdef extern int32_t _hENSurveySymb_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void AddSurveyTable_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void AssayHoleLST_DH(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void AssayLST_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void AutoSelectHoles_DH(void*, const int32_t* p1);


cdef extern void Clean_DH(void*, const int32_t* p1);


cdef extern void CompositeDB_DH(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const double* p6, const char* p7, const char* p8, const char* p9, const double* p10, const double* p11, const double* p12, const int32_t* p13, const char* p14);


cdef extern void ComputeHoleXYZ_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void ComputeSelExtent_DH(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, double* p6, double* p7);


cdef extern void ComputeXYZ_DH(void*, const int32_t* p1);


cdef extern void ConvertOldLineNames_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t Create_DH(void*, const char* p1);


cdef extern void CreateDefaultJob_DH(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern int32_t CreateExternal_DH(void*, const char* p1);


cdef extern int32_t Current_DH(void*);


cdef extern void DatamineToCSV_DH(void*, const char* p1, const char* p2);


cdef extern void DeleteHoles_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Destroy_DH(void*, const int32_t* p1);


cdef extern void Export_DH(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void ExportGeodatabaseLST_DH(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, char* p5, const int32_t* p6, const int32_t* p7);


cdef extern void ExportLAS_DH(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const char* p5);


cdef extern void ExportLST_DH(void*, const int32_t* p1, const int32_t* p2, const char* p3, const int32_t* p4);


cdef extern void FlushSelect_DH(void*, const int32_t* p1);


cdef extern void GetDatabasesVV_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetDatabasesSortedVV_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetDataType_DH(void*, const int32_t* p1, const int32_t* p2, int32_t* p3);


cdef extern void GetDefaultSection_DH(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, double* p6);


cdef extern int32_t GetHoleGroup_DH(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void GetHoleSurvey_DH(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void GetIPJ_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetMapNamesVV_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t GetMap_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t GetNumMaps_DH(void*, const int32_t* p1);


cdef extern int32_t GetREG_DH(void*, const int32_t* p1);


cdef extern void GetSelectedHolesVV_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetTableDefaultChanLST_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void HoleLST_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void HoleLST2_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iAddHole_DH(void*, const int32_t* p1, const char* p2);


cdef extern int32_t iCleanWillDeleteDB_DH(void*, const int32_t* p1);


cdef extern int32_t iCompositingToolGUI_DH(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const double* p5);


cdef extern void ICreateCollarTable_DH(void*, const char* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern void ICreateCollarTableDir_DH(void*, const char* p1, const char* p2, const int32_t* p3, char* p4, const int32_t* p5);


cdef extern int32_t iDeleteWillDeleteDB_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iFindHole_DH(void*, const int32_t* p1, const char* p2);


cdef extern void IGetCollarTableDB_DH(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void IGetInfo_DH(void*, const int32_t* p1, const int32_t* p2, const char* p3, char* p4, const int32_t* p5);


cdef extern void IGetProjectName_DH(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void IGetSectionID_DH(void*, const double* p1, const double* p2, const double* p3, char* p4, const int32_t* p5);


cdef extern int32_t iGetTemplateBlob_DH(void*, const int32_t* p1, const char* p2, int32_t* p3);


cdef extern void IGetTemplateInfo_DH(void*, const char* p1, int32_t* p2, char* p3, const int32_t* p4, char* p5, const int32_t* p6);


cdef extern void IGetTemplateInfoEx_DH(void*, const char* p1, int32_t* p2, char* p3, const int32_t* p4, char* p5, const int32_t* p6, const int32_t* p7);


cdef extern void IGetUnits_DH(void*, const int32_t* p1, char* p2, const int32_t* p3, double* p4);


cdef extern int32_t iHaveCurrent_DH(void*);


cdef extern int32_t IiHaveCurrent2_DH(void*, char* p1, const int32_t* p2);


cdef extern int32_t iHoles_DH(void*, const int32_t* p1);


cdef extern int32_t iHoleSelectFromListGUI_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iHoleSelectionToolGUI_DH(void*, const int32_t* p1);


cdef extern int32_t iModify3dGUI_DH(void*, const int32_t* p1, const char* p2, int32_t* p3);


cdef extern int32_t iEditClassificationTableFileGUI_DH(void*, const int32_t* p1, const char* p2, char* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern int32_t iModifyCrookedSectionHolesGUI_DH(void*, const int32_t* p1, const char* p2, int32_t* p3);


cdef extern int32_t iModifyFenceGUI_DH(void*, const int32_t* p1, const char* p2, int32_t* p3);


cdef extern int32_t iModifyHoleTraces3DGUI_DH(void*, const int32_t* p1, const char* p2, int32_t* p3);


cdef extern int32_t iModifyHoleTracesGUI_DH(void*, const int32_t* p1, const char* p2, int32_t* p3);


cdef extern int32_t iModifyHoleTracesGUI2_DH(void*, const int32_t* p1, const char* p2, const int32_t* p3, int32_t* p4);


cdef extern int32_t iModifyPlanGUI_DH(void*, const int32_t* p1, const char* p2, int32_t* p3);


cdef extern int32_t iModifyPlanHolesGUI_DH(void*, const int32_t* p1, const char* p2, int32_t* p3);


cdef extern int32_t iModifyRockCodesGUI_DH(void*, const char* p1);


cdef extern int32_t iModifyRockCodesGUI2_DH(void*, const int32_t* p1, const char* p2);


cdef extern int32_t iModifySectionGUI_DH(void*, const int32_t* p1, const char* p2, int32_t* p3);


cdef extern int32_t iModifySectionHolesGUI_DH(void*, const int32_t* p1, const char* p2, int32_t* p3);


cdef extern int32_t iModifyStackedSectionGUI_DH(void*, const int32_t* p1, const char* p2, int32_t* p3);


cdef extern int32_t iModifyStripLogGUI_DH(void*, const int32_t* p1, const char* p2, int32_t* p3);


cdef extern int32_t iModifyStructureCodesGUI_DH(void*, const char* p1);


cdef extern int32_t iModifyStructureCodesGUI2_DH(void*, const int32_t* p1, const char* p2);


cdef extern void Import2_DH(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5, const int32_t* p6, const char* p7);


cdef extern void ImportLAS_DH(void*, const int32_t* p1, const char* p2, const char* p3, const double* p4, const int32_t* p5, const int32_t* p6);


cdef extern int32_t iNumAssays_DH(void*, const int32_t* p1);


cdef extern int32_t iNumSelectedHoles_DH(void*, const int32_t* p1);


cdef extern int32_t iQADipAzCurvatureLST_DH(void*, const int32_t* p1, const int32_t* p2, const double* p3, const int32_t* p4);


cdef extern int32_t iQADipAzSurveyLST_DH(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t iQAEastNorthCurvatureLST_DH(void*, const int32_t* p1, const int32_t* p2, const double* p3, const int32_t* p4);


cdef extern int32_t iQAEastNorthSurveyLST_DH(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t iSliceSelectionToolGUI_DH(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, double* p10, double* p11, double* p12, double* p13);


cdef extern int32_t iUpdateSurveyFromCollar_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void LoadDataParametersINI_DH(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void LoadPlotParameters_DH(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void LoadSelect_DH(void*, const int32_t* p1, const char* p2);


cdef extern void MaskPLY_DH(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const char* p5, const int32_t* p6, const int32_t* p7);


cdef extern int32_t Open_DH(void*, const char* p1);


cdef extern void OpenJob_DH(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void PlotHoleTraces_DH(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void PlotHoleTraces3D_DH(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void PlotSymbols3D_DH(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void QACollar_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void QACollarLST_DH(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void QADipAzCurvature_DH(void*, const int32_t* p1, const int32_t* p2, const double* p3);


cdef extern void QADipAzCurvature2_DH(void*, const int32_t* p1, const int32_t* p2, const double* p3, const char* p4);


cdef extern void QADipAzSurvey_DH(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5);


cdef extern void QAEastNorthCurvature_DH(void*, const int32_t* p1, const int32_t* p2, const double* p3);


cdef extern void QAEastNorthCurvature2_DH(void*, const int32_t* p1, const int32_t* p2, const double* p3, const char* p4);


cdef extern void QAEastNorthSurvey_DH(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5);


cdef extern void QAFromToData_DH(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5);


cdef extern void QAPointData_DH(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5);


cdef extern void QAWriteUnregisteredHoles_DH(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void ReplotHoles_DH(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void PlotHolesOnSection_DH(void*, const int32_t* p1, const char* p2, const int32_t* p3, const char* p4);


cdef extern void ReSurveyEastNorth_DH(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const double* p7, const double* p8, const double* p9, const double* p10, double* p11);


cdef extern void ReSurveyPolFit_DH(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10, const double* p11, const int32_t* p12, const int32_t* p13, const int32_t* p14, const int32_t* p15, const int32_t* p16, const int32_t* p17);


cdef extern void ReSurveyRadCurve_DH(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10, const double* p11, const int32_t* p12, const int32_t* p13, const int32_t* p14, const int32_t* p15, const int32_t* p16);


cdef extern void ReSurveyStraight_DH(void*, const int32_t* p1, const char* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10, const int32_t* p11, const int32_t* p12, const int32_t* p13, const int32_t* p14, const int32_t* p15);


cdef extern void ReSurveyStraightSeg_DH(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10, const double* p11, const int32_t* p12, const int32_t* p13, const int32_t* p14, const int32_t* p15, const int32_t* p16);


cdef extern void SaveDataParametersINI_DH(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void SaveJob_DH(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void SaveSelect_DH(void*, const int32_t* p1, const char* p2);


cdef extern void SectionWindowSizeMM_DH(void*, const int32_t* p1, double* p2, double* p3);


cdef extern void SelectAllHoles_DH(void*, const int32_t* p1);


cdef extern void SelectHoles_DH(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SelectName_DH(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4);


cdef extern void SelectPLY_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SelectPLY2_DH(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void SetCrookedSectionIPJ_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetCurrentViewName_DH(void*, const int32_t* p1, const char* p2);


cdef extern void SetInfo_DH(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4);


cdef extern void SetIPJ_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetMAP_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetNewIPJ_DH(void*, const int32_t* p1, const char* p2);


cdef extern void SetSelectedHolesVV_DH(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetTemplateBlob_DH(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void SignificantIntersectionsDB_DH(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10, const double* p11, const double* p12);


cdef extern void TestImportLAS_DH(void*, const int32_t* p1, const char* p2, const char* p3, const double* p4, const int32_t* p5, int32_t* p6);


cdef extern void UnSelectAllHoles_DH(void*, const int32_t* p1);


cdef extern void UnSelectedHoleLST_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void UpdateCollarTable_DH(void*, const int32_t* p1);


cdef extern void UpdateHoleExtent_DH(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Wholeplot_DH(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void SurfaceIntersections_DH(void*, const int32_t* p1, const int32_t* p2, const char* p3, const int32_t* p4);




# Class DMPPLY


cdef extern void _Clear_DMPPLY(void*, const int32_t* p1);


cdef extern void Copy_DMPPLY(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t Create_DMPPLY(void*);


cdef extern void Destroy_DMPPLY(void*, const int32_t* p1);


cdef extern void GetAzimuth_DMPPLY(void*, const int32_t* p1, const int32_t* p2, double* p3);


cdef extern void GetExtents_DMPPLY(void*, const int32_t* p1, const int32_t* p2, double* p3, double* p4, double* p5, double* p6, double* p7);


cdef extern void GetJoins_DMPPLY(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void GetNormalVectors_DMPPLY(void*, const int32_t* p1, const int32_t* p2, double* p3, double* p4, double* p5, double* p6, double* p7, double* p8, double* p9, double* p10, double* p11);


cdef extern void GetPoly_DMPPLY(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void GetSwing_DMPPLY(void*, const int32_t* p1, const int32_t* p2, double* p3);


cdef extern void GetVertex_DMPPLY(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, double* p4, double* p5, double* p6);


cdef extern int32_t iNumJoins_DMPPLY(void*, const int32_t* p1);


cdef extern int32_t iNumPolys_DMPPLY(void*, const int32_t* p1);


cdef extern int32_t iNumVertices_DMPPLY(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Load_DMPPLY(void*, const int32_t* p1, const char* p2);


cdef extern void MoveVertex_DMPPLY(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const double* p5, const double* p6);


cdef extern void ProjectPoly_DMPPLY(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10);


cdef extern void ReProjectPoly_DMPPLY(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const double* p5, const double* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11);


cdef extern void Save_DMPPLY(void*, const int32_t* p1, const char* p2);


cdef extern void SetPoly_DMPPLY(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);



# Class DOCU


cdef extern void Copy_DOCU(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t Create_DOCU(void*);


cdef extern int32_t CreateS_DOCU(void*, const int32_t* p1);


cdef extern void Destroy_DOCU(void*, const int32_t* p1);


cdef extern void GetFile_DOCU(void*, const int32_t* p1, const char* p2);


cdef extern void GetFileMeta_DOCU(void*, const int32_t* p1, const char* p2);


cdef extern void GetMETA_DOCU(void*, const int32_t* p1, const int32_t* p2);


cdef extern void IDocName_DOCU(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void IFileName_DOCU(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern int32_t iHaveMETA_DOCU(void*, const int32_t* p1);


cdef extern int32_t iIsReference_DOCU(void*, const int32_t* p1);


cdef extern void Open_DOCU(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Serial_DOCU(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetFile_DOCU(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4);


cdef extern void SetFileMeta_DOCU(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4);


cdef extern void SetMETA_DOCU(void*, const int32_t* p1, const int32_t* p2);



# Class DU


cdef extern void _TableLook1_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5, const char* p6, const int32_t* p7, const double* p8, const int32_t* p9);


cdef extern void _TableLook2_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const char* p6, const char* p7, const char* p8, const int32_t* p9, const double* p10, const int32_t* p11);


cdef extern void _TableLookI2_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const char* p6, const char* p7, const char* p8, const int32_t* p9, const double* p10, const int32_t* p11);


cdef extern void _TableLookR2_DU(void*, const int32_t* p1, const int32_t* p2, const double* p3, const int32_t* p4, const int32_t* p5, const char* p6, const char* p7, const char* p8, const int32_t* p9, const double* p10, const int32_t* p11);


cdef extern void ADOTableNames_DU(void*, const char* p1, const int32_t* p2);


cdef extern void AnSig_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void Append_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void AvgAzimuth_DU(void*, const int32_t* p1, const double* p2, double* p3);


cdef extern void BaseData_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void BaseDataEx_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void BoundLine_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void BPFilt_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, const double* p6, const int32_t* p7);


cdef extern void BreakLine_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void BreakLine2_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void BreakLineToGroups_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4);


cdef extern void BreakLineToGroups2_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4, const int32_t* p5);


cdef extern void BSpline_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, const double* p6, const double* p7);


cdef extern void ClosestPoint_DU(void*, const int32_t* p1, const double* p2, const double* p3, double* p4, double* p5, int32_t* p6, double* p7);


cdef extern void CopyLine_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void CopyLineAcross_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void CopyLineChanAcross_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void CopyLineMasked_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void DAOTableNames_DU(void*, const char* p1, const char* p2, const int32_t* p3);


cdef extern void Decimate_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void Diff_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void Distance_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void Distance3D_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void Distline_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, double* p5);


cdef extern void DupChanLocks_DU(void*, const int32_t* p1, const int32_t* p2);


cdef extern void DupChans_DU(void*, const int32_t* p1, const int32_t* p2);


cdef extern void EditDuplicates_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const double* p7);


cdef extern void Export_DU(void*, const int32_t* p1, const int32_t* p2, const char* p3, const int32_t* p4, const int32_t* p5, const char* p6, const int32_t* p7, const int32_t* p8);


cdef extern void Export2_DU(void*, const int32_t* p1, const int32_t* p2, const char* p3, const int32_t* p4, const int32_t* p5, const char* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9);


cdef extern void ExportAMIRA_DU(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const char* p5, const char* p6, const char* p7, const char* p8, const char* p9, const char* p10, const char* p11);


cdef extern void ExportAseg_DU(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const char* p5, const char* p6);


cdef extern void ExportAsegProj_DU(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const char* p5, const char* p6, const char* p7, const int32_t* p8);


cdef extern void ExportChanCRC_DU(void*, const int32_t* p1, const int32_t* p2, int32_t* p3, const char* p4);


cdef extern void ExportCSV_DU(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const char* p5, const int32_t* p6, const int32_t* p7);


cdef extern void ExportDatabaseCRC_DU(void*, const int32_t* p1, int32_t* p2, const char* p3);


cdef extern void ExportGBN_DU(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void ExportMDB_DU(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const char* p6);


cdef extern void ExportGeodatabase_DU(void*, const int32_t* p1, const char* p2, const char* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const char* p8);


cdef extern int32_t GetExistingFeatureClassesInGeodatabase_DU(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4);


cdef extern void ExportSHP_DU(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const char* p6, const int32_t* p7);


cdef extern void ExportXYZ_DU(void*, const int32_t* p1, const char* p2, const char* p3);


cdef extern void ExportXYZ2_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void FFT_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void Filter_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void GenLev_DU(void*, const int32_t* p1, const char* p2, const char* p3, const double* p4, const int32_t* p5);


cdef extern void GenLevDB_DU(void*, const int32_t* p1, const char* p2, const double* p3, const int32_t* p4);


cdef extern void GenXYZTemp_DU(void*, const char* p1, const char* p2);


cdef extern void GetXYZNumFields_DU(void*, const char* p1, int32_t* p2);


cdef extern void GetChanDataLST_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void GetChanDataVV_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void Gradient_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const double* p10, const double* p11);


cdef extern void GravDrift_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void GravTide_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const double* p7, const int32_t* p8);


cdef extern void GridLoad_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void GridLoadXYZ_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10);


cdef extern void Head_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const double* p6);


cdef extern void IImportBIN3_DU(void*, const int32_t* p1, const char* p2, const char* p3, char* p4, const int32_t* p5, const int32_t* p6, const double* p7, const int32_t* p8);


cdef extern void ImpCBPly_DU(void*, const int32_t* p1, const int32_t* p2, const char* p3, const int32_t* p4, const int32_t* p5);


cdef extern void ImportADO_DU(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const char* p5);


cdef extern void ImportAllADO_DU(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void ImportAllDAO_DU(void*, const int32_t* p1, const char* p2, const char* p3, const int32_t* p4);


cdef extern void ImportAMIRA_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void ImportAseg_DU(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const char* p5, const int32_t* p6);


cdef extern void ImportAsegProj_DU(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const char* p5, const int32_t* p6, const char* p7, const char* p8, const char* p9);


cdef extern void ImportBIN_DU(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const int32_t* p5, const double* p6);


cdef extern void ImportBIN2_DU(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const int32_t* p5, const double* p6, const int32_t* p7);


cdef extern void ImportBIN4_DU(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const char* p5, const int32_t* p6, const double* p7, const int32_t* p8);


cdef extern void ImportDAARC500Serial_DU(void*, const int32_t* p1, const int32_t* p2, const char* p3, const int32_t* p4, const int32_t* p5);


cdef extern void ImportDAARC500SerialGPS_DU(void*, const int32_t* p1, const int32_t* p2, const char* p3, const int32_t* p4);


cdef extern void ImportDAO_DU(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const char* p5, const char* p6);


cdef extern void ImportESRI_DU(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4);


cdef extern void ImportGBN_DU(void*, const int32_t* p1, const char* p2);


cdef extern void ImportODDF_DU(void*, const int32_t* p1, const char* p2);


cdef extern void ImportPico_DU(void*, const int32_t* p1, const char* p2, const char* p3, const int32_t* p4);


cdef extern void ImportUBCModMsh_DU(void*, const int32_t* p1, const char* p2, const char* p3, const int32_t* p4, const double* p5);


cdef extern void ImportUSGSPost_DU(void*, const int32_t* p1, const char* p2);


cdef extern void ImportXYZ_DU(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4);


cdef extern void ImportXYZ2_DU(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const int32_t* p5);


cdef extern void ImportIoGAS_DU(void*, const int32_t* p1, const char* p2, const char* p3);


cdef extern void IndexOrder_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void Interp_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void InterpGap_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8);


cdef extern void Intersect_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, const char* p6);


cdef extern void IntersectAll_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, const char* p6);


cdef extern void IntersectGDBtoTBL_DU(void*, const char* p1, const char* p2);


cdef extern void IntersectOld_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5, const char* p6);


cdef extern void IntersectTBLtoGDB_DU(void*, const char* p1, const char* p2);


cdef extern void LabTemplate_DU(void*, const char* p1, const char* p2, const int32_t* p3, const char* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9);


cdef extern void LoadGravity_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4);


cdef extern void LoadLTB_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void MakeFid_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void Mask_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void Math_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void MergeLine_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void ModFidRange_DU(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void Move_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void NLFilt_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const double* p6);


cdef extern void Normal_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void PolyFill_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void PolyMask_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void ProjectData_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void ProjectXYZ_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9);


cdef extern void ProjPoints_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11, const int32_t* p12, const int32_t* p13, const int32_t* p14, const int32_t* p15, const int32_t* p16, const int32_t* p17, const int32_t* p18, const int32_t* p19, const int32_t* p20);


cdef extern void QCInitSeparation_DU(void*, const int32_t* p1, const double* p2, const double* p3);


cdef extern int32_t QCSurveyPlan_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const double* p5, const double* p6, const double* p7, const int32_t* p8, const int32_t* p9, const double* p10, const double* p11, const double* p12, const double* p13, const int32_t* p14, const int32_t* p15, const int32_t* p16, const double* p17, const double* p18);


cdef extern double rDirection_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void ReFid_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const double* p7, const double* p8, const double* p9);


cdef extern void ReFidAllCh_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void ReFidCh_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void Rotate_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const double* p7, const double* p8, const double* p9);


cdef extern void SampleGD_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void SampleIMG_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void SampleIMGLineLST_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void ScanADO_DU(void*, const char* p1, const char* p2, const char* p3);


cdef extern void ScanAseg_DU(void*, const char* p1, const char* p2, const char* p3, const char* p4);


cdef extern void ScanDAO_DU(void*, const char* p1, const char* p2, const char* p3, const char* p4);


cdef extern void ScanPico_DU(void*, const char* p1, const char* p2);


cdef extern void Sort_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void SortIndex_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void SortIndex2_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void SplitLine_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4);


cdef extern void SplitLine2_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const int32_t* p5);


cdef extern void SplitLineXY_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const double* p6, const double* p7, const int32_t* p8, int32_t* p9, const int32_t* p10);


cdef extern void SplitLineXY2_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const double* p6, const double* p7, const int32_t* p8, int32_t* p9, const int32_t* p10, const int32_t* p11);


cdef extern void SplitLineXY3_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const double* p6, const double* p7, const int32_t* p8, int32_t* p9, const int32_t* p10, const int32_t* p11, const int32_t* p12);


cdef extern void SplitLineByDirection_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, const double* p6, const double* p7, const double* p8, const int32_t* p9, const int32_t* p10, int32_t* p11, const int32_t* p12, const int32_t* p13);


cdef extern void SplitLineByDirection2_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, const double* p6, const double* p7, const double* p8, const int32_t* p9, const int32_t* p10, int32_t* p11, const int32_t* p12, const int32_t* p13, const int32_t* p14);


cdef extern void Stat_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void TableLineFid_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void TableSelectedLinesFid_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void TimeConstant_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8);


cdef extern void Trend_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void UpdateIntersectDB_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void VoxelSection_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const char* p6, const double* p7, const double* p8, const int32_t* p9);


cdef extern void WriteWA_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void XyzLine_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const double* p6);


cdef extern void XyzLine2_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const double* p6, const double* p7);


cdef extern void XyzLine3_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const double* p6, const double* p7, const int32_t* p8);


cdef extern void ZMask_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, const double* p6);


cdef extern void RangeXY_DU(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5);


cdef extern void RangeXYZ_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, double* p5, double* p6, double* p7, double* p8, double* p9, double* p10, int32_t* p11);


cdef extern void RangeXYZData_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, double* p6, double* p7, double* p8, double* p9, double* p10, double* p11, double* p12, double* p13, int32_t* p14);


cdef extern void CreateDrillholeParameterWeightConstraintDatabase_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4);


cdef extern void CalculateDrapedSurveyAltitude_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const double* p7, const double* p8, const double* p9, const int32_t* p10, const double* p11, const double* p12);


cdef extern void CalculateDrapedSurveyAltitude2_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const double* p8, const double* p9, const double* p10, const double* p11, const int32_t* p12, const double* p13, const double* p14);


cdef extern void DirectGridDataToVoxel_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const char* p6, const double* p7, const double* p8, const double* p9, const int32_t* p10, const int32_t* p11, const int32_t* p12, const double* p13, const double* p14, const double* p15, const int32_t* p16);


cdef extern void DirectGridItemCountsToVoxel_DU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const char* p6, const double* p7, const double* p8, const double* p9, const int32_t* p10, const int32_t* p11, const int32_t* p12, const double* p13, const double* p14, const double* p15, const int32_t* p16);



# Class DXFI


cdef extern int32_t Create_DXFI(void*, const char* p1);


cdef extern void Destroy_DXFI(void*, const int32_t* p1);


cdef extern void DXF2PLY_DXFI(void*, const int32_t* p1, const int32_t* p2);


cdef extern void DXF2ViewEx_DXFI(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5, const int32_t* p6, const int32_t* p7);


cdef extern void GetRange_DXFI(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5, double* p6, double* p7);



# Class EDB

# Miscellaneous




cdef extern void App_ApplyFormulaInternal_EDB(void*, const int32_t* p1, const char* p2);


cdef extern int32_t App_Current_EDB(void*);


cdef extern int32_t App_CurrentNoActivate_EDB(void*);


cdef extern int32_t App_CurrentIfExists_EDB(void*);


cdef extern void App_DelLine0_EDB(void*, const int32_t* p1);


cdef extern void App_Destroy_EDB(void*, const int32_t* p1);


cdef extern void App_DestroyView_EDB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t App_GetCurChanSymb_EDB(void*, const int32_t* p1);


cdef extern int32_t App_GetCurLineSymb_EDB(void*, const int32_t* p1);


cdef extern void App_GetDisplFidRange_EDB(void*, const int32_t* p1, int32_t* p2, int32_t* p3);


cdef extern void App_GetCurPoint_EDB(void*, const int32_t* p1, double* p2, double* p3, double* p4);


cdef extern void App_GetFidRange_EDB(void*, const int32_t* p1, double* p2, double* p3, int32_t* p4);


cdef extern int32_t App_GetNextLineSymb_EDB(void*, const int32_t* p1);


cdef extern int32_t App_GetPrevLineSymb_EDB(void*, const int32_t* p1);


cdef extern void App_GetProfileRangeX_EDB(void*, const int32_t* p1, double* p2, double* p3, int32_t* p4);


cdef extern void App_GetProfileRangeY_EDB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, double* p4, double* p5, int32_t* p6);


cdef extern void App_GetProfileSplit_EDB(void*, const int32_t* p1, double* p2, double* p3);


cdef extern void App_GetProfileSplit5_EDB(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5);


cdef extern void App_GetProfileSplitVV_EDB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void App_GetProfileVerticalGridLines_EDB(void*, const int32_t* p1, int32_t* p2, double* p3);


cdef extern void App_GetProfileWindow_EDB(void*, const int32_t* p1, const int32_t* p2, int32_t* p3, int32_t* p4);


cdef extern void App_GotoColumn_EDB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void App_GotoElem_EDB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void App_GotoLine_EDB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void App_Histogram_EDB(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const int32_t* p5);


cdef extern int32_t App_iAllChanList_EDB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t App_iChannels_EDB(void*, const int32_t* p1);


cdef extern int32_t App_iDispChanList_EDB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t App_iDispChanLST_EDB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t App_iDispClassChanLST_EDB(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern int32_t App_iFindChannelColumn_EDB(void*, const int32_t* p1, const char* p2);


cdef extern int32_t App_iFindNearest_EDB(void*, const int32_t* p1, double* p2, double* p3, double* p4, const int32_t* p5);


cdef extern void App_IGetCurChan_EDB(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void App_IGetCurFidString_EDB(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void App_IGetCurLine_EDB(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern int32_t App_iGetCurMark_EDB(void*, const int32_t* p1, double* p2, double* p3, double* p4);


cdef extern void App_IGetCurrentSelection_EDB(void*, const int32_t* p1, char* p2, const int32_t* p3, char* p4, const int32_t* p5, char* p6, const int32_t* p7, char* p8, const int32_t* p9);


cdef extern int32_t App_iGetDatabasesLST_EDB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t App_iGetMarkChanVV_EDB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t App_iGetMarkChanVA_EDB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void App_IGetName_EDB(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern int32_t App_iGetProfileParm_EDB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern int32_t App_iGetWindowState_EDB(void*, const int32_t* p1);


cdef extern int32_t App_iHaveCurrent_EDB(void*);


cdef extern int32_t App_iIsLocked_EDB(void*, const int32_t* p1);


cdef extern int32_t App_iLoaded_EDB(void*, const char* p1);


cdef extern int32_t App_iProfileOpen_EDB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t App_iReadOnly_EDB(void*, const int32_t* p1);


cdef extern void App_GetWindowPosition_EDB(void*, const int32_t* p1, int32_t* p2, int32_t* p3, int32_t* p4, int32_t* p5, int32_t* p6, int32_t* p7);


cdef extern void App_SetWindowPosition_EDB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern int32_t App_iShowProfileName_EDB(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern int32_t App_iGetWindowYAxisDirection_EDB(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t App_iWindowProfiles_EDB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void LaunchHistogram_EDB(void*, const int32_t* p1, const char* p2);


cdef extern void LaunchScatter_EDB(void*, const int32_t* p1);


cdef extern int32_t App_Load_EDB(void*, const char* p1);


cdef extern int32_t App_LoadNoActivate_EDB(void*, const char* p1);


cdef extern void App_LoadAllChans_EDB(void*, const int32_t* p1);


cdef extern void App_LoadChan_EDB(void*, const int32_t* p1, const char* p2);


cdef extern int32_t App_LoadNew_EDB(void*, const char* p1);


cdef extern int32_t App_LoadPass_EDB(void*, const char* p1, const char* p2, const char* p3);


cdef extern int32_t App_LoadWithView_EDB(void*, const char* p1, const int32_t* p2);


cdef extern int32_t App_Lock_EDB(void*, const int32_t* p1);


cdef extern void App_MakeCurrent_EDB(void*, const int32_t* p1);


cdef extern void App_RemoveProfile_EDB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern double App_rGetCurFid_EDB(void*, const int32_t* p1);


cdef extern double App_rGetProfileParm_EDB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern double App_rGetSplit_EDB(void*, const int32_t* p1);


cdef extern void App_RunChannelMaker_EDB(void*, const int32_t* p1, const char* p2);


cdef extern void App_RunChannelMakers_EDB(void*, const int32_t* p1);


cdef extern void App_SetCurLine_EDB(void*, const int32_t* p1, const char* p2);


cdef extern void App_SetCurLineNoMessage_EDB(void*, const int32_t* p1, const char* p2);


cdef extern void App_SetCurMark_EDB(void*, const int32_t* p1, const double* p2, const double* p3);


cdef extern void App_SetProfileParmI_EDB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void App_SetProfileParmR_EDB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5);


cdef extern void App_SetProfileRangeX_EDB(void*, const int32_t* p1, const double* p2, const double* p3, const int32_t* p4);


cdef extern void App_SetProfileRangeY_EDB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const double* p5, const int32_t* p6);


cdef extern void App_SetProfileSplit_EDB(void*, const int32_t* p1, const double* p2, const double* p3);


cdef extern void App_SetProfileSplit5_EDB(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5);


cdef extern void App_SetProfileSplitVV_EDB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void App_SetSplit_EDB(void*, const int32_t* p1, const double* p2);


cdef extern void App_SetWindowState_EDB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void App_ShowProfile_EDB(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void App_Statistics_EDB(void*, const int32_t* p1, const int32_t* p2);


cdef extern void App_UnLoad_EDB(void*, const char* p1);


cdef extern void App_UnLoadAll_EDB(void*);


cdef extern void App_UnLoadAllChans_EDB(void*, const int32_t* p1);


cdef extern void App_UnLoadChan_EDB(void*, const int32_t* p1, const char* p2);


cdef extern void App_UnLoadDiscard_EDB(void*, const char* p1);


cdef extern void App_UnLoadVerify_EDB(void*, const char* p1, const int32_t* p2);


cdef extern void App_UnLock_EDB(void*, const int32_t* p1);


# External Window




cdef extern void App_LoadControl_EDB(void*, const char* p1, HWND p2);


cdef extern void App_LoadNewControl_EDB(void*, const char* p1, HWND p2);


cdef extern void App_LoadPassControl_EDB(void*, const char* p1, const char* p2, const char* p3, HWND p4);


cdef extern void App_LoadWithViewControl_EDB(void*, const char* p1, const int32_t* p2, HWND p3);




# Class EDOC

# GMSYS 3D Models




cdef extern int32_t App_CreateNewGMS3D_EDOC(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


# Miscellaneous




cdef extern int32_t App_Current_EDOC(void*, const int32_t* p1);


cdef extern int32_t App_CurrentNoActivate_EDOC(void*, const int32_t* p1);


cdef extern int32_t App_CurrentIfExists_EDOC(void*, const int32_t* p1);


cdef extern void App_Destroy_EDOC(void*, const int32_t* p1);


cdef extern int32_t App_iGetDocumentsLST_EDOC(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void App_IGetName_EDOC(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern int32_t App_iGetWindowState_EDOC(void*, const int32_t* p1);


cdef extern int32_t App_iHaveCurrent_EDOC(void*, const int32_t* p1);


cdef extern int32_t App_iLoaded_EDOC(void*, const char* p1, const int32_t* p2);


cdef extern void App_GetWindowPosition_EDOC(void*, const int32_t* p1, int32_t* p2, int32_t* p3, int32_t* p4, int32_t* p5, int32_t* p6, int32_t* p7);


cdef extern void App_SetWindowPosition_EDOC(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern int32_t App_iReadOnly_EDOC(void*, const int32_t* p1);


cdef extern int32_t App_Load_EDOC(void*, const char* p1, const int32_t* p2);


cdef extern int32_t App_LoadNoActivate_EDOC(void*, const char* p1, const int32_t* p2);


cdef extern void App_MakeCurrent_EDOC(void*, const int32_t* p1);


cdef extern void App_SetWindowState_EDOC(void*, const int32_t* p1, const int32_t* p2);


cdef extern void App_Sync_EDOC(void*, const char* p1, const int32_t* p2);


cdef extern void App_SyncOpen_EDOC(void*, const int32_t* p1);


cdef extern void App_UnLoad_EDOC(void*, const char* p1, const int32_t* p2);


cdef extern void App_UnLoadAll_EDOC(void*, const int32_t* p1);


cdef extern void App_UnLoadDiscard_EDOC(void*, const char* p1, const int32_t* p2);


cdef extern void App_UnLoadVerify_EDOC(void*, const char* p1, const int32_t* p2, const int32_t* p3);




# Class EMAP

# Drag-and-drop methods




cdef extern void App_DropMapClipData_EMAP(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t App_iDragDropEnabled_EMAP(void*, const int32_t* p1);


cdef extern void App_SetDragDropEnabled_EMAP(void*, const int32_t* p1, const int32_t* p2);


# Drawing




cdef extern void App_CopyToClip_EMAP(void*, const int32_t* p1);


cdef extern void App_DrawLine_EMAP(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5);


cdef extern void App_DrawRect_EMAP(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5);


cdef extern void App_DrawRect3D_EMAP(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const int32_t* p5);


cdef extern void App_GetDisplayArea_EMAP(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5);


cdef extern void App_GetDisplayAreaRaw_EMAP(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5);


cdef extern void App_GetMapLayoutProps_EMAP(void*, const int32_t* p1, int32_t* p2, double* p3, int32_t* p4, int32_t* p5, int32_t* p6, int32_t* p7, int32_t* p8, int32_t* p9);


cdef extern void App_GetMapSnap_EMAP(void*, const int32_t* p1, double* p2);


cdef extern int32_t App_iGetWindowState_EMAP(void*, const int32_t* p1);


cdef extern void App_SetDisplayArea_EMAP(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5);


cdef extern void App_SetMapLayoutProps_EMAP(void*, const int32_t* p1, const int32_t* p2, const double* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9);


cdef extern void App_SetMapSnap_EMAP(void*, const int32_t* p1, const double* p2);


cdef extern void App_SetWindowState_EMAP(void*, const int32_t* p1, const int32_t* p2);


# General




cdef extern int32_t App_iPackedFiles_EMAP(void*, const int32_t* p1);


cdef extern void App_ActivateGroup_EMAP(void*, const int32_t* p1, const char* p2);


cdef extern void App_ActivateView_EMAP(void*, const int32_t* p1, const char* p2);


cdef extern int32_t App_Current_EMAP(void*);


cdef extern int32_t App_CurrentNoActivate_EMAP(void*);


cdef extern int32_t App_CurrentIfExists_EMAP(void*);


cdef extern void App_Destroy_EMAP(void*, const int32_t* p1);


cdef extern void App_DestroyView_EMAP(void*, const int32_t* p1, const int32_t* p2);


cdef extern void App_FontLST_EMAP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t App_iChangeCurrentView_EMAP(void*, const int32_t* p1, const char* p2);


cdef extern int32_t App_iCreateGroupSnapshot_EMAP(void*, const int32_t* p1, const int32_t* p2);


cdef extern void App_IGet3DViewName_EMAP(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void App_IGetCurrentGroup_EMAP(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void App_IGetCurrentView_EMAP(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern int32_t App_iGetMapsLST_EMAP(void*, const int32_t* p1, const int32_t* p2);


cdef extern void App_IGetName_EMAP(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern int32_t App_iHaveCurrent_EMAP(void*);


cdef extern int32_t App_iIGetSpecifiedMapName_EMAP(void*, const char* p1, const char* p2, char* p3, const int32_t* p4);


cdef extern int32_t App_iIsGrid_EMAP(void*, const int32_t* p1);


cdef extern void App_ReloadGrid_EMAP(void*, const char* p1);


cdef extern int32_t App_iIs3DView_EMAP(void*, const int32_t* p1);


cdef extern int32_t App_GetE3DV_EMAP(void*, const int32_t* p1);


cdef extern int32_t App_iIsLocked_EMAP(void*, const int32_t* p1);


cdef extern int32_t App_iLoaded_EMAP(void*, const char* p1);


cdef extern int32_t App_iReadOnly_EMAP(void*, const int32_t* p1);


cdef extern void App_GetWindowPosition_EMAP(void*, const int32_t* p1, int32_t* p2, int32_t* p3, int32_t* p4, int32_t* p5, int32_t* p6, int32_t* p7);


cdef extern void App_SetWindowPosition_EMAP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern int32_t App_iRealizeGroupSnapshot_EMAP(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t App_iSetCurrentView_EMAP(void*, const int32_t* p1, const char* p2);


cdef extern void App_GetViewIPJ_EMAP(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern int32_t App_Load_EMAP(void*, const char* p1);


cdef extern int32_t App_LoadNoActivate_EMAP(void*, const char* p1);


cdef extern int32_t App_LoadWithView_EMAP(void*, const char* p1, const int32_t* p2);


cdef extern int32_t App_Lock_EMAP(void*, const int32_t* p1);


cdef extern void App_MakeCurrent_EMAP(void*, const int32_t* p1);


cdef extern void App_Print_EMAP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const double* p10, const int32_t* p11, const int32_t* p12, const int32_t* p13, const char* p14);


cdef extern void App_Redraw_EMAP(void*, const int32_t* p1);


cdef extern void App_SelectGroup_EMAP(void*, const int32_t* p1, const char* p2);


cdef extern void App_SetRedrawFlag_EMAP(void*, const int32_t* p1, const int32_t* p2);


cdef extern void App_UnLoad_EMAP(void*, const char* p1);


cdef extern void App_UnLoadAll_EMAP(void*);


cdef extern void App_UnLoadVerify_EMAP(void*, const char* p1, const int32_t* p2);


cdef extern void App_UnLock_EMAP(void*, const int32_t* p1);


# Input




cdef extern void App_GetCurPoint_EMAP(void*, const int32_t* p1, double* p2, double* p3);


cdef extern void App_GetCurPointMM_EMAP(void*, const int32_t* p1, double* p2, double* p3);


cdef extern void App_GetCursor_EMAP(void*, const int32_t* p1, double* p2, double* p3);


cdef extern void App_GetCursorMM_EMAP(void*, const int32_t* p1, double* p2, double* p3);


cdef extern int32_t App_iDigitize_EMAP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5, const char* p6, const char* p7, const int32_t* p8);


cdef extern int32_t App_iDigitize2_EMAP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const char* p6, const int32_t* p7);


cdef extern int32_t App_iDigitizePeaks_EMAP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const char* p6, const int32_t* p7);


cdef extern int32_t App_iDigitizePolygon_EMAP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const char* p6, const int32_t* p7, const int32_t* p8);


cdef extern int32_t App_iGetBox_EMAP(void*, const int32_t* p1, const char* p2, double* p3, double* p4, double* p5, double* p6);


cdef extern int32_t App_iGetBox2_EMAP(void*, const int32_t* p1, const char* p2, double* p3, double* p4, double* p5, double* p6, double* p7, double* p8, double* p9, double* p10);


cdef extern int32_t App_iGetGrid_EMAP(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, double* p5, double* p6, double* p7, double* p8, double* p9);


cdef extern int32_t App_iGetLine_EMAP(void*, const int32_t* p1, const char* p2, double* p3, double* p4, double* p5, double* p6);


cdef extern int32_t App_iGetLineEx_EMAP(void*, const int32_t* p1, const char* p2, double* p3, double* p4, double* p5, double* p6);


cdef extern int32_t App_iGetLineXYZ_EMAP(void*, const int32_t* p1, const char* p2, double* p3, double* p4, double* p5, double* p6, double* p7, double* p8);


cdef extern int32_t App_iGetPoint_EMAP(void*, const int32_t* p1, const char* p2, double* p3, double* p4);


cdef extern int32_t App_iGetPointEx_EMAP(void*, const int32_t* p1, const char* p2, double* p3, double* p4);


cdef extern int32_t App_iGetPoint3D_EMAP(void*, const int32_t* p1, const char* p2, double* p3, double* p4, double* p5);


cdef extern int32_t App_iGetPolyLine_EMAP(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4);


cdef extern int32_t App_iGetPolyLineXYZ_EMAP(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern int32_t App_iGetRect_EMAP(void*, const int32_t* p1, const char* p2, double* p3, double* p4, double* p5, double* p6);


cdef extern int32_t App_iTrackPoint_EMAP(void*, const int32_t* p1, const int32_t* p2, double* p3, double* p4);


# Map Viewport Mode Methods




cdef extern void App_GetAOIArea_EMAP(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5);


cdef extern void App_SetAOIArea_EMAP(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5);


cdef extern void App_SetViewportMode_EMAP(void*, const int32_t* p1, const int32_t* p2);


# Tracking Methods




cdef extern void App_GetSelectedVertices_EMAP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


# Virtual




cdef extern int32_t App_CreateVirtual_EMAP(void*, const char* p1);


# External Window




cdef extern void App_LoadControl_EMAP(void*, const char* p1, HWND p2);


cdef extern void App_LoadWithViewControl_EMAP(void*, const char* p1, const int32_t* p2, HWND p3);




# Class EMAPTEMPLATE

# Drag-and-drop methods




cdef extern int32_t App_iDragDropEnabled_EMAPTEMPLATE(void*, const int32_t* p1);


cdef extern void App_SetDragDropEnabled_EMAPTEMPLATE(void*, const int32_t* p1, const int32_t* p2);


# General




cdef extern int32_t App_Current_EMAPTEMPLATE(void*);


cdef extern int32_t App_CurrentNoActivate_EMAPTEMPLATE(void*);


cdef extern int32_t App_CurrentIfExists_EMAPTEMPLATE(void*);


cdef extern void App_Destroy_EMAPTEMPLATE(void*, const int32_t* p1);


cdef extern int32_t App_iGetMapTemplatesLST_EMAPTEMPLATE(void*, const int32_t* p1, const int32_t* p2);


cdef extern void App_IGetName_EMAPTEMPLATE(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern int32_t App_iHaveCurrent_EMAPTEMPLATE(void*);


cdef extern int32_t App_iIGetSpecifiedMapName_EMAPTEMPLATE(void*, const char* p1, const char* p2, char* p3, const int32_t* p4);


cdef extern int32_t App_iIsLocked_EMAPTEMPLATE(void*, const int32_t* p1);


cdef extern int32_t App_iLoaded_EMAPTEMPLATE(void*, const char* p1);


cdef extern void App_GetWindowPosition_EMAPTEMPLATE(void*, const int32_t* p1, int32_t* p2, int32_t* p3, int32_t* p4, int32_t* p5, int32_t* p6, int32_t* p7);


cdef extern void App_SetWindowPosition_EMAPTEMPLATE(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern int32_t App_iReadOnly_EMAPTEMPLATE(void*, const int32_t* p1);


cdef extern int32_t App_Load_EMAPTEMPLATE(void*, const char* p1);


cdef extern int32_t App_LoadNoActivate_EMAPTEMPLATE(void*, const char* p1);


cdef extern int32_t App_Lock_EMAPTEMPLATE(void*, const int32_t* p1);


cdef extern void App_MakeCurrent_EMAPTEMPLATE(void*, const int32_t* p1);


cdef extern void App_UnLoad_EMAPTEMPLATE(void*, const char* p1);


cdef extern void App_UnLoadAll_EMAPTEMPLATE(void*);


cdef extern void App_UnLoadVerify_EMAPTEMPLATE(void*, const char* p1, const int32_t* p2);


cdef extern void App_UnLock_EMAPTEMPLATE(void*, const int32_t* p1);


# Input




cdef extern int32_t App_iGetBox_EMAPTEMPLATE(void*, const int32_t* p1, const char* p2, double* p3, double* p4, double* p5, double* p6);


cdef extern int32_t App_iGetLine_EMAPTEMPLATE(void*, const int32_t* p1, const char* p2, double* p3, double* p4, double* p5, double* p6);


cdef extern int32_t App_iGetPoint_EMAPTEMPLATE(void*, const int32_t* p1, const char* p2, double* p3, double* p4);


cdef extern int32_t App_iGetRect_EMAPTEMPLATE(void*, const int32_t* p1, const char* p2, double* p3, double* p4, double* p5, double* p6);


cdef extern int32_t App_iTrackPoint_EMAPTEMPLATE(void*, const int32_t* p1, const int32_t* p2, double* p3, double* p4);


# Selection Methods




cdef extern int32_t App_iGetItemSelection_EMAPTEMPLATE(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void App_SetItemSelection_EMAPTEMPLATE(void*, const int32_t* p1, const char* p2);


# View Window




cdef extern void App_GetDisplayArea_EMAPTEMPLATE(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5);


cdef extern void App_GetTemplateLayoutProps_EMAPTEMPLATE(void*, const int32_t* p1, int32_t* p2, double* p3, int32_t* p4, int32_t* p5, int32_t* p6, int32_t* p7, int32_t* p8, int32_t* p9);


cdef extern int32_t App_iGetWindowState_EMAPTEMPLATE(void*, const int32_t* p1);


cdef extern void App_SetDisplayArea_EMAPTEMPLATE(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5);


cdef extern void App_SetTemplateLayoutProps_EMAPTEMPLATE(void*, const int32_t* p1, const int32_t* p2, const double* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9);


cdef extern void App_SetWindowState_EMAPTEMPLATE(void*, const int32_t* p1, const int32_t* p2);


# Virtual




cdef extern int32_t App_CreateVirtual_EMAPTEMPLATE(void*, const char* p1);




# Class EUL3


cdef extern void _Destr_EUL3(void*, const int32_t* p1);


cdef extern int32_t Creat_EUL3(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const double* p6, const double* p7, const double* p8, const int32_t* p9, const double* p10, const double* p11);


cdef extern void GetResult_EUL3(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void Write_EUL3(void*, const int32_t* p1, const char* p2);


cdef extern int32_t ExEulerDerive_EUL3(void*, const int32_t* p1, const double* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern int32_t ExEulerCalc_EUL3(void*, const int32_t* p1, const double* p2, const int32_t* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10, const int32_t* p11, const int32_t* p12, const int32_t* p13, const int32_t* p14, const int32_t* p15, const int32_t* p16, const int32_t* p17, const int32_t* p18, const int32_t* p19, const int32_t* p20);



# Class EXP


cdef extern int32_t Create_EXP(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern int32_t CreateFile_EXP(void*, const int32_t* p1, const char* p2);


cdef extern void Destroy_EXP(void*, const int32_t* p1);



# Class FFT


cdef extern void AppDens_FFT(void*, const int32_t* p1, const double* p2, const double* p3);


cdef extern void AppSusc_FFT(void*, const int32_t* p1, const double* p2);


cdef extern void BandPass_FFT(void*, const int32_t* p1, const double* p2, const double* p3, const int32_t* p4);


cdef extern void BWorth_FFT(void*, const int32_t* p1, const double* p2, const double* p3, const int32_t* p4);


cdef extern void RCFilter_FFT(void*, const int32_t* p1, const double* p2, const int32_t* p3);


cdef extern void Contin_FFT(void*, const int32_t* p1, const double* p2);


cdef extern void CosRoll_FFT(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const int32_t* p5);


cdef extern int32_t Create_FFT(void*, const int32_t* p1, const double* p2, const int32_t* p3);


cdef extern int32_t CreateEx_FFT(void*, const int32_t* p1, const double* p2, const int32_t* p3, const double* p4);


cdef extern int32_t CreateRef_FFT(void*, const int32_t* p1, const double* p2, const int32_t* p3);


cdef extern int32_t CreateRefEx_FFT(void*, const int32_t* p1, const double* p2, const int32_t* p3, const double* p4, const double* p5);


cdef extern void Destroy_FFT(void*, const int32_t* p1);


cdef extern void Gaus_FFT(void*, const int32_t* p1, const double* p2, const int32_t* p3);


cdef extern void GetVV_FFT(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void HDrv_FFT(void*, const int32_t* p1, const double* p2);


cdef extern void HighPass_FFT(void*, const int32_t* p1, const double* p2, const double* p3);


cdef extern void HInt_FFT(void*, const int32_t* p1);


cdef extern void Inverse_FFT(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void LowPass_FFT(void*, const int32_t* p1, const double* p2);


cdef extern void RedPol_FFT(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5);


cdef extern double rNyquist_FFT(void*, const int32_t* p1);


cdef extern double rSampIncr_FFT(void*, const int32_t* p1);


cdef extern double rWaveIncr_FFT(void*, const int32_t* p1);


cdef extern void SetVV_FFT(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void Spectrum_FFT(void*, const int32_t* p1, const int32_t* p2);


cdef extern void VDrv_FFT(void*, const int32_t* p1, const double* p2);


cdef extern void VInt_FFT(void*, const int32_t* p1);


cdef extern void WriteSpectrum_FFT(void*, const int32_t* p1, const int32_t* p2, const char* p3);



# Class FFT2


cdef extern void Fft2In_FFT2(void*, const int32_t* p1, const char* p2, const char* p3);


cdef extern void FilterPG_FFT2(void*, const int32_t* p1, const char* p2, const int32_t* p3, const double* p4, const double* p5, const double* p6);


cdef extern void Flt_FFT2(void*, const int32_t* p1, const char* p2, const char* p3);


cdef extern void FltInv_FFT2(void*, const int32_t* p1, const char* p2, const char* p3);


cdef extern void PowSpc_FFT2(void*, const int32_t* p1, const char* p2);


cdef extern void RadSpc_FFT2(void*, const int32_t* p1, const char* p2);


cdef extern void RadSpc1_FFT2(void*, const int32_t* p1, const int32_t* p2);


cdef extern void RadSpc2_FFT2(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void TdXdY_FFT2(void*, const int32_t* p1, const int32_t* p2, const char* p3, const int32_t* p4);


cdef extern void TransPG_FFT2(void*, const int32_t* p1, const int32_t* p2);



# Class FLT


cdef extern int32_t Create_FLT(void*, const char* p1);


cdef extern void Destroy_FLT(void*, const int32_t* p1);


cdef extern int32_t Load_FLT(void*, const char* p1);



# Class GD


cdef extern int32_t Create_GD(void*, const char* p1, const int32_t* p2);


cdef extern void Destroy_GD(void*, const int32_t* p1);



# Class GER


cdef extern int32_t Create_GER(void*, const char* p1);


cdef extern void Destroy_GER(void*, const int32_t* p1);


cdef extern int32_t IiGet_GER(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern void SetInt_GER(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void SetReal_GER(void*, const int32_t* p1, const char* p2, const double* p3);


cdef extern void SetString_GER(void*, const int32_t* p1, const char* p2, const char* p3);



# Class GMSYS


cdef extern void Launch_GMSYS(void*, const char* p1);



# Class GU


cdef extern void DipoleMag_GU(void*, const char* p1, const double* p2, const double* p3, const int32_t* p4, const int32_t* p5, const double* p6, const double* p7);


cdef extern void EMHalfSpaceInv_GU(void*, const double* p1, const double* p2, const int32_t* p3, const double* p4, const double* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11, const double* p12);


cdef extern void EMHalfSpaceVV_GU(void*, const double* p1, const double* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void Geometrics2DB_GU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const double* p8, const double* p9, const double* p10, const double* p11);


cdef extern void Geometrics2TBL_GU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void GeometricsQC_GU(void*, const int32_t* p1, const char* p2, const int32_t* p3, const double* p4, const double* p5, const double* p6, const int32_t* p7, const int32_t* p8);


cdef extern void Geonics3138Dump2DB_GU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, const double* p6);


cdef extern void Geonics61Dump2DB_GU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const double* p5);


cdef extern void GeonicsDAT2DB_GU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const double* p5);


cdef extern void GrCurvCor_GU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void GrCurvCorEx_GU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4);


cdef extern void GrDEMVV_GU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void GrTest_GU(void*, const double* p1, const double* p2, const double* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9);


cdef extern void GravityStillReadingCorrection_GU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5, const int32_t* p6);


cdef extern int32_t iEMLayer_GU(void*, const double* p1, const double* p2, const double* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, double* p8, double* p9);


cdef extern int32_t iEMPlate_GU(void*, const double* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const int32_t* p10, const int32_t* p11, const int32_t* p12, const double* p13, const double* p14, const double* p15, const int32_t* p16, const int32_t* p17, const int32_t* p18, const int32_t* p19, const int32_t* p20, const int32_t* p21);


cdef extern void IGenUXDetectSymbolsGroupName_GU(void*, const char* p1, const char* p2, char* p3, const int32_t* p4);


cdef extern void ImportDAARC500Ethernet_GU(void*, const char* p1, const char* p2, int32_t* p3);


cdef extern void ImportDAARC500Serial_GU(void*, const char* p1, const int32_t* p2, const char* p3, int32_t* p4);


cdef extern void ImportP190_GU(void*, const int32_t* p1, const char* p2, const char* p3, const int32_t* p4);


cdef extern void LagDAARC500GPS_GU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void MaxwellPlateCorners_GU(void*, const double* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, double* p9, double* p10, double* p11, double* p12, double* p13, double* p14, double* p15, double* p16, double* p17, double* p18, double* p19, double* p20);


cdef extern void ScanDAARC500Ethernet_GU(void*, const char* p1, int32_t* p2, int32_t* p3);


cdef extern void ScanDAARC500Serial_GU(void*, const char* p1, const int32_t* p2, const int32_t* p3);


cdef extern void VVEuler_GU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11, const int32_t* p12, const int32_t* p13, const double* p14, const double* p15, const int32_t* p16);


cdef extern void VVEuler2_GU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11, const int32_t* p12, const int32_t* p13, const double* p14, const double* p15, const int32_t* p16);



# Class GUI


cdef extern int32_t App_CreateWNDFromHWND_GUI(void*, HWND p1);


cdef extern void App_Fft2SpecFilter_GUI(void*, const char* p1, const char* p2);


cdef extern int32_t App_GetParentWND_GUI(void*);


cdef extern void App_GetPrinterLST_GUI(void*, const int32_t* p1);


cdef extern int32_t App_iGetWindowState_GUI(void*);


cdef extern void App_SetWindowState_GUI(void*, const int32_t* p1);


cdef extern void App_GetWindowPosition_GUI(void*, int32_t* p1, int32_t* p2, int32_t* p3, int32_t* p4, int32_t* p5);


cdef extern void App_SetWindowPosition_GUI(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void App_GetClientWindowArea_GUI(void*, int32_t* p1, int32_t* p2, int32_t* p3, int32_t* p4);


cdef extern void App_GridStatHist_GUI(void*, const char* p1);


cdef extern void App_VoxelStatHist_GUI(void*, const char* p1);


cdef extern int32_t App_iColorForm_GUI(void*, int32_t* p1, const int32_t* p2);


cdef extern int32_t App_iColorTransform_GUI(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t App_iCoordSysWizard_GUI(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4, const char* p5);


cdef extern int32_t App_iCoordSysWizardLicensed_GUI(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4, const char* p5);


cdef extern int32_t App_iCoordSysWizardGrid_GUI(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5, const char* p6, const int32_t* p7, const int32_t* p8, double* p9, double* p10, double* p11, double* p12, double* p13);


cdef extern int32_t App_iDatabaseType_GUI(void*, const char* p1, char* p2, const int32_t* p3);


cdef extern int32_t App_iDatamineType_GUI(void*, const char* p1, int32_t* p2);


cdef extern int32_t App_iExportXYZTemplateEditor_GUI(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern int32_t App_iExportXYZTemplateEditorEx_GUI(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern int32_t iFileFilterIndex_GUI(void*, const char* p1);


cdef extern int32_t iGCSDatumWarningSHP_GUI(void*, const char* p1, const int32_t* p2);


cdef extern int32_t iGCSDatumWarningSHPDBEx_GUI(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern int32_t iGCSDatumWarningSHPEx_GUI(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern int32_t App_iGetAreaOfInterest_GUI(void*, double* p1, double* p2, double* p3, double* p4, const int32_t* p5, const int32_t* p6);


cdef extern int32_t App_iGetAreaOfInterest3D_GUI(void*, double* p1, double* p2, double* p3, double* p4, double* p5, double* p6, const int32_t* p7, const int32_t* p8);


cdef extern void IGetDATDefaults_GUI(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4, char* p5, const int32_t* p6);


cdef extern void IGetFileFilter_GUI(void*, const int32_t* p1, char* p2, const int32_t* p3, char* p4, const int32_t* p5, char* p6, const int32_t* p7, int32_t* p8);


cdef extern void IGetGSDirectory_GUI(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern int32_t App_IiBrowseDir_GUI(void*, const char* p1, const char* p2, char* p3, const int32_t* p4);


cdef extern int32_t App_IiColorTransformEx_GUI(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, char* p5, const int32_t* p6);


cdef extern int32_t App_IiCumulativePercent_GUI(void*, char* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t App_IiDatFileForm_GUI(void*, const char* p1, const char* p2, char* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern int32_t App_IiGenFileForm_GUI(void*, const char* p1, const int32_t* p2, const int32_t* p3, const char* p4, char* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8);


cdef extern int32_t App_IiCustomFileForm_GUI(void*, const char* p1, const char* p2, const char* p3, char* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern int32_t App_IiImportDrillDatabaseADO2_GUI(void*, const char* p1, char* p2, const int32_t* p3, char* p4, const int32_t* p5, int32_t* p6, const int32_t* p7);


cdef extern int32_t App_IiImportDrillDatabaseESRI_GUI(void*, const char* p1, char* p2, const int32_t* p3, char* p4, const int32_t* p5, int32_t* p6, const int32_t* p7, const int32_t* p8);


cdef extern int32_t App_IiImportDrillDatabaseODBC_GUI(void*, char* p1, const int32_t* p2, char* p3, const int32_t* p4, char* p5, const int32_t* p6, int32_t* p7, const int32_t* p8);


cdef extern int32_t App_IiImportDrillDatabaseODBCMaxwell_GUI(void*, char* p1, const int32_t* p2, char* p3, const int32_t* p4, char* p5, const int32_t* p6, int32_t* p7, const int32_t* p8);


cdef extern int32_t App_iImportAsciiWizard_GUI(void*, const char* p1, const char* p2);


cdef extern int32_t App_iImportChemDatabase_GUI(void*, const char* p1, const char* p2, char* p3, const int32_t* p4, const int32_t* p5);


cdef extern int32_t App_iImportChemDatabaseADO_GUI(void*, const char* p1, const char* p2, char* p3, const int32_t* p4, const int32_t* p5);


cdef extern int32_t App_iImportDatabase_GUI(void*, const char* p1, const char* p2, char* p3, const int32_t* p4);


cdef extern int32_t App_iImportDatabaseADO_GUI(void*, const char* p1, const char* p2, char* p3, const int32_t* p4);


cdef extern int32_t App_iImportDatabaseSQL_GUI(void*, const char* p1, const char* p2, const char* p3, char* p4, const int32_t* p5);


cdef extern int32_t App_iImportDatabaseSQLADO_GUI(void*, const char* p1, const char* p2, const char* p3, char* p4, const int32_t* p5);


cdef extern int32_t App_iImportDrillDatabaseADO_GUI(void*, const char* p1, const char* p2, char* p3, const int32_t* p4, int32_t* p5, const int32_t* p6);


cdef extern int32_t App_iImportTemplateSQL_GUI(void*, const char* p1, const char* p2, const char* p3, const char* p4);


cdef extern int32_t App_iImportTemplateSQLADO_GUI(void*, const char* p1, const char* p2, const char* p3, const char* p4);


cdef extern int32_t App_iImportXYZTemplateEditor_GUI(void*, const int32_t* p1, const char* p2, const int32_t* p3, const char* p4);


cdef extern int32_t App_IiODBCFileConnect_GUI(void*, const char* p1, char* p2, const int32_t* p3, const int32_t* p4, char* p5, const int32_t* p6);


cdef extern int32_t App_IiSymbolForm_GUI(void*, char* p1, const int32_t* p2, int32_t* p3, int32_t* p4, int32_t* p5, double* p6, double* p7, int32_t* p8, int32_t* p9);


cdef extern int32_t App_iMetaDataTool_GUI(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void App_ImportChemWizard_GUI(void*, const char* p1, const char* p2, const int32_t* p3);


cdef extern void App_ImportDrillWizard_GUI(void*, const char* p1, const char* p2, const char* p3, const int32_t* p4, int32_t* p5, const int32_t* p6);


cdef extern void App_InternetTrust_GUI(void*);


cdef extern int32_t App_iPatternForm_GUI(void*, int32_t* p1, double* p2, int32_t* p3, double* p4, int32_t* p5, int32_t* p6);


cdef extern int32_t App_iLinePatternForm_GUI(void*, int32_t* p1, double* p2, double* p3, int32_t* p4);


cdef extern int32_t App_iTwoPanelSelection_GUI(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern int32_t App_iTwoPanelSelection2_GUI(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern int32_t App_iTwoPanelSelectionEx_GUI(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5);


cdef extern int32_t App_iTwoPanelSelectionEx2_GUI(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5, const char* p6);


cdef extern void App_LaunchSingleGeoDOTNETXTool_GUI(void*, const char* p1, const char* p2, const int32_t* p3);


cdef extern void App_LaunchGeoDOTNETXTool_GUI(void*, const char* p1, const char* p2, const int32_t* p3);


cdef extern void App_LaunchGeoXTool_GUI(void*, const char* p1, const char* p2, const int32_t* p3);


cdef extern void App_LaunchSingleGeoDOTNETXToolEx_GUI(void*, const char* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void App_LaunchGeoDOTNETXToolEx_GUI(void*, const char* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void App_LaunchGeoXToolEx_GUI(void*, const char* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void App_MetaDataViewer_GUI(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void App_PrintFile_GUI(void*, const char* p1);


cdef extern void App_RenderPattern_GUI(void*, HDC p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const double* p7, const int32_t* p8, const double* p9, const int32_t* p10, const int32_t* p11, const int32_t* p12, const int32_t* p13, const int32_t* p14);


cdef extern void App_RenderLinePattern_GUI(void*, HDC p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const double* p7, const double* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11, const int32_t* p12);


cdef extern void App_SetParentWND_GUI(void*, const int32_t* p1);


cdef extern void App_SetPrinter_GUI(void*, const char* p1);


cdef extern void App_SetProgAlwaysOn_GUI(void*, const int32_t* p1);


cdef extern void App_ShowDirectHist_GUI(void*, const double* p1, const double* p2, const double* p3, const double* p4, const double* p5, const int32_t* p6, const int32_t* p7);


cdef extern void App_ShowHist_GUI(void*, const int32_t* p1);


cdef extern void App_SimpleMapDialog_GUI(void*, const int32_t* p1, const char* p2, const char* p3);


cdef extern void App_ThematicVoxelInfo_GUI(void*, const int32_t* p1);


cdef extern void App_Show3DViewerDialog_GUI(void*, const char* p1, const char* p2);



# Class HTTP


cdef extern int32_t Create_HTTP(void*, const char* p1, const char* p2, const char* p3, const char* p4);


cdef extern void Destroy_HTTP(void*, const int32_t* p1);


cdef extern void Download_HTTP(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4);


cdef extern void SilentDownload_HTTP(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4);


cdef extern void Get_HTTP(void*, const int32_t* p1, const char* p2, const char* p3, const int32_t* p4, const int32_t* p5);


cdef extern void Post_HTTP(void*, const int32_t* p1, const char* p2, const char* p3, const int32_t* p4);


cdef extern void SetProxyCredentials_HTTP(void*, const int32_t* p1, const char* p2, const char* p3);



# Class IEXP


cdef extern void AddGrid_IEXP(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern int32_t Create_IEXP(void*);


cdef extern void Destroy_IEXP(void*, const int32_t* p1);


cdef extern void DoFormula_IEXP(void*, const int32_t* p1, const char* p2, const int32_t* p3);



# Class INTERNET


cdef extern int32_t iDownloadHTTP_INTERNET(void*, const char* p1, const char* p2, const int32_t* p3);


cdef extern void SendMail_INTERNET(void*, const char* p1, const char* p2, const char* p3, const char* p4, const char* p5, const char* p6, const char* p7, const char* p8);



# Class IP

# Plot Jobs




cdef extern void ConvertUBCIP2DToGrid_IP(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, const double* p6, const double* p7, const double* p8, const int32_t* p9);


cdef extern void CreateDefaultJob_IP(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void ExportUBCIP3_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const char* p5, const char* p6, const char* p7, const double* p8);


cdef extern void ExportUBCIPControl_IP(void*, const char* p1, const int32_t* p2, const int32_t* p3, const double* p4, const char* p5, const char* p6, const char* p7, const char* p8, const char* p9, const char* p10, const char* p11, const char* p12);


cdef extern void ExportUBCIPControlV5_IP(void*, const char* p1, const int32_t* p2, const double* p3, const char* p4, const char* p5, const int32_t* p6, const char* p7, const int32_t* p8, const char* p9, const int32_t* p10, const char* p11, const int32_t* p12, const char* p13, const int32_t* p14, const char* p15, const char* p16);


cdef extern void ExportUBCRes3_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const char* p5, const char* p6, const char* p7, const char* p8, const double* p9);


cdef extern void ExportUBCResControl_IP(void*, const char* p1, const int32_t* p2, const int32_t* p3, const double* p4, const char* p5, const char* p6, const char* p7, const char* p8, const double* p9, const char* p10, const char* p11);


cdef extern void ExportUBCResControlV5_IP(void*, const char* p1, const int32_t* p2, const double* p3, const char* p4, const char* p5, const int32_t* p6, const char* p7, const int32_t* p8, const char* p9, const int32_t* p10, const char* p11, const int32_t* p12, const char* p13, const char* p14);


cdef extern void ExportDataToUBC3D_IP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const char* p6, const char* p7, const char* p8, const int32_t* p9, const char* p10, const char* p11);


cdef extern int32_t ImportUBC2DMOD_IP(void*, const char* p1, const int32_t* p2);


cdef extern void ImportUBC2DMSH_IP(void*, const char* p1, double* p2, double* p3, const int32_t* p4, const int32_t* p5);


cdef extern void ImportUBC2DTopo_IP(void*, const char* p1, double* p2, const int32_t* p3, const int32_t* p4);


cdef extern void OpenJob_IP(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void SaveJob_IP(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern int32_t TrimUBC2DModel_IP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, double* p7);


cdef extern void WriteDistantElectrodes_IP(void*, const int32_t* p1, const int32_t* p2);


cdef extern void WriteDistantElectrodesLST_IP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


# Miscellaneous




cdef extern void AverageDuplicatesQC_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const int32_t* p5);


cdef extern int32_t Create_IP(void*);


cdef extern void Destroy_IP(void*, const int32_t* p1);


cdef extern void ExportI2X_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const char* p5, const char* p6, const char* p7, const char* p8, const char* p9, const char* p10, const char* p11, const char* p12);


cdef extern void ExportIPDATA_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4);


cdef extern void ExportIPDATADir_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const char* p5);


cdef extern void ExportIPRED_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const char* p5, const int32_t* p6, const char* p7, const double* p8, const double* p9, const int32_t* p10);


cdef extern void ExportIPREDDir_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const char* p5, const int32_t* p6, const char* p7, const double* p8, const double* p9, const int32_t* p10, const char* p11);


cdef extern void ExportLineIPDATA_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const char* p5);


cdef extern void ExportSGDF_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const char* p5);


cdef extern void GetNValueLST_IP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void GetTopoLine_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const double* p4, const double* p5, const double* p6, const int32_t* p7);


cdef extern int32_t iGetChanDomain_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void IGetChanLabel_IP(void*, const char* p1, char* p2, const int32_t* p3, char* p4, const int32_t* p5);


cdef extern void GetChannelInfo_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, int32_t* p4, double* p5, int32_t* p6, const int32_t* p7);


cdef extern void SetChannelInfo_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const int32_t* p4, const double* p5, const int32_t* p6, const int32_t* p7);


cdef extern void ImportDump_IP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4);


cdef extern void ImportGrid_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4);


cdef extern void ImportI2X_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const char* p5, const char* p6, const char* p7, const char* p8, const char* p9, const char* p10, const char* p11, const char* p12, const int32_t* p13);


cdef extern void ImportI2XEx_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const char* p5, const char* p6, const char* p7, const char* p8, const char* p9, const char* p10, const char* p11, const char* p12, const char* p13, const char* p14, const int32_t* p15);


cdef extern void ImportInstrumentationGDD_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void ImportIPDATA_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4);


cdef extern void ImportIPDATA2_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const char* p5);


cdef extern void ImportIPRED_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4);


cdef extern void ImportMergeIPRED_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4);


cdef extern void ImportSGDF_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void ImportTopoCSV_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void ImportTopoGrid_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void ImportZongeAVG_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const double* p4, const int32_t* p5, const double* p6);


cdef extern void ImportZongeFLD_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const int32_t* p4, const double* p5);


cdef extern void NewXYDatabase_IP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5, const double* p6);


cdef extern void PseudoPlot_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const char* p5);


cdef extern void PseudoPlot2_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const char* p5, const char* p6);


cdef extern void PseudoPlot2Dir_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const char* p5, const char* p6, const char* p7);


cdef extern void PSStack_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const char* p5);


cdef extern void PSStack2_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const int32_t* p5, const char* p6);


cdef extern void PSStack2Dir_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const int32_t* p5, const char* p6, const char* p7);


cdef extern void QCChanLST_IP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void Recalculate_IP(void*, const int32_t* p1, const int32_t* p2);


cdef extern void RecalculateEx_IP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void RecalculateZ_IP(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetImportLine_IP(void*, const int32_t* p1, const char* p2);


cdef extern void SetImportMode_IP(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Window_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const char* p5);


cdef extern void WinnowChanList_IP(void*, const int32_t* p1);


cdef extern void WinnowChanList2_IP(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t isValidLine_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern int32_t iLineArrayType_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern double rASpacing_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern int32_t iPLDPConvention_IP(void*, const int32_t* p1);


cdef extern void GetElectrodeLocationsAndMaskValues_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8);


cdef extern void GetElectrodeLocationsAndMaskValues2_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9);


cdef extern void SetElectrodeMaskValues_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8);


cdef extern void SetElectrodeMaskValuesSingleQCChannel_IP(void*, const int32_t* p1, const int32_t* p2, const char* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8);


cdef extern int32_t GetQCChannel_IP(void*, const int32_t* p1, const int32_t* p2, char* p3, const int32_t* p4);




# Class IPGUI


cdef extern int32_t iModifyJob_IPGUI(void*, const int32_t* p1, const int32_t* p2, const char* p3, const int32_t* p4, int32_t* p5);


cdef extern void LaunchIPQCTool_IPGUI(void*, const char* p1, const char* p2, const char* p3);


cdef extern void LaunchOffsetIPQCTool_IPGUI(void*, const char* p1, const char* p2, const char* p3);


cdef extern int32_t iIPQCToolExists_IPGUI(void*);



# Class KGRD


cdef extern void _Clear_KGRD(void*, const int32_t* p1);


cdef extern int32_t Create_KGRD(void*);


cdef extern void Destroy_KGRD(void*, const int32_t* p1);


cdef extern int32_t iLoadParms_KGRD(void*, const int32_t* p1, const char* p2);


cdef extern int32_t iRun_KGRD(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const char* p6, const char* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10);


cdef extern int32_t iRun2_KGRD(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const char* p5, const char* p6, const char* p7, const char* p8, const char* p9, const int32_t* p10);


cdef extern int32_t iRun3_KGRD(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const char* p5, const char* p6, const char* p7, const char* p8, const char* p9, const char* p10, const int32_t* p11);


cdef extern int32_t iSaveParms_KGRD(void*, const int32_t* p1, const char* p2);



# Class LMSG


cdef extern void GotoPoint_LMSG(void*, const double* p1, const double* p2, const double* p3, const int32_t* p4);


cdef extern void ViewArea_LMSG(void*, const double* p1, const double* p2, const double* p3, const double* p4, const int32_t* p5);



# Class MISC


cdef extern void ConvertCG3toRAW_MISC(void*, const char* p1, const char* p2, const int32_t* p3);


cdef extern void ConvertCG5toRAW_MISC(void*, const char* p1, const char* p2, const int32_t* p3);


cdef extern void Ukoa2Tbl_MISC(void*, const char* p1, const char* p2, const char* p3);



# Class MSTK


cdef extern int32_t AddSTK_MSTK(void*, const int32_t* p1);


cdef extern void ChanListVV_MSTK(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern int32_t Create_MSTK(void*);


cdef extern void Destroy_MSTK(void*, const int32_t* p1);


cdef extern void DrawProfile_MSTK(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void SetYAxisDirection_MSTK(void*, const int32_t* p1, const int32_t* p2);


cdef extern void FindSTK2_MSTK(void*, const int32_t* p1, const char* p2, int32_t* p3, const int32_t* p4);


cdef extern int32_t GetSTK_MSTK(void*, const int32_t* p1, const int32_t* p2);


cdef extern void IDelete_MSTK(void*, const int32_t* p1, const int32_t* p2);


cdef extern void IFindSTK_MSTK(void*, const int32_t* p1, const char* p2, int32_t* p3, char* p4, const int32_t* p5, char* p6, const int32_t* p7, char* p8, const int32_t* p9);


cdef extern int32_t iGetNumSTK_MSTK(void*, const int32_t* p1);


cdef extern void ReadINI_MSTK(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SaveProfile_MSTK(void*, const int32_t* p1, const int32_t* p2);



# Class MULTIVOXSET


cdef extern void ImportFromXYZ_MULTIVOXSET(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void ExportToXYZ_MULTIVOXSET(void*, const char* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void ExportToBinary_MULTIVOXSET(void*, const char* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8);


cdef extern void ExportToXML_MULTIVOXSET(void*, const char* p1, const char* p2);


cdef extern void CheckEqualToLegacyVoxel_MULTIVOXSET(void*, const char* p1, const char* p2);


cdef extern void ImportFromUBC_MULTIVOXSET(void*, const char* p1, const char* p2, const char* p3, const double* p4, const int32_t* p5);


cdef extern void ImportFromGOCAD_MULTIVOXSET(void*, const char* p1, const char* p2, const char* p3, const int32_t* p4, const int32_t* p5);


cdef extern void ListPropertiesGOCAD_MULTIVOXSET(void*, const char* p1, const int32_t* p2);


cdef extern void ImportFromGDB_MULTIVOXSET(void*, const char* p1, const int32_t* p2, const int32_t* p3);


cdef extern void ImportFromVectorGDB_MULTIVOXSET(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const double* p7, const double* p8);


cdef extern void ExportToSEGY_MULTIVOXSET(void*, const char* p1, const char* p2, const char* p3, const double* p4);


cdef extern void ExportToGDB_MULTIVOXSET(void*, const char* p1, const int32_t* p2, const char* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8);


cdef extern void ExportToWA_MULTIVOXSET(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const char* p7);


cdef extern void ConvertDoubleToVector_MULTIVOXSET(void*, const char* p1, const char* p2, const char* p3, const char* p4, const double* p5, const double* p6, const int32_t* p7);


cdef extern void ConvertVectorToDouble_MULTIVOXSET(void*, const char* p1, const char* p2, const char* p3, const char* p4);


cdef extern void CreateDoubleConstant_MULTIVOXSET(void*, const char* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11, const int32_t* p12);


cdef extern void CreateThematicConstant_MULTIVOXSET(void*, const char* p1, const int32_t* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11, const int32_t* p12);


cdef extern void CreateVectorConstant_MULTIVOXSET(void*, const char* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10, const int32_t* p11, const int32_t* p12, const int32_t* p13, const int32_t* p14);


cdef extern void CreateDoubleConstantVV_MULTIVOXSET(void*, const char* p1, const double* p2, const double* p3, const double* p4, const double* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9);


cdef extern void CreateThematicConstantVV_MULTIVOXSET(void*, const char* p1, const int32_t* p2, const double* p3, const double* p4, const double* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9);


cdef extern void CreateVectorConstantVV_MULTIVOXSET(void*, const char* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11);


cdef extern void ExportToVoxel_MULTIVOXSET(void*, const char* p1, const char* p2, const char* p3, const char* p4);


cdef extern void ImportFromVoxel_MULTIVOXSET(void*, const char* p1, const char* p2, const char* p3, char* p4, const int32_t* p5);


cdef extern void ImportFromDATAMINE_MULTIVOXSET(void*, const char* p1, const char* p2, const int32_t* p3, const char* p4);


cdef extern double rComputeDefaultCellSize_MULTIVOXSET(void*, const double* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6);


cdef extern void Filter_MULTIVOXSET(void*, const char* p1, const char* p2, const int32_t* p3, const char* p4, const int32_t* p5, const int32_t* p6);


cdef extern void GridDirectFromGDB_MULTIVOXSET(void*, const char* p1, const double* p2, const double* p3, const double* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const double* p8, const double* p9, const double* p10, const int32_t* p11, const int32_t* p12, const int32_t* p13, const int32_t* p14, const int32_t* p15, const int32_t* p16);



# Class MVG


cdef extern void AxisX_MVG(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7);


cdef extern void AxisY_MVG(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7);


cdef extern int32_t Create_MVG(void*, const int32_t* p1, const char* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10);


cdef extern void Destroy_MVG(void*, const int32_t* p1);


cdef extern int32_t GetMVIEW_MVG(void*, const int32_t* p1);


cdef extern void Grid_MVG(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const int32_t* p8);


cdef extern void LabelX_MVG(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8);


cdef extern void LabelY_MVG(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8);


cdef extern void PolyLineVA_MVG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void PolyLineVV_MVG(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void RescaleXRange_MVG(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const double* p5);


cdef extern void RescaleYRange_MVG(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const double* p5);



# Class PDF3D


cdef extern void Render_PDF3D(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4);


cdef extern void RenderToPage_PDF3D(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void Export2D_PDF3D(void*, const char* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);



# Class PGEXP


cdef extern void AddPager_PGEXP(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern int32_t Create_PGEXP(void*);


cdef extern void Destroy_PGEXP(void*, const int32_t* p1);


cdef extern void DoFormula_PGEXP(void*, const int32_t* p1, const char* p2, const int32_t* p3);



# Class PGU

# General




cdef extern void Bool_PGU(void*, const int32_t* p1, const char* p2);


cdef extern void DirectGriddingDAT_PGU(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const int32_t* p7, const int32_t* p8);


cdef extern void DirectGriddingDAT3D_PGU(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const int32_t* p9, const int32_t* p10);


cdef extern void DirectGriddingDB_PGU(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11);


cdef extern void DirectGriddingDB3D_PGU(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11, const int32_t* p12, const int32_t* p13, const int32_t* p14);


cdef extern void DirectGriddingVV_PGU(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10);


cdef extern void Expand_PGU(void*, const int32_t* p1, const int32_t* p2, const double* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void Fill_PGU(void*, const int32_t* p1, const int32_t* p2, const double* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const double* p7, const double* p8, const int32_t* p9, const int32_t* p10, const char* p11);


cdef extern void FillValue_PGU(void*, const int32_t* p1, const double* p2);


cdef extern void FiltSym_PGU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4, const int32_t* p5, const int32_t* p6);


cdef extern void FiltSym5_PGU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4, const int32_t* p5);


cdef extern void GridPeak_PGU(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void IDWGriddingDAT_PGU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void IDWGriddingDAT3D_PGU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void IDWGriddingDB_PGU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void IDWGriddingDB3D_PGU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7);


cdef extern void IDWGriddingVV_PGU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void NumericToThematic_PGU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void Peakedness_PGU(void*, const char* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void PeakednessGrid_PGU(void*, const char* p1, const char* p2, const int32_t* p3, const double* p4);


cdef extern void RefFile_PGU(void*, const int32_t* p1, const char* p2);


cdef extern void SaveFile_PGU(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const int32_t* p7, const int32_t* p8, const char* p9);


cdef extern void ThematicToNumeric_PGU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void Trend_PGU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const double* p6, const double* p7, const double* p8, const double* p9);


# Math Operations




cdef extern void AddScalar_PGU(void*, const int32_t* p1, const double* p2);


cdef extern void MultiplyScalar_PGU(void*, const int32_t* p1, const double* p2);


# Matrix Operation




cdef extern void CorrelationMatrix_PGU(void*, const int32_t* p1, const int32_t* p2);


cdef extern void CorrelationMatrix2_PGU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void InvertMatrix_PGU(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Jacobi_PGU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void LUBackSub_PGU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void LUDecomp_PGU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void MatrixMult_PGU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void MatrixVectorMult_PGU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SVDecompose_PGU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void SVRecompose_PGU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const int32_t* p5);


# Principal Component Analysis




cdef extern void PCCommunality_PGU(void*, const int32_t* p1, const int32_t* p2);


cdef extern void PCLoadings_PGU(void*, const int32_t* p1, const int32_t* p2);


cdef extern void PCLoadings2_PGU(void*, const int32_t* p1, const int32_t* p2);


cdef extern void PCScores_PGU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void PCStandardize_PGU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void PCStandardize2_PGU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void PCTransform_PGU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void PCVarimax_PGU(void*, const int32_t* p1, const int32_t* p2);


# Specialized Operations




cdef extern double rMaximumTerrainSteepness_PGU(void*, const int32_t* p1, const int32_t* p2);




# Class PRAGA3


cdef extern int32_t iLaunch_PRAGA3(void*);



# Class PROJ

# Drag-and-drop methods




cdef extern void App_DropMapClipData_PROJ(void*, const int32_t* p1);


# Miscellaneous




cdef extern int32_t App_iAddDocument_PROJ(void*, const char* p1, const char* p2, const int32_t* p3);


cdef extern int32_t App_iAddDocumentWithoutOpening_PROJ(void*, const char* p1, const char* p2);


cdef extern int32_t App_iGetCommandEnvironment_PROJ(void*);


cdef extern int32_t App_iListDocuments_PROJ(void*, const int32_t* p1, const char* p2);


cdef extern int32_t App_iListLoadedDocuments_PROJ(void*, const int32_t* p1, const char* p2);


cdef extern void App_ICurrentDocument_PROJ(void*, char* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern void App_ICurrentDocumentOfType_PROJ(void*, char* p1, const int32_t* p2, const char* p3);


cdef extern int32_t App_iListTools_PROJ(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t App_iRemoveDocument_PROJ(void*, const char* p1);


cdef extern int32_t App_iRemoveTool_PROJ(void*, const char* p1);


cdef extern int32_t App_iSaveCloseDocuments_PROJ(void*, const char* p1);


cdef extern void App_IGetName_PROJ(void*, char* p1, const int32_t* p2);




# Class RGRD


cdef extern void _Clear_RGRD(void*, const int32_t* p1);


cdef extern int32_t Create_RGRD(void*);


cdef extern int32_t CreateIMG_RGRD(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5, const char* p6);


cdef extern void Destroy_RGRD(void*, const int32_t* p1);


cdef extern int32_t iDefault_RGRD(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern int32_t iLoadParms_RGRD(void*, const int32_t* p1, const char* p2);


cdef extern int32_t iRun_RGRD(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t iRun2_RGRD(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const char* p5, const char* p6);


cdef extern int32_t iSaveParms_RGRD(void*, const int32_t* p1, const char* p2);


cdef extern void RunVV_RGRD(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5, const char* p6);



# Class SEMPLOT


cdef extern void ApplyFilterToMask_SEMPLOT(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const char* p5, const int32_t* p6);


cdef extern void ConvertDummies_SEMPLOT(void*, const int32_t* p1, const int32_t* p2);


cdef extern void CreateGroups_SEMPLOT(void*, const int32_t* p1, const char* p2);


cdef extern void DefaultGroups_SEMPLOT(void*, const int32_t* p1);


cdef extern void EditMapPlotParameters_SEMPLOT(void*, const int32_t* p1, const char* p2, const char* p3, const int32_t* p4, const char* p5);


cdef extern void EditPlotComponents_SEMPLOT(void*, const int32_t* p1, const char* p2);


cdef extern void EditPlotParameters_SEMPLOT(void*, const int32_t* p1, const char* p2);


cdef extern void ExportOverlay_SEMPLOT(void*, const char* p1, const char* p2, const int32_t* p3, const char* p4, const int32_t* p5, const char* p6, const char* p7, const char* p8, const char* p9, const char* p10, const char* p11, const int32_t* p12);


cdef extern void ExportView_SEMPLOT(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5, const char* p6, const char* p7);


cdef extern void ExportView2_SEMPLOT(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const char* p5, const char* p6, const char* p7, const int32_t* p8);


cdef extern void FilterLST_SEMPLOT(void*, const int32_t* p1);


cdef extern void FilterMineralPosData_SEMPLOT(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const int32_t* p5);


cdef extern void GetAssociatedLST_SEMPLOT(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void GetCurrentMineralLST_SEMPLOT(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern void GetCurrentPositionLST_SEMPLOT(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetFullMineralLST_SEMPLOT(void*, const int32_t* p1);


cdef extern void GetFullPositionLST_SEMPLOT(void*, const int32_t* p1);


cdef extern void GetGroupingLST_SEMPLOT(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iCreateASCIITemplate_SEMPLOT(void*, const char* p1, const char* p2);


cdef extern int32_t iCreateDatabaseTemplate_SEMPLOT(void*, const char* p1, const char* p2);


cdef extern int32_t iEditFilter_SEMPLOT(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const char* p5);


cdef extern void IGetMineralChannelName_SEMPLOT(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void IImportAsciiWizard_SEMPLOT(void*, const char* p1, const char* p2, char* p3, const int32_t* p4);


cdef extern void IImportDatabaseODBC_SEMPLOT(void*, char* p1, const int32_t* p2, char* p3, const int32_t* p4);


cdef extern void ImportBIN_SEMPLOT(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const int32_t* p5, const double* p6);


cdef extern void ImportDatabaseADO_SEMPLOT(void*, const char* p1, const char* p2);


cdef extern void InitGroupSymbolsUsed_SEMPLOT(void*, const int32_t* p1);


cdef extern int32_t iTemplateType_SEMPLOT(void*, const char* p1);


cdef extern int32_t iViewType_SEMPLOT(void*, const int32_t* p1, const char* p2);


cdef extern void MineralID_SEMPLOT(void*, const int32_t* p1, const double* p2, const int32_t* p3, const int32_t* p4);


cdef extern void NewFilter_SEMPLOT(void*, const char* p1, const char* p2);


cdef extern void NewTemplate_SEMPLOT(void*, const char* p1, const int32_t* p2, const char* p3);


cdef extern void OverlayLST_SEMPLOT(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void Plot_SEMPLOT(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const char* p5, const int32_t* p6, const int32_t* p7);


cdef extern void PlotSymbolLegend_SEMPLOT(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const double* p5, const double* p6);


cdef extern void PropSymb_SEMPLOT(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const char* p5, const char* p6, const int32_t* p7, const int32_t* p8, const double* p9, const double* p10, const int32_t* p11, const int32_t* p12, const int32_t* p13, const int32_t* p14, const int32_t* p15);


cdef extern void Replot_SEMPLOT(void*, const int32_t* p1, const char* p2, const char* p3, const int32_t* p4, const char* p5);


cdef extern void RePlotSymbolLegend_SEMPLOT(void*, const int32_t* p1, const int32_t* p2);


cdef extern void ResetGroups_SEMPLOT(void*, const int32_t* p1, const char* p2);


cdef extern void ResetUsedChannel_SEMPLOT(void*, const int32_t* p1);


cdef extern void SelectPoly_SEMPLOT(void*, const int32_t* p1, const int32_t* p2, const char* p3, const char* p4, const int32_t* p5, const int32_t* p6);


cdef extern void SetChannelOrder_SEMPLOT(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetChannelUnits_SEMPLOT(void*, const int32_t* p1);


cdef extern void SetITR_SEMPLOT(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetMask_SEMPLOT(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const int32_t* p5, const int32_t* p6);


cdef extern void SortData_SEMPLOT(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void TemplateLST_SEMPLOT(void*, const int32_t* p1, const int32_t* p2);


cdef extern void TileWindows_SEMPLOT(void*);


cdef extern void TotalOxides_SEMPLOT(void*, const int32_t* p1, const char* p2);



# Class SHP


cdef extern void AppendItem_SHP(void*, const int32_t* p1);


cdef extern int32_t Create_SHP(void*, const char* p1, const int32_t* p2);


cdef extern void Destroy_SHP(void*, const int32_t* p1);


cdef extern int32_t iAddIntField_SHP(void*, const int32_t* p1, const char* p2);


cdef extern int32_t iAddRealField_SHP(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern int32_t iAddStringField_SHP(void*, const int32_t* p1, const char* p2, const int32_t* p3);


cdef extern int32_t iFindField_SHP(void*, const int32_t* p1, const char* p2);


cdef extern int32_t iMaxIDNum_SHP(void*, const int32_t* p1);


cdef extern int32_t iNumFields_SHP(void*, const int32_t* p1);


cdef extern int32_t iNumRecords_SHP(void*, const int32_t* p1);


cdef extern int32_t iType_SHP(void*, const int32_t* p1);


cdef extern int32_t Open_SHP(void*, const char* p1);


cdef extern void SetArc_SHP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetArcZ_SHP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void SetInt_SHP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetIPJ_SHP(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetPoint_SHP(void*, const int32_t* p1, const double* p2, const double* p3);


cdef extern void SetPointZ_SHP(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4);


cdef extern void SetPolygon_SHP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void SetPolygonZ_SHP(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void SetReal_SHP(void*, const int32_t* p1, const int32_t* p2, const double* p3);


cdef extern void SetString_SHP(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern void WriteItem_SHP(void*, const int32_t* p1);



# Class SQLSRV


cdef extern int32_t iAttachMDF_SQLSRV(void*, const char* p1, const char* p2, const char* p3, const char* p4, const char* p5, const char* p6);


cdef extern int32_t iDetachDB_SQLSRV(void*, const char* p1, const char* p2, const char* p3, const char* p4);


cdef extern int32_t iGetDatabaseLanguagesLST_SQLSRV(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const int32_t* p5);


cdef extern int32_t iGetDatabasesLST_SQLSRV(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const int32_t* p5);


cdef extern void IGetLoginGUI_SQLSRV(void*, const char* p1, char* p2, const int32_t* p3, char* p4, const int32_t* p5, const int32_t* p6, int32_t* p7);


cdef extern int32_t iGetServersLST_SQLSRV(void*, const int32_t* p1);



# Class STK


cdef extern void GetTransParms_STK(void*, const int32_t* p1, int32_t* p2, double* p3, const int32_t* p4, const int32_t* p5, int32_t* p6, double* p7, const int32_t* p8, const int32_t* p9);


cdef extern int32_t iGetAxisFormat_STK(void*, const int32_t* p1, const int32_t* p2);


cdef extern void IGetAxisParms_STK(void*, const int32_t* p1, int32_t* p2, double* p3, double* p4, double* p5, char* p6, const int32_t* p7, double* p8, double* p9, double* p10, int32_t* p11, const int32_t* p12);


cdef extern void IGetFidParms_STK(void*, const int32_t* p1, double* p2, double* p3, double* p4, char* p5, const int32_t* p6, double* p7, char* p8, const int32_t* p9);


cdef extern int32_t iGetFlag_STK(void*, const int32_t* p1, const int32_t* p2);


cdef extern void IGetGenParms_STK(void*, const int32_t* p1, char* p2, const int32_t* p3, char* p4, const int32_t* p5, char* p6, const int32_t* p7, double* p8, double* p9, double* p10, double* p11, double* p12, double* p13, double* p14, double* p15);


cdef extern void IGetGridParms_STK(void*, const int32_t* p1, int32_t* p2, double* p3, double* p4, double* p5, double* p6, double* p7, double* p8, double* p9, double* p10, char* p11, const int32_t* p12, const int32_t* p13);


cdef extern void IGetLabelParms_STK(void*, const int32_t* p1, int32_t* p2, double* p3, int32_t* p4, double* p5, int32_t* p6, double* p7, char* p8, const int32_t* p9, double* p10, char* p11, const int32_t* p12, int32_t* p13, const int32_t* p14);


cdef extern void IGetProfile_STK(void*, const int32_t* p1, int32_t* p2, double* p3, double* p4, char* p5, const int32_t* p6, int32_t* p7, int32_t* p8, int32_t* p9, const int32_t* p10, char* p11, const int32_t* p12, int32_t* p13, char* p14, const int32_t* p15, double* p16, char* p17, const int32_t* p18, int32_t* p19);


cdef extern void IGetProfileEx_STK(void*, const int32_t* p1, int32_t* p2, double* p3, double* p4, char* p5, const int32_t* p6, int32_t* p7, int32_t* p8, int32_t* p9, int32_t* p10, const int32_t* p11, char* p12, const int32_t* p13, int32_t* p14, char* p15, const int32_t* p16, double* p17, char* p18, const int32_t* p19, int32_t* p20);


cdef extern void IGetSymbParms_STK(void*, const int32_t* p1, char* p2, const int32_t* p3, double* p4, char* p5, const int32_t* p6, char* p7, const int32_t* p8, int32_t* p9, int32_t* p10, double* p11, int32_t* p12, const int32_t* p13, const int32_t* p14, int32_t* p15, char* p16, const int32_t* p17, double* p18, char* p19, const int32_t* p20);


cdef extern void IGetTitleParms_STK(void*, const int32_t* p1, char* p2, const int32_t* p3, char* p4, const int32_t* p5, int32_t* p6, double* p7, double* p8, int32_t* p9, double* p10, double* p11, char* p12, const int32_t* p13, double* p14, char* p15, const int32_t* p16, const int32_t* p17);


cdef extern void ISetFlag_STK(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetArrayColors_STK(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetAxisFormat_STK(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void SetAxisParms_STK(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const double* p5, const char* p6, const double* p7, const double* p8, const double* p9, const int32_t* p10, const int32_t* p11);


cdef extern void SetFidParms_STK(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const char* p5, const double* p6, const char* p7);


cdef extern void SetGenParms_STK(void*, const int32_t* p1, const char* p2, const char* p3, const char* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10, const double* p11, const double* p12);


cdef extern void SetGridParms_STK(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10, const char* p11, const int32_t* p12);


cdef extern void SetLabelParms_STK(void*, const int32_t* p1, const int32_t* p2, const double* p3, const int32_t* p4, const double* p5, const int32_t* p6, const double* p7, const char* p8, const double* p9, const char* p10, const int32_t* p11, const int32_t* p12);


cdef extern void SetLineParm_STK(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetProfile_STK(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const char* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const char* p10, const int32_t* p11, const char* p12, const double* p13, const char* p14, const int32_t* p15);


cdef extern void SetProfileEx_STK(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const char* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10, const char* p11, const int32_t* p12, const char* p13, const double* p14, const char* p15, const int32_t* p16);


cdef extern void SetSymbParms_STK(void*, const int32_t* p1, const char* p2, const double* p3, const char* p4, const char* p5, const int32_t* p6, const int32_t* p7, const double* p8, const int32_t* p9, const int32_t* p10, const int32_t* p11, const int32_t* p12, const char* p13, const double* p14, const char* p15);


cdef extern void SetTitleParms_STK(void*, const int32_t* p1, const char* p2, const char* p3, const int32_t* p4, const double* p5, const double* p6, const int32_t* p7, const double* p8, const double* p9, const char* p10, const double* p11, const char* p12, const int32_t* p13);


cdef extern void SetTransParms_STK(void*, const int32_t* p1, const int32_t* p2, const double* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const double* p7, const int32_t* p8, const int32_t* p9);


cdef extern void SetVAIndexStart_STK(void*, const int32_t* p1, const int32_t* p2);



# Class STRINGS


cdef extern void LaunchDigitizationUI_STRINGS(void*, const char* p1, const char* p2);



# Class TC


cdef extern int32_t Create_TC(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const int32_t* p8, const double* p9, const int32_t* p10);


cdef extern int32_t CreateEx_TC(void*, const int32_t* p1, const double* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const int32_t* p8, const double* p9, const int32_t* p10, const int32_t* p11);


cdef extern void Destroy_TC(void*, const int32_t* p1);


cdef extern void Grregter_TC(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void Grterain_TC(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const double* p8);


cdef extern void Grterain2_TC(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const double* p9);


cdef extern void GGterain_TC(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const double* p6, const double* p7, const int32_t* p8);



# Class TEST


cdef extern void EnableDisableArcEngineLicense_TEST(void*, const int32_t* p1);


cdef extern int32_t iArcEngineLicense_TEST(void*);


cdef extern int32_t iTestMode_TEST(void*);


cdef extern void WrapperTest_TEST(void*, const char* p1, const char* p2);


cdef extern void CoreClass_TEST(void*, const char* p1, const char* p2);



# Class TIN


cdef extern void Copy_TIN(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t Create_TIN(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t CreateS_TIN(void*, const int32_t* p1);


cdef extern void Destroy_TIN(void*, const int32_t* p1);


cdef extern void ExportXML_TIN(void*, const char* p1, int32_t* p2, const char* p3);


cdef extern void GetConvexHull_TIN(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetIPJ_TIN(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetJoins_TIN(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void GetMesh_TIN(void*, const int32_t* p1, const int32_t* p2);


cdef extern void GetNodes_TIN(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void GetTriangles_TIN(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void GetTriangle_TIN(void*, const int32_t* p1, const int32_t* p2, double* p3, double* p4, double* p5, double* p6, double* p7, double* p8);


cdef extern void GetVoronoiEdges_TIN(void*, const int32_t* p1, const int32_t* p2);


cdef extern int32_t iIsZValued_TIN(void*, const int32_t* p1);


cdef extern int32_t iLocateTriangle_TIN(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4);


cdef extern int32_t iNodes_TIN(void*, const int32_t* p1);


cdef extern void InterpVV_TIN(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern int32_t iTriangles_TIN(void*, const int32_t* p1);


cdef extern void LinearInterpVV_TIN(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void NearestVV_TIN(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void RangeXY_TIN(void*, const int32_t* p1, double* p2, double* p3, double* p4, double* p5);


cdef extern void Serial_TIN(void*, const int32_t* p1, const int32_t* p2);


cdef extern void SetIPJ_TIN(void*, const int32_t* p1, const int32_t* p2);



# Class TRND


cdef extern void GetMaxMin_TRND(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6, const double* p7, const int32_t* p8);


cdef extern void GetMesh_TRND(void*, const int32_t* p1, const char* p2, const double* p3, const double* p4, const int32_t* p5, const int32_t* p6);


cdef extern void TrndDB_TRND(void*, const int32_t* p1, const char* p2, const double* p3, const double* p4, const double* p5, const double* p6, const double* p7, const double* p8, const double* p9, const double* p10);



# Class UNC


cdef extern int32_t iIsValidUTF16Char_UNC(void*, const int32_t* p1);


cdef extern int32_t iValidSymbol_UNC(void*, const char* p1, const int32_t* p2, const int32_t* p3);


cdef extern void UTF16ValToSTR_UNC(void*, const int32_t* p1, char* p2, const int32_t* p3);


cdef extern void ValidateSymbols_UNC(void*, const int32_t* p1, const char* p2, const int32_t* p3);



# Class VAU


cdef extern void Prune_VAU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void TotalVector_VAU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);



# Class VVEXP


cdef extern void AddVV_VVEXP(void*, const int32_t* p1, const int32_t* p2, const char* p3);


cdef extern int32_t Create_VVEXP(void*);


cdef extern void Destroy_VVEXP(void*, const int32_t* p1);


cdef extern void DoFormula_VVEXP(void*, const int32_t* p1, const char* p2, const int32_t* p3);



# Class VVU


cdef extern void AverageRepeat_VVU(void*, const int32_t* p1, const int32_t* p2);


cdef extern void AverageRepeatEx_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void AverageRepeat2_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void AverageRepeat2Ex_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void BinarySearch_VVU(void*, const int32_t* p1, const double* p2, int32_t* p3, int32_t* p4);


cdef extern void BoxCox_VVU(void*, const int32_t* p1, const double* p2);


cdef extern void BPFilt_VVU(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const int32_t* p5);


cdef extern void Clip_VVU(void*, const int32_t* p1, const double* p2, const double* p3, const int32_t* p4);


cdef extern void ClipToDetectLimit_VVU(void*, const int32_t* p1, const double* p2, const int32_t* p3);


cdef extern void Decimate_VVU(void*, const int32_t* p1, const int32_t* p2);


cdef extern void Deviation_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const double* p5, const double* p6, const double* p7, const int32_t* p8);


cdef extern void Distance_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const double* p5, const double* p6, const double* p7);


cdef extern void DistanceNonCumulative_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const double* p5, const double* p6, const double* p7);


cdef extern void Distance3D_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const int32_t* p5);


cdef extern void FindGaps3D_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const int32_t* p5);


cdef extern void DummyRange_VVU(void*, const int32_t* p1, const double* p2, const double* p3, const int32_t* p4, const int32_t* p5);


cdef extern void DummyRangeEx_VVU(void*, const int32_t* p1, const double* p2, const double* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void DummyRepeat_VVU(void*, const int32_t* p1, const int32_t* p2);


cdef extern void DupStats_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void ExpDist_VVU(void*, const int32_t* p1, const int32_t* p2, const double* p3, const int32_t* p4);


cdef extern void Filter_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void FindStringItems_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void FractalFilter_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern int32_t iCloseXY_VVU(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4);


cdef extern int32_t iCloseXYM_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const double* p5);


cdef extern int32_t iCloseXYZ_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const double* p5, const double* p6);


cdef extern int32_t iCloseXYZM_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, const double* p6, const double* p7);


cdef extern int32_t iDummyBackTracks_VVU(void*, const int32_t* p1);


cdef extern int32_t iFindDummy_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void Interp_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern int32_t iQCFillGaps_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5);


cdef extern int32_t iSearchText_VVU(void*, const int32_t* p1, const char* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void Mask_VVU(void*, const int32_t* p1, const int32_t* p2);


cdef extern void MaskAND_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void MaskOR_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void NLFilt_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4);


cdef extern void NoiseCheck_VVU(void*, const int32_t* p1, const int32_t* p2, const double* p3, const int32_t* p4);


cdef extern void NoiseCheck2_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const int32_t* p5);


cdef extern void NormalDist_VVU(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const int32_t* p5);


cdef extern void OffsetCircles_VVU(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const int32_t* p5, const int32_t* p6);


cdef extern void OffsetCorrect_VVU(void*, const int32_t* p1, const int32_t* p2, const double* p3, const int32_t* p4, const int32_t* p5, const int32_t* p6);


cdef extern void OffsetCorrect2_VVU(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const int32_t* p5, const int32_t* p6);


cdef extern void OffsetCorrect3_VVU(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const double* p5, const int32_t* p6, const int32_t* p7);


cdef extern void OffsetCorrectXYZ_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const double* p5, const double* p6, const double* p7, const int32_t* p8, const int32_t* p9, const int32_t* p10);


cdef extern void OffsetRectangles_VVU(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const double* p5, const int32_t* p6, const int32_t* p7);


cdef extern void PickPeak_VVU(void*, const int32_t* p1, const int32_t* p2, const double* p3, const int32_t* p4);


cdef extern void PickPeak2_VVU(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4);


cdef extern void PickPeak3_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const double* p5, const int32_t* p6, const int32_t* p7, const int32_t* p8, const int32_t* p9);


cdef extern void PolyFill_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void PolyFill2_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void PolygonMask_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void Prune_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void QC_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const double* p4, const double* p5, const double* p6, const double* p7, const int32_t* p8);


cdef extern void RangeVectorMag_VVU(void*, const int32_t* p1, const int32_t* p2, double* p3, double* p4);


cdef extern void Regress_VVU(void*, const int32_t* p1, const int32_t* p2, double* p3, double* p4);


cdef extern void RelVarDup_VVU(void*, const int32_t* p1, const int32_t* p2, double* p3, int32_t* p4);


cdef extern void RemoveDummy_VVU(void*, const int32_t* p1);


cdef extern void RemoveDummy2_VVU(void*, const int32_t* p1, const int32_t* p2);


cdef extern void RemoveDummy3_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void RemoveDummy4_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void RemoveDup_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void RemoveXYDup_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void RemoveXYDupIndex_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void RollingStats_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern void SearchReplace_VVU(void*, const int32_t* p1, const double* p2, const double* p3);


cdef extern void SearchReplaceText_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4, const char* p5, const int32_t* p6);


cdef extern void SearchReplaceTextEx_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const char* p4, const char* p5, const int32_t* p6, int32_t* p7);


cdef extern void Spline_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const double* p5, const double* p6, const double* p7, const int32_t* p8, const int32_t* p9);


cdef extern void Spline2_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4, const int32_t* p5);


cdef extern int32_t iTokenizeToValues_VVU(void*, const int32_t* p1, const char* p2);


cdef extern void Translate_VVU(void*, const int32_t* p1, const double* p2, const double* p3);


cdef extern void Trend_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3);


cdef extern void Trend2_VVU(void*, const int32_t* p1, const int32_t* p2, const int32_t* p3, const int32_t* p4);


cdef extern void UniformDist_VVU(void*, const int32_t* p1, const int32_t* p2, const double* p3, const double* p4, const int32_t* p5);



cdef extern void* pCreate_GEO(const char*, const char*, int32_t, void*, int32_t, char*, int32_t);
cdef extern void Destroy_GEO(void *);

cdef unicode _tounicode(char* s):
    return s.decode('UTF-8', 'backslashreplace')

ctypedef unsigned char char_type

cdef char_type[:] _chars(s):
    if isinstance(s, unicode):
        # encode to the specific encoding used inside of the module
        s = (<unicode>s).encode('utf8')
    else:
        unicode(s).encode('utf8')
    return s

cdef class WrapPGeo:
    cdef void* p_geo
    
    def __cinit__(self, application, version, wind_id, flags):
        app = (<unicode>application).encode('utf8')
        ver = (<unicode>version).encode('utf8')
        cdef size_t wind_handle = wind_id
        cdef void* hParentWnd = <void *>wind_handle
        cdef char* err = <char*>malloc(4096)
        try:
            tls_geo = getattr(thread_local, 'gxapi_cy_geo', None)
            if not tls_geo is None:
                raise GXAPIError("Only one gxapi_cy.WrapPGeo instance per thread allowed.");
            self.p_geo = pCreate_GEO(app, ver, 0, hParentWnd, flags, err, 4096)
            if self.p_geo == NULL:
                raise GXAPIError(_tounicode(err))
            thread_local.gxapi_cy_geo = <size_t>self.p_geo
        finally:
            free(err)
        
    def __dealloc__(self):
        if self.p_geo != NULL:
            Destroy_GEO(self.p_geo)
        thread_local.gxapi_cy_geo = None

    cdef _raise_on_gx_errors(self, void* p_geo):
        cdef int32_t term
        cdef char* module
        cdef char* err
        cdef int32_t error_number
        if iCheckTerminate_SYS(p_geo, &term) > 0:
            if term == 0:
                raise GXExit()
            elif term == -1:
                raise GXCancel()
            else:
                module = <char*>malloc(1024)
                err = <char*>malloc(4096)
                try:
                    sGetError_GEO(p_geo, module, 1024, err, 4096, &error_number)
                    if (error_number == 21023 or error_number == 21031 or # These two due to GXX asserts, Abort_SYS etc
                        error_number == 31009 or error_number == 31011):  # wrapper bind errors
                        raise GXAPIError(_tounicode(err));
                    else:
                        raise GXError(_tounicode(err), _tounicode(module), error_number)
                finally:
                    if module != NULL:
                        free(module)
                    if err != NULL:
                        free(err)
    
cdef void* get_p_geo():
    tls_geo = getattr(thread_local, 'gxapi_cy_geo', None)
    if tls_geo is None:
        raise GXAPIError("A gxapi_cy.WrapPGeo instance has not been instantiated on current thread yet.");
    return <void*><size_t>tls_geo




cdef class Wrap3DN:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_3DN(get_p_geo(), &self.handle)





    def copy(self, Wrap3DN p2):

        try:


            Copy_3DN(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def create(cls):

        try:


            _return_val = Wrap3DN(Create_3DN(get_p_geo()))
            return _return_val
        finally:
            pass




    def get_point_of_view(self, double p2, double p3, double p4):

        try:


            GetPointOfView_3DN(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return (p2, p3, p4)
        finally:
            pass


    def get_scale(self, double p2, double p3, double p4):

        try:


            GetScale_3DN(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return (p2, p3, p4)
        finally:
            pass


    def get_axis_color(self):

        try:


            _return_val = iGetAxisColor_3DN(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_axis_font(self, const char* p2):
        cdef int32_t p3 = 4*1024
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1024)

            strcpy(cp2, p2)

            IGetAxisFont_3DN(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def get_background_color(self):

        try:


            _return_val = iGetBackgroundColor_3DN(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_render_controls(self, int32_t p2, int32_t p3, const char* p4, const char* p6, const char* p8):
        cdef int32_t p5 = 4*1024
        cdef int32_t p7 = 4*1024
        cdef int32_t p9 = 4*1024
        cdef char* cp4 = NULL
        cdef char* cp6 = NULL
        cdef char* cp8 = NULL

        try:
            cp4 = <char*>malloc(4*1024)
            cp6 = <char*>malloc(4*1024)
            cp8 = <char*>malloc(4*1024)

            strcpy(cp4, p4)
            strcpy(cp6, p6)
            strcpy(cp8, p8)

            IGetRenderControls_3DN(get_p_geo(), &self.handle, &p2, &p3, cp4, &p5, cp6, &p7, cp8, &p9)
            return (p2, p3, cp4, cp6, cp8)
        finally:
            if cp4: free(cp4)
            if cp6: free(cp6)
            if cp8: free(cp8)



    def get_shading(self):

        try:


            _return_val = iGetShading_3DN(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def set_axis_color(self, int32_t p2):

        try:


            SetAxisColor_3DN(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_axis_font(self, const char* p2):

        try:


            SetAxisFont_3DN(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def set_background_color(self, int32_t p2):

        try:


            SetBackgroundColor_3DN(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_point_of_view(self, double p2, double p3, double p4):

        try:


            SetPointOfView_3DN(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def set_render_controls(self, int32_t p2, int32_t p3, const char* p4, const char* p5, const char* p6):

        try:


            SetRenderControls_3DN(get_p_geo(), &self.handle, &p2, &p3, p4, p5, p6)
            
        finally:
            pass


    def set_scale(self, double p2, double p3, double p4):

        try:


            SetScale_3DN(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def set_shading(self, int32_t p2):

        try:


            SetShading_3DN(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass

    pass



cdef class Wrap3DV:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destr_SYS(get_p_geo(), &self.handle)





    def open_mview(self, int32_t p2):

        try:


            _return_val = WrapMVIEW(OpenMVIEW_3DV(get_p_geo(), &self.handle, &p2))
            return _return_val
        finally:
            pass


    def copy_to_map(self, WrapMAP p2, const char* p3, double p4, double p5, double p6, double p7, int32_t p8, const char* p9, const char* p11):
        cdef int32_t p10 = 4*1040
        cdef int32_t p12 = 4*16384
        cdef char* cp9 = NULL
        cdef char* cp11 = NULL

        try:
            cp9 = <char*>malloc(4*1040)
            cp11 = <char*>malloc(4*16384)

            strcpy(cp9, p9)
            strcpy(cp11, p11)

            ICopyToMAP_3DV(get_p_geo(), &self.handle, &p2.handle, p3, &p4, &p5, &p6, &p7, &p8, cp9, &p10, cp11, &p12)
            return (cp9, cp11)
        finally:
            if cp9: free(cp9)
            if cp11: free(cp11)


    @classmethod
    def create_new(cls, const char* p1, WrapMVIEW p2):

        try:


            _return_val = Wrap3DV(CreateNew_3DV(get_p_geo(), p1, &p2.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def open(cls, const char* p1):

        try:


            _return_val = Wrap3DV(Open_3DV(get_p_geo(), p1))
            return _return_val
        finally:
            pass

    @classmethod
    def from_map(cls, WrapMAP p1):

        try:


            _return_val = Wrap3DV(FromMap_3DV(get_p_geo(), &p1.handle))
            return _return_val
        finally:
            pass


    def crc_3dv(self, int32_t p2, const char* p3):

        try:


            CRC3DV_3DV(get_p_geo(), &self.handle, &p2, p3)
            return p2
        finally:
            pass

    pass



cdef class WrapAGG:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_AGG(get_p_geo(), &self.handle)





    def set_model(self, int32_t p2):

        try:


            _SetModel_AGG(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def change_brightness(self, double p2):

        try:


            ChangeBrightness_AGG(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass

    @classmethod
    def create(cls):

        try:


            _return_val = WrapAGG(Create_AGG(get_p_geo()))
            return _return_val
        finally:
            pass

    @classmethod
    def create_map(cls, WrapMAP p1, const char* p2):

        try:


            _return_val = WrapAGG(CreateMap_AGG(get_p_geo(), &p1.handle, p2))
            return _return_val
        finally:
            pass




    def get_layer_itr(self, int32_t p2, WrapITR p3):

        try:


            GetLayerITR_AGG(get_p_geo(), &self.handle, &p2, &p3.handle)
            
        finally:
            pass


    def list_img(self, WrapVV p2):

        try:


            _return_val = iListImg_AGG(get_p_geo(), &self.handle, &p2.handle)
            return _return_val
        finally:
            pass


    def num_layers(self):

        try:


            _return_val = iNumLayers_AGG(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def layer_img(self, const char* p2, int32_t p3, const char* p4, double p5):

        try:


            LayerIMG_AGG(get_p_geo(), &self.handle, p2, &p3, p4, &p5)
            
        finally:
            pass


    def layer_img_ex(self, const char* p2, int32_t p3, const char* p4, double p5, double p6, double p7):

        try:


            LayerIMGEx_AGG(get_p_geo(), &self.handle, p2, &p3, p4, &p5, &p6, &p7)
            
        finally:
            pass


    def layer_shade_img(self, const char* p2, const char* p3, double p4, double p5, double p6):

        try:


            LayerShadeIMG_AGG(get_p_geo(), &self.handle, p2, p3, &p4, &p5, &p6)
            return p6
        finally:
            pass


    def get_brightness(self):

        try:


            _return_val = rGetBrightness_AGG(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def set_layer_itr(self, int32_t p2, WrapITR p3):

        try:


            SetLayerITR_AGG(get_p_geo(), &self.handle, &p2, &p3.handle)
            
        finally:
            pass


    def set_render_method(self, int32_t p2):

        try:


            SetRenderMethod_AGG(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass

    pass



cdef class WrapBF:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            DestroyEx_BF(get_p_geo(), &self.handle)





    def ch_size(self, int32_t p2):

        try:


            _ChSize_BF(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def seek(self, int32_t p2, int32_t p3):

        try:


            _Seek_BF(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def copy(self, WrapBF p2):

        try:


            Copy_BF(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def crc(self, int32_t p2, int32_t p3):

        try:


            _return_val = CRC_BF(get_p_geo(), &self.handle, &p2, &p3)
            return _return_val
        finally:
            pass

    @classmethod
    def create(cls, const char* p1, int32_t p2):

        try:


            _return_val = WrapBF(Create_BF(get_p_geo(), p1, &p2))
            return _return_val
        finally:
            pass

    @classmethod
    def create_sbf(cls, WrapSBF p1, const char* p2, int32_t p3):

        try:


            _return_val = WrapBF(CreateSBF_BF(get_p_geo(), &p1.handle, p2, &p3))
            return _return_val
        finally:
            pass






    def eof(self):

        try:


            _return_val = iEOF_BF(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def query_write(self):

        try:


            _return_val = iQueryWrite_BF(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def read_binary_string(self, int32_t p2, int32_t p3, const char* p4):
        cdef int32_t p5 = 4*16384
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*16384)

            strcpy(cp4, p4)

            IReadBinaryString_BF(get_p_geo(), &self.handle, &p2, &p3, cp4, &p5)
            return cp4
        finally:
            if cp4: free(cp4)



    def size(self):

        try:


            _return_val = iSize_BF(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def tell(self):

        try:


            _return_val = iTell_BF(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def read_int(self, int32_t p2, int32_t p3):

        try:


            ReadInt_BF(get_p_geo(), &self.handle, &p2, &p3)
            return p3
        finally:
            pass


    def read_double(self, int32_t p2, double p3):

        try:


            ReadReal_BF(get_p_geo(), &self.handle, &p2, &p3)
            return p3
        finally:
            pass


    def read_vv(self, int32_t p2, WrapVV p3):

        try:


            ReadVV_BF(get_p_geo(), &self.handle, &p2, &p3.handle)
            
        finally:
            pass


    def set_destroy_status(self, int32_t p2):

        try:


            SetDestroyStatus_BF(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def write_binary_string(self, int32_t p2, const char* p3):

        try:


            WriteBinaryString_BF(get_p_geo(), &self.handle, &p2, p3)
            
        finally:
            pass


    def write_data_null(self):

        try:


            WriteDataNull_BF(get_p_geo(), &self.handle)
            
        finally:
            pass


    def write_int(self, int32_t p2, int32_t p3):

        try:


            WriteInt_BF(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def write_double(self, int32_t p2, double p3):

        try:


            WriteReal_BF(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def write_vv(self, int32_t p2, WrapVV p3):

        try:


            WriteVV_BF(get_p_geo(), &self.handle, &p2, &p3.handle)
            
        finally:
            pass

    pass



cdef class WrapDAT:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_DAT(get_p_geo(), &self.handle)




    @classmethod
    def create_db(cls, WrapDB p1, const char* p2, const char* p3, const char* p4):

        try:


            _return_val = WrapDAT(CreateDB_DAT(get_p_geo(), &p1.handle, p2, p3, p4))
            return _return_val
        finally:
            pass

    @classmethod
    def create_xgd(cls, const char* p1, int32_t p2):

        try:


            _return_val = WrapDAT(CreateXGD_DAT(get_p_geo(), p1, &p2))
            return _return_val
        finally:
            pass



    @classmethod
    def get_lst(cls, WrapLST p1, const char* p2, int32_t p3, int32_t p4):

        try:


            GetLST_DAT(get_p_geo(), &p1.handle, p2, &p3, &p4)
            
        finally:
            pass


    def range_xyz(self, double p2, double p3, double p4, double p5, double p6, double p7, int32_t p8):

        try:


            RangeXYZ_DAT(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8)
            return (p2, p3, p4, p5, p6, p7, p8)
        finally:
            pass

    pass



cdef class WrapDATALINKD:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_DATALINKD(get_p_geo(), &self.handle)




    @classmethod
    def create_arc_lyr(cls, const char* p1):

        try:


            _return_val = WrapDATALINKD(CreateArcLYR_DATALINKD(get_p_geo(), p1))
            return _return_val
        finally:
            pass

    @classmethod
    def create_arc_lyr_ex(cls, const char* p1, int32_t p2):

        try:


            _return_val = WrapDATALINKD(CreateArcLYREx_DATALINKD(get_p_geo(), p1, &p2))
            return _return_val
        finally:
            pass

    @classmethod
    def create_arc_lyr_from_tmp(cls, const char* p1):

        try:


            _return_val = WrapDATALINKD(CreateArcLYRFromTMP_DATALINKD(get_p_geo(), p1))
            return _return_val
        finally:
            pass

    @classmethod
    def create_arc_lyr_from_tmp_ex(cls, const char* p1, int32_t p2):

        try:


            _return_val = WrapDATALINKD(CreateArcLYRFromTMPEx_DATALINKD(get_p_geo(), p1, &p2))
            return _return_val
        finally:
            pass

    @classmethod
    def create_bing(cls, int32_t p1):

        try:


            _return_val = WrapDATALINKD(CreateBING_DATALINKD(get_p_geo(), &p1))
            return _return_val
        finally:
            pass




    def get_extents(self, double p2, double p3, double p4, double p5):

        try:


            GetExtents_DATALINKD(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            return (p2, p3, p4, p5)
        finally:
            pass


    def get_ipj(self, WrapIPJ p2):

        try:


            GetIPJ_DATALINKD(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    pass



cdef class WrapDATAMINE:
    




    @classmethod
    def create_voxel(cls, const char* p1, const char* p2, WrapIPJ p3, WrapMETA p4, const char* p5):

        try:


            CreateVoxel_DATAMINE(get_p_geo(), p1, p2, &p3.handle, &p4.handle, p5)
            
        finally:
            pass

    @classmethod
    def numeric_field_lst(cls, const char* p1, WrapLST p2):

        try:


            NumericFieldLST_DATAMINE(get_p_geo(), p1, &p2.handle)
            
        finally:
            pass

    pass



cdef class WrapDB:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_DB(get_p_geo(), &self.handle)




# Channel




    def create_dup(self, const char* p2):

        try:


            CreateDup_DB(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def create_dup_comp(self, const char* p2, int32_t p3):

        try:


            CreateDupComp_DB(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass


    def dup_symb_across(self, WrapDB p2, int32_t p3):

        try:


            _return_val = DupSymbAcross_DB(get_p_geo(), &self.handle, &p2.handle, &p3)
            return _return_val
        finally:
            pass


    def easy_maker_symb(self, int32_t p2, const char* p3, const char* p4):

        try:


            EasyMakerSymb_DB(get_p_geo(), &self.handle, &p2, p3, p4)
            
        finally:
            pass


    def get_chan_str(self, int32_t p2, int32_t p3, int32_t p4, const char* p5):
        cdef int32_t p6 = 4*1024
        cdef char* cp5 = NULL

        try:
            cp5 = <char*>malloc(4*1024)

            strcpy(cp5, p5)

            GetChanStr_DB(get_p_geo(), &self.handle, &p2, &p3, &p4, cp5, &p6)
            return cp5
        finally:
            if cp5: free(cp5)



    def get_chan_vv(self, int32_t p2, int32_t p3, WrapVV p4):

        try:


            GetChanVV_DB(get_p_geo(), &self.handle, &p2, &p3, &p4.handle)
            
        finally:
            pass


    def get_chan_vv_expanded(self, int32_t p2, int32_t p3, WrapVV p4):

        try:


            GetChanVVExpanded_DB(get_p_geo(), &self.handle, &p2, &p3, &p4.handle)
            
        finally:
            pass


    def get_ipj(self, int32_t p2, WrapIPJ p3):

        try:


            GetIPJ_DB(get_p_geo(), &self.handle, &p2, &p3.handle)
            
        finally:
            pass


    def get_itr(self, int32_t p2, WrapITR p3):

        try:


            GetITR_DB(get_p_geo(), &self.handle, &p2, &p3.handle)
            
        finally:
            pass


    def get_reg_symb(self, int32_t p2, WrapREG p3):

        try:


            GetRegSymb_DB(get_p_geo(), &self.handle, &p2, &p3.handle)
            
        finally:
            pass


    def get_reg_symb_setting(self, int32_t p2, const char* p3, const char* p4):
        cdef int32_t p5 = 4*1024
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*1024)

            strcpy(cp4, p4)

            GetRegSymbSetting_DB(get_p_geo(), &self.handle, &p2, p3, cp4, &p5)
            return cp4
        finally:
            if cp4: free(cp4)



    def get_va_chan_vv(self, int32_t p2, int32_t p3, WrapVV p4, int32_t p5, int32_t p6):

        try:


            GetVaChanVV_DB(get_p_geo(), &self.handle, &p2, &p3, &p4.handle, &p5, &p6)
            
        finally:
            pass


    def blobs_max(self):

        try:


            _return_val = iBlobsMax_DB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def chans_max(self):

        try:


            _return_val = iChansMax_DB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def format_chan(self, int32_t p2, double p3, const char* p4):
        cdef int32_t p5 = 4*128
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*128)

            strcpy(cp4, p4)

            IFormatChan_DB(get_p_geo(), &self.handle, &p2, &p3, cp4, &p5)
            return cp4
        finally:
            if cp4: free(cp4)



    def get_chan_array_size(self, int32_t p2):

        try:


            _return_val = iGetChanArraySize_DB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def get_chan_class(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*16
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*16)

            strcpy(cp3, p3)

            IGetChanClass_DB(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def get_chan_decimal(self, int32_t p2):

        try:


            _return_val = iGetChanDecimal_DB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def get_chan_format(self, int32_t p2):

        try:


            _return_val = iGetChanFormat_DB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def get_chan_int(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            _return_val = iGetChanInt_DB(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return _return_val
        finally:
            pass


    def get_chan_label(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*128
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*128)

            strcpy(cp3, p3)

            IGetChanLabel_DB(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def get_chan_name(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*64
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*64)

            strcpy(cp3, p3)

            IGetChanName_DB(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def get_chan_protect(self, int32_t p2):

        try:


            _return_val = iGetChanProtect_DB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def get_chan_type(self, int32_t p2):

        try:


            _return_val = iGetChanType_DB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def get_chan_unit(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*128
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*128)

            strcpy(cp3, p3)

            IGetChanUnit_DB(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def get_chan_width(self, int32_t p2):

        try:


            _return_val = iGetChanWidth_DB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def get_name(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*1040
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*1040)

            strcpy(cp3, p3)

            IGetName_DB(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def get_reg_symb_setting(self, int32_t p2, const char* p3):

        try:


            _return_val = iGetRegSymbSetting_DB(get_p_geo(), &self.handle, &p2, p3)
            return _return_val
        finally:
            pass


    def get_symb_name(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*64
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*64)

            strcpy(cp3, p3)

            IGetSymbName_DB(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def have_itr(self, int32_t p2):

        try:


            _return_val = iHaveITR_DB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def coord_pair(self, const char* p2, const char* p3):
        cdef int32_t p4 = 4*64
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*64)

            strcpy(cp3, p3)

            _return_val = IiCoordPair_DB(get_p_geo(), &self.handle, p2, cp3, &p4)
            return (_return_val, cp3)
        finally:
            if cp3: free(cp3)



    def lines_max(self):

        try:


            _return_val = iLinesMax_DB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def users_max(self):

        try:


            _return_val = iUsersMax_DB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def maker_symb(self, int32_t p2, const char* p3, const char* p4, const char* p5):

        try:


            MakerSymb_DB(get_p_geo(), &self.handle, &p2, p3, p4, p5)
            
        finally:
            pass


    def put_chan_vv(self, int32_t p2, int32_t p3, WrapVV p4):

        try:


            PutChanVV_DB(get_p_geo(), &self.handle, &p2, &p3, &p4.handle)
            
        finally:
            pass


    def put_va_chan_vv(self, int32_t p2, int32_t p3, WrapVV p4, int32_t p5, int32_t p6):

        try:


            PutVaChanVV_DB(get_p_geo(), &self.handle, &p2, &p3, &p4.handle, &p5, &p6)
            
        finally:
            pass


    def read_blob_bf(self, int32_t p2, WrapBF p3):

        try:


            ReadBlobBF_DB(get_p_geo(), &self.handle, &p2, &p3.handle)
            
        finally:
            pass


    def get_chan_double(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            _return_val = rGetChanReal_DB(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return _return_val
        finally:
            pass


    def get_reg_symb_setting(self, int32_t p2, const char* p3):

        try:


            _return_val = rGetRegSymbSetting_DB(get_p_geo(), &self.handle, &p2, p3)
            return _return_val
        finally:
            pass


    def set_all_chan_protect(self, int32_t p2):

        try:


            SetAllChanProtect_DB(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_chan_class(self, int32_t p2, const char* p3):

        try:


            SetChanClass_DB(get_p_geo(), &self.handle, &p2, p3)
            
        finally:
            pass


    def set_chan_decimal(self, int32_t p2, int32_t p3):

        try:


            SetChanDecimal_DB(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_chan_format(self, int32_t p2, int32_t p3):

        try:


            SetChanFormat_DB(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_chan_int(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            SetChanInt_DB(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def set_chan_label(self, int32_t p2, const char* p3):

        try:


            SetChanLabel_DB(get_p_geo(), &self.handle, &p2, p3)
            
        finally:
            pass


    def set_chan_name(self, int32_t p2, const char* p3):

        try:


            SetChanName_DB(get_p_geo(), &self.handle, &p2, p3)
            
        finally:
            pass


    def set_chan_protect(self, int32_t p2, int32_t p3):

        try:


            SetChanProtect_DB(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_chan_double(self, int32_t p2, int32_t p3, int32_t p4, double p5):

        try:


            SetChanReal_DB(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def set_chan_str(self, int32_t p2, int32_t p3, int32_t p4, const char* p5):

        try:


            SetChanStr_DB(get_p_geo(), &self.handle, &p2, &p3, &p4, p5)
            
        finally:
            pass


    def set_chan_unit(self, int32_t p2, const char* p3):

        try:


            SetChanUnit_DB(get_p_geo(), &self.handle, &p2, p3)
            
        finally:
            pass


    def set_chan_width(self, int32_t p2, int32_t p3):

        try:


            SetChanWidth_DB(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_ipj(self, int32_t p2, int32_t p3, WrapIPJ p4):

        try:


            SetIPJ_DB(get_p_geo(), &self.handle, &p2, &p3, &p4.handle)
            
        finally:
            pass


    def set_itr(self, int32_t p2, WrapITR p3):

        try:


            SetITR_DB(get_p_geo(), &self.handle, &p2, &p3.handle)
            
        finally:
            pass


    def set_reg_symb(self, int32_t p2, WrapREG p3):

        try:


            SetRegSymb_DB(get_p_geo(), &self.handle, &p2, &p3.handle)
            
        finally:
            pass


    def set_reg_symb_setting(self, int32_t p2, const char* p3, const char* p4):

        try:


            SetRegSymbSetting_DB(get_p_geo(), &self.handle, &p2, p3, p4)
            
        finally:
            pass


    def write_blob_bf(self, int32_t p2, WrapBF p3):

        try:


            WriteBlobBF_DB(get_p_geo(), &self.handle, &p2, &p3.handle)
            
        finally:
            pass


# Control




    def commit(self):

        try:


            Commit_DB(get_p_geo(), &self.handle)
            
        finally:
            pass


    def compact(self):

        try:


            Compact_DB(get_p_geo(), &self.handle)
            
        finally:
            pass

    @classmethod
    def create(cls, const char* p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, const char* p7, const char* p8):

        try:


            Create_DB(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6, p7, p8)
            
        finally:
            pass

    @classmethod
    def create_comp(cls, const char* p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, const char* p7, const char* p8, int32_t p9, int32_t p10):

        try:


            CreateComp_DB(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6, p7, p8, &p9, &p10)
            
        finally:
            pass

    @classmethod
    def create_ex(cls, const char* p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, const char* p7, const char* p8, int32_t p9):

        try:


            CreateEx_DB(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6, p7, p8, &p9)
            
        finally:
            pass


    def del_line0(self):

        try:


            DelLine0_DB(get_p_geo(), &self.handle)
            
        finally:
            pass




    def discard(self):

        try:


            Discard_DB(get_p_geo(), &self.handle)
            
        finally:
            pass

    @classmethod
    def grow(cls, const char* p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6):

        try:


            Grow_DB(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def can_open(cls, const char* p1, const char* p2, const char* p3):

        try:


            _return_val = iCanOpen_DB(get_p_geo(), p1, p2, p3)
            return _return_val
        finally:
            pass

    @classmethod
    def can_open_read_only(cls, const char* p1, const char* p2, const char* p3):

        try:


            _return_val = iCanOpenReadOnly_DB(get_p_geo(), p1, p2, p3)
            return _return_val
        finally:
            pass


    def check(self):

        try:


            _return_val = iCheck_DB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def is_empty(self):

        try:


            _return_val = iIsEmpty_DB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def is_line_empty(self, int32_t p2):

        try:


            _return_val = iIsLineEmpty_DB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def open(cls, const char* p1, const char* p2, const char* p3):

        try:


            _return_val = WrapDB(Open_DB(get_p_geo(), p1, p2, p3))
            return _return_val
        finally:
            pass

    @classmethod
    def open_read_only(cls, const char* p1, const char* p2, const char* p3):

        try:


            _return_val = WrapDB(OpenReadOnly_DB(get_p_geo(), p1, p2, p3))
            return _return_val
        finally:
            pass

    @classmethod
    def repair(cls, const char* p1):

        try:


            Repair_DB(get_p_geo(), p1)
            
        finally:
            pass


    def sync(self):

        try:


            Sync_DB(get_p_geo(), &self.handle)
            
        finally:
            pass


# Data




    def copy_data(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            CopyData_DB(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def get_col_va(self, int32_t p2):

        try:


            _return_val = iGetColVA_DB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def get_channel_length(self, int32_t p2, int32_t p3):

        try:


            _return_val = iGetChannelLength_DB(get_p_geo(), &self.handle, &p2, &p3)
            return _return_val
        finally:
            pass


    def get_fid_incr(self, int32_t p2, int32_t p3):

        try:


            _return_val = rGetFidIncr_DB(get_p_geo(), &self.handle, &p2, &p3)
            return _return_val
        finally:
            pass


    def get_fid_start(self, int32_t p2, int32_t p3):

        try:


            _return_val = rGetFidStart_DB(get_p_geo(), &self.handle, &p2, &p3)
            return _return_val
        finally:
            pass


    def set_fid(self, int32_t p2, int32_t p3, double p4, double p5):

        try:


            SetFid_DB(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def window_va_ch(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6):

        try:


            WindowVACh_DB(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass


    def window_va_ch2(self, int32_t p2, int32_t p3, int32_t p4, WrapVV p5):

        try:


            WindowVACh2_DB(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5.handle)
            
        finally:
            pass


# Line




    def set_line_selection(self, int32_t p2, int32_t p3):

        try:


            SetLineSelection_DB(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def get_line_selection(self, int32_t p2):

        try:


            _return_val = iGetLineSelection_DB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def first_sel_line(self):

        try:


            _return_val = FirstSelLine_DB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_line_map_fid(self, int32_t p2, double p3, double p4):

        try:


            GetLineMapFid_DB(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return (p3, p4)
        finally:
            pass


    def get_select(self):

        try:


            _return_val = GetSelect_DB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def count_sel_lines(self):

        try:


            _return_val = iCountSelLines_DB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def is_chan_name(cls, const char* p1):

        try:


            _return_val = iIsChanName_DB(get_p_geo(), p1)
            return _return_val
        finally:
            pass


    def is_chan_valid(self, int32_t p2):

        try:


            _return_val = iIsChanValid_DB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def is_line_name(cls, const char* p1):

        try:


            _return_val = iIsLineName_DB(get_p_geo(), p1)
            return _return_val
        finally:
            pass


    def is_line_valid(self, int32_t p2):

        try:


            _return_val = iIsLineValid_DB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def line_category(self, int32_t p2):

        try:


            _return_val = iLineCategory_DB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def line_flight(self, int32_t p2):

        try:


            _return_val = iLineFlight_DB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def line_label(self, int32_t p2, const char* p3, int32_t p5):
        cdef int32_t p4 = 4*128
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*128)

            strcpy(cp3, p3)

            ILineLabel_DB(get_p_geo(), &self.handle, &p2, cp3, &p4, &p5)
            return cp3
        finally:
            if cp3: free(cp3)



    def line_number(self, int32_t p2):

        try:


            _return_val = iLineNumber_DB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def line_number2(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*64
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*64)

            strcpy(cp3, p3)

            ILineNumber2_DB(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def line_type(self, int32_t p2):

        try:


            _return_val = iLineType_DB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def line_version(self, int32_t p2):

        try:


            _return_val = iLineVersion_DB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def set_line_name(cls, int32_t p1, int32_t p2, int32_t p3, const char* p4):
        cdef int32_t p5 = 4*64
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*64)

            strcpy(cp4, p4)

            ISetLineName_DB(get_p_geo(), &p1, &p2, &p3, cp4, &p5)
            return cp4
        finally:
            if cp4: free(cp4)


    @classmethod
    def set_line_name2(cls, const char* p1, int32_t p2, int32_t p3, const char* p4):
        cdef int32_t p5 = 4*64
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*64)

            strcpy(cp4, p4)

            ISetLineName2_DB(get_p_geo(), p1, &p2, &p3, cp4, &p5)
            return cp4
        finally:
            if cp4: free(cp4)



    def load_select(self, const char* p2):

        try:


            LoadSelect_DB(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def next_sel_line(self, int32_t p2):

        try:


            _return_val = NextSelLine_DB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def line_bearing(self, int32_t p2):

        try:


            _return_val = rLineBearing_DB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def line_date(self, int32_t p2):

        try:


            _return_val = rLineDate_DB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def save_select(self, const char* p2):

        try:


            SaveSelect_DB(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def select(self, const char* p2, int32_t p3):

        try:


            Select_DB(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass


    def set_line_bearing(self, int32_t p2, double p3):

        try:


            SetLineBearing_DB(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_line_date(self, int32_t p2, double p3):

        try:


            SetLineDate_DB(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_line_flight(self, int32_t p2, int32_t p3):

        try:


            SetLineFlight_DB(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_line_map_fid(self, int32_t p2, double p3, double p4):

        try:


            SetLineMapFid_DB(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def set_line_num(self, int32_t p2, int32_t p3):

        try:


            SetLineNum_DB(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_line_type(self, int32_t p2, int32_t p3):

        try:


            SetLineType_DB(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_line_ver(self, int32_t p2, int32_t p3):

        try:


            SetLineVer_DB(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_select(self, int32_t p2):

        try:


            SetSelect_DB(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


# META




    def get_meta(self, WrapMETA p2):

        try:


            GetMETA_DB(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_meta(self, WrapMETA p2):

        try:


            SetMETA_DB(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


# Symbols




    def array_lst(self, WrapLST p2):

        try:


            ArrayLST_DB(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def array_size_lst(self, int32_t p2, WrapLST p3):

        try:


            ArraySizeLST_DB(get_p_geo(), &self.handle, &p2, &p3.handle)
            
        finally:
            pass


    def chan_lst(self, WrapLST p2):

        try:


            ChanLST_DB(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def normal_chan_lst(self, WrapLST p2):

        try:


            NormalChanLST_DB(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def class_chan_lst(self, WrapLST p2, const char* p3):

        try:


            ClassChanLST_DB(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass


    def class_group_lst(self, WrapLST p2, const char* p3):

        try:


            ClassGroupLST_DB(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass


    def create_symb(self, const char* p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            _return_val = CreateSymb_DB(get_p_geo(), &self.handle, p2, &p3, &p4, &p5)
            return _return_val
        finally:
            pass


    def create_symb_ex(self, const char* p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6):

        try:


            _return_val = CreateSymbEx_DB(get_p_geo(), &self.handle, p2, &p3, &p4, &p5, &p6)
            return _return_val
        finally:
            pass


    def csv_chan_lst(self, WrapLST p2, const char* p3):

        try:


            CSVChanLST_DB(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass


    def delete_symb(self, int32_t p2):

        try:


            DeleteSymb_DB(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def dup_line_symb(self, int32_t p2, const char* p3):

        try:


            _return_val = DupLineSymb_DB(get_p_geo(), &self.handle, &p2, p3)
            return _return_val
        finally:
            pass


    def dup_symb(self, int32_t p2, const char* p3):

        try:


            _return_val = DupSymb_DB(get_p_geo(), &self.handle, &p2, p3)
            return _return_val
        finally:
            pass


    def dup_symb_no_lock(self, int32_t p2, const char* p3):

        try:


            _return_val = DupSymbNoLock_DB(get_p_geo(), &self.handle, &p2, p3)
            return _return_val
        finally:
            pass


    def find_chan(self, const char* p2):

        try:


            _return_val = FindChan_DB(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def find_symb(self, const char* p2, int32_t p3):

        try:


            _return_val = FindSymb_DB(get_p_geo(), &self.handle, p2, &p3)
            return _return_val
        finally:
            pass


    def get_chan_order_lst(self, WrapLST p2):

        try:


            GetChanOrderLST_DB(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_xyz_chan_symb(self, int32_t p2):

        try:


            _return_val = GetXYZChanSymb_DB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def class_chan_list(self, WrapVV p2, const char* p3):

        try:


            _return_val = iClassChanList_DB(get_p_geo(), &self.handle, &p2.handle, p3)
            return _return_val
        finally:
            pass


    def exist_chan(self, const char* p2):

        try:


            _return_val = iExistChan_DB(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def exist_symb(self, const char* p2, int32_t p3):

        try:


            _return_val = iExistSymb_DB(get_p_geo(), &self.handle, p2, &p3)
            return _return_val
        finally:
            pass


    def valid_symb(self, int32_t p2, int32_t p3):

        try:


            _return_val = iValidSymb_DB(get_p_geo(), &self.handle, &p2, &p3)
            return _return_val
        finally:
            pass


    def get_symb_lock(self, int32_t p2):

        try:


            _return_val = iGetSymbLock_DB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def get_xyz_chan(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*64
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*64)

            strcpy(cp3, p3)

            IGetXYZChan_DB(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def symb_list(self, WrapVV p2, int32_t p3):

        try:


            _return_val = iSymbList_DB(get_p_geo(), &self.handle, &p2.handle, &p3)
            return _return_val
        finally:
            pass


    def line_lst(self, WrapLST p2):

        try:


            LineLST_DB(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def lock_symb(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            LockSymb_DB(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def mask_chan_lst(self, WrapLST p2):

        try:


            MaskChanLST_DB(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def selected_line_lst(self, WrapLST p2):

        try:


            SelectedLineLST_DB(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_chan_order_lst(self, WrapLST p2):

        try:


            SetChanOrderLST_DB(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_xyz_chan(self, int32_t p2, const char* p3):

        try:


            SetXYZChan_DB(get_p_geo(), &self.handle, &p2, p3)
            
        finally:
            pass


    def string_chan_lst(self, WrapLST p2):

        try:


            StringChanLST_DB(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def symb_lst(self, WrapLST p2, int32_t p3):

        try:


            SymbLST_DB(get_p_geo(), &self.handle, &p2.handle, &p3)
            
        finally:
            pass


    def un_lock_all_symb(self):

        try:


            UnLockAllSymb_DB(get_p_geo(), &self.handle)
            
        finally:
            pass


    def un_lock_symb(self, int32_t p2):

        try:


            UnLockSymb_DB(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


# VA Channels




    def add_associated_load(self, int32_t p2, int32_t p3):

        try:


            AddAssociatedLoad_DB(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def add_comment(self, const char* p2, const char* p3, int32_t p4):

        try:


            AddComment_DB(get_p_geo(), &self.handle, p2, p3, &p4)
            
        finally:
            pass


    def add_int_comment(self, const char* p2, int32_t p3, int32_t p4):

        try:


            AddIntComment_DB(get_p_geo(), &self.handle, p2, &p3, &p4)
            
        finally:
            pass


    def add_double_comment(self, const char* p2, double p3, int32_t p4):

        try:


            AddRealComment_DB(get_p_geo(), &self.handle, p2, &p3, &p4)
            
        finally:
            pass


    def add_time_comment(self, const char* p2, int32_t p3):

        try:


            AddTimeComment_DB(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass


    def associate(self, int32_t p2, int32_t p3):

        try:


            Associate_DB(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def associate_all(self, int32_t p2):

        try:


            AssociateAll_DB(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def associate_class(self, int32_t p2, const char* p3):

        try:


            AssociateClass_DB(get_p_geo(), &self.handle, &p2, p3)
            
        finally:
            pass

    @classmethod
    def gen_valid_chan_symb(cls, const char* p1, const char* p2):
        cdef int32_t p3 = 4*64
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*64)

            strcpy(cp2, p2)

            GenValidChanSymb_DB(get_p_geo(), p1, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def gen_valid_line_symb(cls, const char* p1, const char* p2):
        cdef int32_t p3 = 4*64
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*64)

            strcpy(cp2, p2)

            GenValidLineSymb_DB(get_p_geo(), p1, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def get_chan_va(self, int32_t p2, int32_t p3, WrapVA p4):

        try:


            GetChanVA_DB(get_p_geo(), &self.handle, &p2, &p3, &p4.handle)
            
        finally:
            pass


    def get_va_scaling(self, int32_t p2, double p3, double p4):

        try:


            GetVAScaling_DB(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return (p3, p4)
        finally:
            pass


    def get_va_windows(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            GetVAWindows_DB(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return (p3, p4)
        finally:
            pass


    def set_va_base_coordinate_info(self, int32_t p2, int32_t p3, double p4, WrapVV p5, const char* p6, int32_t p7):

        try:


            SetVABaseCoordinateInfo_DB(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5.handle, p6, &p7)
            
        finally:
            pass


    def get_va_base_coordinate_info(self, int32_t p2, int32_t p3, double p4, WrapVV p5, const char* p6):
        cdef int32_t p7 = 4*128
        cdef char* cp6 = NULL

        try:
            cp6 = <char*>malloc(4*128)

            strcpy(cp6, p6)

            GetVABaseCoordinateInfo_DB(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5.handle, cp6, &p7)
            return (p3, p4, cp6)
        finally:
            if cp6: free(cp6)



    def get_group_class(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*16
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*16)

            strcpy(cp3, p3)

            IGetGroupClass_DB(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def get_info(self, int32_t p2):

        try:


            _return_val = iGetInfo_DB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def get_va_prof_color_file(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*1040
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*1040)

            strcpy(cp3, p3)

            IGetVAProfColorFile_DB(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def get_va_prof_sect_option(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*128
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*128)

            strcpy(cp3, p3)

            IGetVAProfSectOption_DB(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def get_va_sect_color_file(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*1040
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*1040)

            strcpy(cp3, p3)

            IGetVASectColorFile_DB(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def is_associated(self, int32_t p2, int32_t p3):

        try:


            _return_val = iIsAssociated_DB(get_p_geo(), &self.handle, &p2, &p3)
            return _return_val
        finally:
            pass


    def is_wholeplot(self):

        try:


            _return_val = iIsWholeplot_DB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def put_chan_va(self, int32_t p2, int32_t p3, WrapVA p4):

        try:


            PutChanVA_DB(get_p_geo(), &self.handle, &p2, &p3, &p4.handle)
            
        finally:
            pass


    def set_group_class(self, int32_t p2, const char* p3):

        try:


            SetGroupClass_DB(get_p_geo(), &self.handle, &p2, p3)
            
        finally:
            pass


    def set_va_prof_color_file(self, int32_t p2, const char* p3):

        try:


            SetVAProfColorFile_DB(get_p_geo(), &self.handle, &p2, p3)
            
        finally:
            pass


    def set_va_prof_sect_option(self, int32_t p2, const char* p3):

        try:


            SetVAProfSectOption_DB(get_p_geo(), &self.handle, &p2, p3)
            
        finally:
            pass


    def set_va_scaling(self, int32_t p2, double p3, double p4):

        try:


            SetVAScaling_DB(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def set_va_sect_color_file(self, int32_t p2, const char* p3):

        try:


            SetVASectColorFile_DB(get_p_geo(), &self.handle, &p2, p3)
            
        finally:
            pass


    def set_va_windows(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            SetVAWindows_DB(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    pass



cdef class WrapDBREAD:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_DBREAD(get_p_geo(), &self.handle)




# Create Methods



    @classmethod
    def create(cls, WrapDB p1, WrapLST p2):

        try:


            _return_val = WrapDBREAD(Create_DBREAD(get_p_geo(), &p1.handle, &p2.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def create_xy(cls, WrapDB p1, WrapLST p2):

        try:


            _return_val = WrapDBREAD(CreateXY_DBREAD(get_p_geo(), &p1.handle, &p2.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def create_xyz(cls, WrapDB p1, WrapLST p2):

        try:


            _return_val = WrapDBREAD(CreateXYZ_DBREAD(get_p_geo(), &p1.handle, &p2.handle))
            return _return_val
        finally:
            pass




    def add_channel(self, int32_t p2):

        try:


            _return_val = iAddChannel_DBREAD(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


# Data Access Methods




    def get_vv(self, int32_t p2):

        try:


            _return_val = WrapVV(GetVV_DBREAD(get_p_geo(), &self.handle, &p2))
            return _return_val
        finally:
            pass


    def get_va(self, int32_t p2):

        try:


            _return_val = WrapVA(GetVA_DBREAD(get_p_geo(), &self.handle, &p2))
            return _return_val
        finally:
            pass


    def get_v_vx(self):

        try:


            _return_val = WrapVV(GetVVx_DBREAD(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def get_v_vy(self):

        try:


            _return_val = WrapVV(GetVVy_DBREAD(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def get_v_vz(self):

        try:


            _return_val = WrapVV(GetVVz_DBREAD(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def get_chan_array_size(self, int32_t p2):

        try:


            _return_val = iGetChanArraySize_DBREAD(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def get_number_of_blocks_to_process(self):

        try:


            _return_val = iGetNumberOfBlocksToProcess_DBREAD(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


# Processing




    def get_next_block(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            _return_val = iGetNextBlock_DBREAD(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return (_return_val, p2, p3, p4)
        finally:
            pass


    pass



cdef class WrapDBWRITE:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_DBWRITE(get_p_geo(), &self.handle)




# Create Methods



    @classmethod
    def create(cls, WrapDB p1):

        try:


            _return_val = WrapDBWRITE(Create_DBWRITE(get_p_geo(), &p1.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def create_xy(cls, WrapDB p1):

        try:


            _return_val = WrapDBWRITE(CreateXY_DBWRITE(get_p_geo(), &p1.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def create_xyz(cls, WrapDB p1):

        try:


            _return_val = WrapDBWRITE(CreateXYZ_DBWRITE(get_p_geo(), &p1.handle))
            return _return_val
        finally:
            pass




    def add_channel(self, int32_t p2):

        try:


            _return_val = iAddChannel_DBWRITE(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


# Data Access Methods




    def get_db(self):

        try:


            _return_val = WrapDB(GetDB_DBWRITE(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def get_vv(self, int32_t p2):

        try:


            _return_val = WrapVV(GetVV_DBWRITE(get_p_geo(), &self.handle, &p2))
            return _return_val
        finally:
            pass


    def get_va(self, int32_t p2):

        try:


            _return_val = WrapVA(GetVA_DBWRITE(get_p_geo(), &self.handle, &p2))
            return _return_val
        finally:
            pass


    def get_v_vx(self):

        try:


            _return_val = WrapVV(GetVVx_DBWRITE(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def get_v_vy(self):

        try:


            _return_val = WrapVV(GetVVy_DBWRITE(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def get_v_vz(self):

        try:


            _return_val = WrapVV(GetVVz_DBWRITE(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def get_chan_array_size(self, int32_t p2):

        try:


            _return_val = iGetChanArraySize_DBWRITE(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


# Processing




    def add_block(self, int32_t p2):

        try:


            AddBlock_DBWRITE(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def commit(self):

        try:


            Commit_DBWRITE(get_p_geo(), &self.handle)
            
        finally:
            pass


    def test_func(self, WrapRA p2):

        try:


            TestFunc_DBWRITE(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    pass



cdef class WrapDSEL:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_DSEL(get_p_geo(), &self.handle)




    @classmethod
    def create(cls):

        try:


            _return_val = WrapDSEL(Create_DSEL(get_p_geo()))
            return _return_val
        finally:
            pass


    def data_significant_figures(self, double p2):

        try:


            DataSignificantFigures_DSEL(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass




    def meta_query(self, const char* p2):

        try:


            MetaQuery_DSEL(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def picture_quality(self, int32_t p2):

        try:


            PictureQuality_DSEL(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def request_all_info(self, int32_t p2):

        try:


            RequestAllInfo_DSEL(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def select_area(self, WrapPLY p2):

        try:


            SelectArea_DSEL(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def select_rect(self, double p2, double p3, double p4, double p5):

        try:


            SelectRect_DSEL(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def select_resolution(self, double p2, int32_t p3):

        try:


            SelectResolution_DSEL(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def select_size(self, int32_t p2, int32_t p3):

        try:


            SelectSize_DSEL(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_extract_as_document(self, int32_t p2):

        try:


            SetExtractAsDocument_DSEL(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_ipj(self, WrapIPJ p2, int32_t p3):

        try:


            SetIPJ_DSEL(get_p_geo(), &self.handle, &p2.handle, &p3)
            
        finally:
            pass


    def spatial_accuracy(self, double p2):

        try:


            SpatialAccuracy_DSEL(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass

    pass



cdef class WrapE3DV:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destr_SYS(get_p_geo(), &self.handle)





    def get_data_view(self):

        try:


            _return_val = WrapMVIEW(GetDataView_E3DV(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def get_base_view(self):

        try:


            _return_val = WrapMVIEW(GetBaseView_E3DV(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass

    pass



cdef class WrapEXT:
    




    @classmethod
    def get_info(cls, const char* p1, double p2, double p3, double p4, double p5, WrapIPJ p6):

        try:


            GetInfo_EXT(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6.handle)
            return (p2, p3, p4, p5)
        finally:
            pass

    pass



cdef class WrapGEO:
    




    pass





cdef class WrapGEOSTRING:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_GEOSTRING(get_p_geo(), &self.handle)




    @classmethod
    def open(cls, const char* p1, int32_t p2):

        try:


            _return_val = WrapGEOSTRING(Open_GEOSTRING(get_p_geo(), p1, &p2))
            return _return_val
        finally:
            pass




    def get_ipj(self, WrapIPJ p2):

        try:


            GetIPJ_GEOSTRING(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_features(self, WrapLST p2):

        try:


            GetFeatures_GEOSTRING(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_sections(self, WrapLST p2):

        try:


            GetSections_GEOSTRING(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_all_shapes(self, WrapLST p2):

        try:


            GetAllShapes_GEOSTRING(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_shapes_for_feature(self, const char* p2, WrapLST p3):

        try:


            GetShapesForFeature_GEOSTRING(get_p_geo(), &self.handle, p2, &p3.handle)
            
        finally:
            pass


    def get_shapes_for_section(self, const char* p2, WrapLST p3):

        try:


            GetShapesForSection_GEOSTRING(get_p_geo(), &self.handle, p2, &p3.handle)
            
        finally:
            pass


    def get_shapes_for_feature_and_section(self, const char* p2, const char* p3, WrapLST p4):

        try:


            GetShapesForFeatureAndSection_GEOSTRING(get_p_geo(), &self.handle, p2, p3, &p4.handle)
            
        finally:
            pass


    def get_feature_properties(self, const char* p2, const char* p3, const char* p5, int32_t p7, int32_t p8, double p9, double p10, double p11, int32_t p12, int32_t p13, int32_t p14, double p15, double p16, int32_t p17):
        cdef int32_t p4 = 4*1040
        cdef int32_t p6 = 4*16384
        cdef char* cp3 = NULL
        cdef char* cp5 = NULL

        try:
            cp3 = <char*>malloc(4*1040)
            cp5 = <char*>malloc(4*16384)

            strcpy(cp3, p3)
            strcpy(cp5, p5)

            GetFeatureProperties_GEOSTRING(get_p_geo(), &self.handle, p2, cp3, &p4, cp5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16, &p17)
            return (cp3, cp5, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17)
        finally:
            if cp3: free(cp3)
            if cp5: free(cp5)



    def get_section_properties(self, const char* p2, const char* p3, const char* p5, int32_t p7, double p8, double p9, double p10, double p11, double p12, double p13, double p14, double p15, double p16):
        cdef int32_t p4 = 4*1040
        cdef int32_t p6 = 4*1040
        cdef char* cp3 = NULL
        cdef char* cp5 = NULL

        try:
            cp3 = <char*>malloc(4*1040)
            cp5 = <char*>malloc(4*1040)

            strcpy(cp3, p3)
            strcpy(cp5, p5)

            GetSectionProperties_GEOSTRING(get_p_geo(), &self.handle, p2, cp3, &p4, cp5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16)
            return (cp3, cp5, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16)
        finally:
            if cp3: free(cp3)
            if cp5: free(cp5)



    def get_shape_properties(self, const char* p2, const char* p3, const char* p5, WrapVV p7, WrapVV p8, WrapVV p9):
        cdef int32_t p4 = 4*64
        cdef int32_t p6 = 4*64
        cdef char* cp3 = NULL
        cdef char* cp5 = NULL

        try:
            cp3 = <char*>malloc(4*64)
            cp5 = <char*>malloc(4*64)

            strcpy(cp3, p3)
            strcpy(cp5, p5)

            GetShapeProperties_GEOSTRING(get_p_geo(), &self.handle, p2, cp3, &p4, cp5, &p6, &p7.handle, &p8.handle, &p9.handle)
            return (cp3, cp5)
        finally:
            if cp3: free(cp3)
            if cp5: free(cp5)


    pass



cdef class WrapGIS:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_GIS(get_p_geo(), &self.handle)




    @classmethod
    def create(cls, const char* p1, const char* p2, int32_t p3):

        try:


            _return_val = WrapGIS(Create_GIS(get_p_geo(), p1, p2, &p3))
            return _return_val
        finally:
            pass


    def create_map2_d(self, const char* p2, double p3, WrapIPJ p4, int32_t p5):

        try:


            CreateMap2D_GIS(get_p_geo(), &self.handle, p2, &p3, &p4.handle, &p5)
            
        finally:
            pass




    def get_bpr_models_lst(self, const char* p2, WrapLST p3):

        try:


            GetBPRModelsLST_GIS(get_p_geo(), &self.handle, p2, &p3.handle)
            
        finally:
            pass


    def get_ipj(self):

        try:


            _return_val = WrapIPJ(GetIPJ_GIS(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def get_meta(self, WrapMETA p2):

        try:


            GetMETA_GIS(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_range(self, double p2, double p3, double p4, double p5, double p6, double p7):

        try:


            GetRange_GIS(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            return (p2, p3, p4, p5, p6, p7)
        finally:
            pass

    @classmethod
    def datamine_type(cls, const char* p1):

        try:


            _return_val = iDatamineType_GIS(get_p_geo(), p1)
            return _return_val
        finally:
            pass


    def get_file_name(self, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            IGetFileName_GIS(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def is_mi_map_file(cls, const char* p1):

        try:


            _return_val = iIsMIMapFile_GIS(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def is_mi_raster_tab_file(cls, const char* p1):

        try:


            _return_val = iIsMIRasterTabFile_GIS(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def is_mi_rotated_raster_tab_file(cls, const char* p1):

        try:


            _return_val = iIsMIRotatedRasterTabFile_GIS(get_p_geo(), p1)
            return _return_val
        finally:
            pass


    def is_shp_file_3d(self):

        try:


            _return_val = iIsSHPFile3D_GIS(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def is_shp_file_point(self):

        try:


            _return_val = iIsSHPFilePoint_GIS(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def num_attribs(self):

        try:


            _return_val = iNumAttribs_GIS(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def num_shapes(self):

        try:


            _return_val = iNumShapes_GIS(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def scan_mi_raster_tab_file(cls, const char* p1, const char* p2, WrapIPJ p4):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            IScanMIRasterTabFile_GIS(get_p_geo(), p1, cp2, &p3, &p4.handle)
            return cp2
        finally:
            if cp2: free(cp2)



    def load_ascii(self, WrapWA p2):

        try:


            LoadASCII_GIS(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def load_gdb(self, WrapDB p2):

        try:


            LoadGDB_GIS(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def load_map(self, WrapMVIEW p2):

        try:


            LoadMAP_GIS(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def load_map_ex(self, WrapMAP p2, const char* p3):

        try:


            LoadMAPEx_GIS(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass


    def load_meta_groups_map(self, WrapMVIEW p2, WrapMETA p3, int32_t p4, const char* p5, const char* p6):

        try:


            LoadMetaGroupsMAP_GIS(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4, p5, p6)
            
        finally:
            pass


    def load_ply(self, WrapPLY p2):

        try:


            LoadPLY_GIS(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def load_shapes_gdb(self, WrapDB p2):

        try:


            LoadShapesGDB_GIS(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_dm_wireframe_pt_file(self, const char* p2):

        try:


            SetDmWireframePtFile_GIS(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def set_ipj(self, WrapIPJ p2):

        try:


            SetIPJ_GIS(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_lst(self, WrapLST p2):

        try:


            SetLST_GIS(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_meta(self, WrapMETA p2):

        try:


            SetMETA_GIS(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_triangulation_object_index(self, int32_t p2):

        try:


            SetTriangulationObjectIndex_GIS(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass

    pass



cdef class WrapHGD:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_HGD(get_p_geo(), &self.handle)




    @classmethod
    def create(cls, const char* p1):

        try:


            _return_val = WrapHGD(Create_HGD(get_p_geo(), p1))
            return _return_val
        finally:
            pass




    def export_img(self, const char* p2):

        try:


            ExportIMG_HGD(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def get_meta(self, WrapMETA p2):

        try:


            GetMETA_HGD(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def h_create_img(cls, WrapIMG p1, const char* p2):

        try:


            _return_val = WrapHGD(hCreateIMG_HGD(get_p_geo(), &p1.handle, p2))
            return _return_val
        finally:
            pass


    def set_meta(self, WrapMETA p2):

        try:


            SetMETA_HGD(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    pass



cdef class WrapHXYZ:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_HXYZ(get_p_geo(), &self.handle)




    @classmethod
    def create(cls, const char* p1):

        try:


            _return_val = WrapHXYZ(Create_HXYZ(get_p_geo(), p1))
            return _return_val
        finally:
            pass




    def get_meta(self, WrapMETA p2):

        try:


            GetMETA_HXYZ(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def h_create_db(cls, WrapDB p1, WrapVV p2, const char* p3):

        try:


            _return_val = WrapHXYZ(hCreateDB_HXYZ(get_p_geo(), &p1.handle, &p2.handle, p3))
            return _return_val
        finally:
            pass

    @classmethod
    def h_create_sql(cls, const char* p1, const char* p2, const char* p3, const char* p4, WrapIPJ p5, const char* p6):

        try:


            _return_val = WrapHXYZ(hCreateSQL_HXYZ(get_p_geo(), p1, p2, p3, p4, &p5.handle, p6))
            return _return_val
        finally:
            pass


    def set_meta(self, WrapMETA p2):

        try:


            SetMETA_HXYZ(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    pass



cdef class WrapIGRF:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_IGRF(get_p_geo(), &self.handle)





    def calc(self, double p2, double p3, double p4, double p5, double p6, double p7):

        try:


            Calc_IGRF(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            return (p5, p6, p7)
        finally:
            pass


    def calc_vv(self, WrapVV p2, WrapVV p3, WrapVV p4, WrapVV p5, WrapVV p6, WrapVV p7):

        try:


            CalcVV_IGRF(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle, &p5.handle, &p6.handle, &p7.handle)
            
        finally:
            pass

    @classmethod
    def create(cls, double p1, int32_t p2, const char* p3):

        try:


            _return_val = WrapIGRF(Create_IGRF(get_p_geo(), &p1, &p2, p3))
            return _return_val
        finally:
            pass

    @classmethod
    def date_range(cls, const char* p1, double p2, double p3):

        try:


            DateRange_IGRF(get_p_geo(), p1, &p2, &p3)
            return (p2, p3)
        finally:
            pass



    pass



cdef class WrapIMG:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_IMG(get_p_geo(), &self.handle)




    @classmethod
    def average2(cls, const char* p1, const char* p2):

        try:


            Average2_IMG(get_p_geo(), p1, p2)
            
        finally:
            pass


    def copy(self, WrapIMG p2):

        try:


            Copy_IMG(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def create(cls, int32_t p1, int32_t p2, int32_t p3, int32_t p4):

        try:


            _return_val = WrapIMG(Create_IMG(get_p_geo(), &p1, &p2, &p3, &p4))
            return _return_val
        finally:
            pass

    @classmethod
    def create_file(cls, int32_t p1, const char* p2, int32_t p3):

        try:


            _return_val = WrapIMG(CreateFile_IMG(get_p_geo(), &p1, p2, &p3))
            return _return_val
        finally:
            pass

    @classmethod
    def create_mem(cls, int32_t p1, int32_t p2, int32_t p3, int32_t p4):

        try:


            _return_val = WrapIMG(CreateMem_IMG(get_p_geo(), &p1, &p2, &p3, &p4))
            return _return_val
        finally:
            pass

    @classmethod
    def create_new_file(cls, int32_t p1, int32_t p2, int32_t p3, int32_t p4, const char* p5):

        try:


            _return_val = WrapIMG(CreateNewFile_IMG(get_p_geo(), &p1, &p2, &p3, &p4, p5))
            return _return_val
        finally:
            pass

    @classmethod
    def create_out_file(cls, int32_t p1, const char* p2, WrapIMG p3):

        try:


            _return_val = WrapIMG(CreateOutFile_IMG(get_p_geo(), &p1, p2, &p3.handle))
            return _return_val
        finally:
            pass


    def create_projected(self, WrapIPJ p2):

        try:


            CreateProjected_IMG(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def create_projected2(self, WrapIPJ p2, double p3):

        try:


            CreateProjected2_IMG(get_p_geo(), &self.handle, &p2.handle, &p3)
            
        finally:
            pass


    def create_projected3(self, WrapIPJ p2, double p3, double p4):

        try:


            CreateProjected3_IMG(get_p_geo(), &self.handle, &p2.handle, &p3, &p4)
            
        finally:
            pass




    def geth_pg(self):

        try:


            _return_val = WrapPG(GethPG_IMG(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def get_info(self, double p2, double p3, double p4, double p5, double p6):

        try:


            GetInfo_IMG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6)
            return (p2, p3, p4, p5, p6)
        finally:
            pass


    def get_ipj(self, WrapIPJ p2):

        try:


            GetIPJ_IMG(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_meta(self, WrapMETA p2):

        try:


            GetMETA_IMG(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_pg(self, WrapPG p2):

        try:


            GetPG_IMG(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_projected_cell_size(self, WrapIPJ p2, double p3):

        try:


            GetProjectedCellSize_IMG(get_p_geo(), &self.handle, &p2.handle, &p3)
            return p3
        finally:
            pass


    def get_tr(self, WrapTR p2):

        try:


            GetTR_IMG(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def element_type(self, int32_t p2):

        try:


            _return_val = iElementType_IMG(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def e_type(self):

        try:


            _return_val = iEType_IMG(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_def_itr(self, WrapITR p2):

        try:


            _return_val = iGetDefITR_IMG(get_p_geo(), &self.handle, &p2.handle)
            return _return_val
        finally:
            pass


    def is_colour(self):

        try:


            _return_val = iIsColour_IMG(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def is_valid_img_file(cls, const char* p1):

        try:


            _return_val = iIsValidIMGFile_IMG(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def is_valid_img_file_ex(cls, const char* p1, const char* p2):
        cdef int32_t p3 = 4*1024
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1024)

            strcpy(cp2, p2)

            _return_val = iIsValidIMGFileEx_IMG(get_p_geo(), p1, cp2, &p3)
            return (_return_val, cp2)
        finally:
            if cp2: free(cp2)



    def ne(self):

        try:


            _return_val = iNE_IMG(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def inherit(self, WrapIPJ p2, double p3):

        try:


            Inherit_IMG(get_p_geo(), &self.handle, &p2.handle, &p3)
            
        finally:
            pass


    def inherit_img(self, WrapIMG p2):

        try:


            InheritIMG_IMG(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def nv(self):

        try:


            _return_val = iNV_IMG(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def nx(self):

        try:


            _return_val = iNX_IMG(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def ny(self):

        try:


            _return_val = iNY_IMG(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def query(self, int32_t p2):

        try:


            _return_val = iQuery_IMG(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def query_kx(self):

        try:


            _return_val = iQueryKX_IMG(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def set_def_itr(self, WrapITR p2):

        try:


            _return_val = iSetDefITR_IMG(get_p_geo(), &self.handle, &p2.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def user_preference_to_plot_as_colour_shaded_grid(cls):

        try:


            _return_val = iUserPreferenceToPlotAsColourShadedGrid_IMG(get_p_geo())
            return _return_val
        finally:
            pass


    def load_img(self, WrapIMG p2):

        try:


            LoadIMG_IMG(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def load_into_pager(self):

        try:


            LoadIntoPager_IMG(get_p_geo(), &self.handle)
            
        finally:
            pass


    def opt_kx(self, int32_t p2):

        try:


            OptKX_IMG(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def read_v(self, int32_t p2, int32_t p3, int32_t p4, WrapVV p5):

        try:


            ReadV_IMG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5.handle)
            
        finally:
            pass


    def read_x(self, int32_t p2, int32_t p3, int32_t p4, WrapVV p5):

        try:


            ReadX_IMG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5.handle)
            
        finally:
            pass


    def read_y(self, int32_t p2, int32_t p3, int32_t p4, WrapVV p5):

        try:


            ReadY_IMG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5.handle)
            
        finally:
            pass

    @classmethod
    def refresh_gi(cls, const char* p1):

        try:


            RefreshGI_IMG(get_p_geo(), p1)
            
        finally:
            pass


    def relocate(self, double p2, double p3, double p4, double p5, int32_t p6):

        try:


            Relocate_IMG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def report(cls, const char* p1, WrapWA p2, int32_t p3, int32_t p4, const char* p5):

        try:


            Report_IMG(get_p_geo(), p1, &p2.handle, &p3, &p4, p5)
            
        finally:
            pass

    @classmethod
    def report_csv(cls, const char* p1, WrapWA p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            ReportCSV_IMG(get_p_geo(), p1, &p2.handle, &p3, &p4, &p5)
            
        finally:
            pass


    def get_z(self, double p2, double p3):

        try:


            _return_val = rGetZ_IMG(get_p_geo(), &self.handle, &p2, &p3)
            return _return_val
        finally:
            pass


    def query(self, int32_t p2):

        try:


            _return_val = rQuery_IMG(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def set_grid_unchanged(self):

        try:


            SetGridUnchanged_IMG(get_p_geo(), &self.handle)
            
        finally:
            pass


    def set_info(self, double p2, double p3, double p4, double p5, double p6):

        try:


            SetInfo_IMG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass


    def set_ipj(self, WrapIPJ p2):

        try:


            SetIPJ_IMG(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_meta(self, WrapMETA p2):

        try:


            SetMETA_IMG(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_pg(self, WrapPG p2):

        try:


            SetPG_IMG(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_tr(self, WrapTR p2):

        try:


            SetTR_IMG(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def sync(cls, const char* p1):

        try:


            Sync_IMG(get_p_geo(), p1)
            
        finally:
            pass


    def write_v(self, int32_t p2, int32_t p3, int32_t p4, WrapVV p5):

        try:


            WriteV_IMG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5.handle)
            
        finally:
            pass


    def write_x(self, int32_t p2, int32_t p3, int32_t p4, WrapVV p5):

        try:


            WriteX_IMG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5.handle)
            
        finally:
            pass


    def write_y(self, int32_t p2, int32_t p3, int32_t p4, WrapVV p5):

        try:


            WriteY_IMG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5.handle)
            
        finally:
            pass


    def set_double_parameter(self, const char* p2, double p3):

        try:


            SetRealParameter_IMG(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass


    def get_double_parameter(self, const char* p2):

        try:


            _return_val = rGetRealParameter_IMG(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass

    pass



cdef class WrapIMU:
    




    @classmethod
    def agg_to_geo_color(cls, WrapAGG p1, const char* p2, WrapIPJ p3, double p4):

        try:


            AggToGeoColor_IMU(get_p_geo(), &p1.handle, p2, &p3.handle, &p4)
            
        finally:
            pass

    @classmethod
    def crc(cls, WrapIMG p1, int32_t p2):

        try:


            _return_val = CRC_IMU(get_p_geo(), &p1.handle, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def crc_grid(cls, const char* p1, int32_t p2):

        try:


            _return_val = CRCGrid_IMU(get_p_geo(), p1, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def crc_grid_inexact(cls, const char* p1, int32_t p2, int32_t p3, int32_t p4):

        try:


            _return_val = CRCGridInexact_IMU(get_p_geo(), p1, &p2, &p3, &p4)
            return _return_val
        finally:
            pass

    @classmethod
    def crc_inexact(cls, WrapIMG p1, int32_t p2, int32_t p3, int32_t p4):

        try:


            _return_val = CRCInexact_IMU(get_p_geo(), &p1.handle, &p2, &p3, &p4)
            return _return_val
        finally:
            pass

    @classmethod
    def export_grid_without_data_section_xml(cls, const char* p1, int32_t p2, const char* p3):

        try:


            ExportGridWithoutDataSectionXML_IMU(get_p_geo(), p1, &p2, p3)
            return p2
        finally:
            pass

    @classmethod
    def export_grid_xml(cls, const char* p1, int32_t p2, const char* p3):

        try:


            ExportGridXML_IMU(get_p_geo(), p1, &p2, p3)
            return p2
        finally:
            pass

    @classmethod
    def export_raw_xml(cls, WrapIMG p1, int32_t p2, const char* p3):

        try:


            ExportRawXML_IMU(get_p_geo(), &p1.handle, &p2, p3)
            return p2
        finally:
            pass

    @classmethod
    def export_xml(cls, WrapIMG p1, int32_t p2, const char* p3):

        try:


            ExportXML_IMU(get_p_geo(), &p1.handle, &p2, p3)
            return p2
        finally:
            pass

    @classmethod
    def get_zvv(cls, WrapIMG p1, WrapVV p2, WrapVV p3, WrapVV p4):

        try:


            GetZVV_IMU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass

    @classmethod
    def get_z_peaks_vv(cls, WrapIMG p1, WrapVV p2, WrapVV p3, WrapVV p4):

        try:


            GetZPeaksVV_IMU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass

    @classmethod
    def grid_add(cls, WrapIMG p1, double p2, WrapIMG p3, double p4, WrapIMG p5):

        try:


            GridAdd_IMU(get_p_geo(), &p1.handle, &p2, &p3.handle, &p4, &p5.handle)
            
        finally:
            pass

    @classmethod
    def grid_agc(cls, WrapIMG p1, WrapIMG p2, int32_t p3, double p4, int32_t p5):

        try:


            GridAGC_IMU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def grid_bool(cls, WrapIMG p1, WrapIMG p2, const char* p3, int32_t p4, int32_t p5, int32_t p6):

        try:


            GridBool_IMU(get_p_geo(), &p1.handle, &p2.handle, p3, &p4, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def grid_edge(cls, const char* p1, WrapVV p2, WrapVV p3):

        try:


            GridEdge_IMU(get_p_geo(), p1, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def grid_edge_ply(cls, WrapIMG p1, WrapPLY p2, int32_t p3):

        try:


            GridEdgePLY_IMU(get_p_geo(), &p1.handle, &p2.handle, &p3)
            
        finally:
            pass

    @classmethod
    def grid_expand(cls, WrapIMG p1, const char* p2, double p3, int32_t p4, int32_t p5, int32_t p6):

        try:


            GridExpand_IMU(get_p_geo(), &p1.handle, p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def grid_exp_fill(cls, const char* p1, const char* p2, double p3, int32_t p4):

        try:


            GridExpFill_IMU(get_p_geo(), p1, p2, &p3, &p4)
            
        finally:
            pass

    @classmethod
    def grid_fill(cls, WrapIMG p1, WrapIMG p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, double p7, double p8, double p9, int32_t p10, int32_t p11):

        try:


            GridFill_IMU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11)
            
        finally:
            pass

    @classmethod
    def grid_filt(cls, WrapIMG p1, WrapIMG p2, int32_t p3, double p4, int32_t p5, int32_t p6, int32_t p7, const char* p8, WrapVV p9):

        try:


            GridFilt_IMU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5, &p6, &p7, p8, &p9.handle)
            
        finally:
            pass

    @classmethod
    def grid_head(cls, const char* p1, double p2, double p3, double p4, double p5, double p6):

        try:


            GridHead_IMU(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def grid_in_fill(cls, WrapIMG p1, const char* p2, int32_t p3, int32_t p4):

        try:


            GridInFill_IMU(get_p_geo(), &p1.handle, p2, &p3, &p4)
            
        finally:
            pass

    @classmethod
    def grid_mask(cls, const char* p1, const char* p2, WrapPLY p3, int32_t p4):

        try:


            GridMask_IMU(get_p_geo(), p1, p2, &p3.handle, &p4)
            
        finally:
            pass

    @classmethod
    def grid_peak(cls, const char* p1, int32_t p2, WrapVV p3, WrapVV p4, WrapVV p5):

        try:


            GridPeak_IMU(get_p_geo(), p1, &p2, &p3.handle, &p4.handle, &p5.handle)
            
        finally:
            pass

    @classmethod
    def grid_ply(cls, WrapIMG p1, WrapPLY p2, int32_t p3):

        try:


            GridPLY_IMU(get_p_geo(), &p1.handle, &p2.handle, &p3)
            
        finally:
            pass

    @classmethod
    def grid_ply_ex(cls, WrapIMG p1, WrapPLY p2, int32_t p3, int32_t p4):

        try:


            GridPLYEx_IMU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4)
            
        finally:
            pass

    @classmethod
    def grid_reproject_and_window(cls, const char* p1, const char* p2, WrapIPJ p3, double p4, double p5, double p6, double p7):

        try:


            GridReprojectAndWindow_IMU(get_p_geo(), p1, p2, &p3.handle, &p4, &p5, &p6, &p7)
            
        finally:
            pass

    @classmethod
    def grid_resample(cls, const char* p1, const char* p2, double p3, double p4, double p5, double p6, int32_t p7, int32_t p8):

        try:


            GridResample_IMU(get_p_geo(), p1, p2, &p3, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass

    @classmethod
    def grid_resize(cls, const char* p1, const char* p2):

        try:


            GridResize_IMU(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def grid_shad(cls, const char* p1, const char* p2, double p3, double p4, double p5):

        try:


            GridShad_IMU(get_p_geo(), p1, p2, &p3, &p4, &p5)
            return (p3, p4, p5)
        finally:
            pass

    @classmethod
    def grid_st(cls, const char* p1, WrapST p2):

        try:


            GridST_IMU(get_p_geo(), p1, &p2.handle)
            
        finally:
            pass

    @classmethod
    def grid_stat(cls, const char* p1, int32_t p2, int32_t p3, int32_t p4, double p5, double p6, int32_t p7, double p8, double p9, double p10, double p11, double p12):

        try:


            GridStat_IMU(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12)
            return (p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)
        finally:
            pass

    @classmethod
    def grid_stat_comp(cls, const char* p1, int32_t p2, int32_t p3, int32_t p4, double p5, double p6, int32_t p7, double p8, double p9, double p10, double p11, double p12, double p13):

        try:


            GridStatComp_IMU(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13)
            return (p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13)
        finally:
            pass

    @classmethod
    def grid_stat_ext(cls, const char* p1, int32_t p2, int32_t p3, int32_t p4, double p5, double p6, double p7, double p8):

        try:


            GridStatExt_IMU(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6, &p7, &p8)
            return (p3, p4, p5, p6, p7, p8)
        finally:
            pass

    @classmethod
    def grid_stat_trend(cls, const char* p1, int32_t p2, double p3, double p4, double p5):

        try:


            GridStatTrend_IMU(get_p_geo(), p1, &p2, &p3, &p4, &p5)
            return (p2, p3, p4, p5)
        finally:
            pass

    @classmethod
    def grid_stat_trend_ext(cls, const char* p1, int32_t p2, int32_t p3, double p4, double p5, WrapVM p6):

        try:


            GridStatTrendExt_IMU(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6.handle)
            return (p2, p3, p4, p5)
        finally:
            pass

    @classmethod
    def slope_standard_deviation(cls, WrapIMG p1):

        try:


            _return_val = rSlopeStandardDeviation_IMU(get_p_geo(), &p1.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def grid_stitch(cls, const char* p1, const char* p2, const char* p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, double p8, int32_t p9, int32_t p10, WrapPLY p11, double p12, int32_t p13):

        try:


            GridStitch_IMU(get_p_geo(), p1, p2, p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11.handle, &p12, &p13)
            
        finally:
            pass

    @classmethod
    def grid_stitch_ctl(cls, const char* p1):

        try:


            GridStitchCtl_IMU(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def grid_tiff(cls, const char* p1, const char* p2, const char* p3, int32_t p4, int32_t p5, int32_t p6, double p7, int32_t p8, double p9):

        try:


            GridTiff_IMU(get_p_geo(), p1, p2, p3, &p4, &p5, &p6, &p7, &p8, &p9)
            
        finally:
            pass

    @classmethod
    def grid_trnd(cls, WrapIMG p1, WrapIMG p2, int32_t p3, int32_t p4, int32_t p5, WrapVM p6, int32_t p7):

        try:


            GridTrnd_IMU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5, &p6.handle, &p7)
            
        finally:
            pass

    @classmethod
    def grid_trns(cls, const char* p1, int32_t p2):

        try:


            GridTrns_IMU(get_p_geo(), p1, &p2)
            
        finally:
            pass

    @classmethod
    def grid_vd(cls, WrapIMG p1, WrapIMG p2):

        try:


            GridVD_IMU(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def grid_vol(cls, WrapIMG p1, double p2, double p3, double p4, double p5, double p6):

        try:


            GridVol_IMU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6)
            return (p4, p5, p6)
        finally:
            pass

    @classmethod
    def grid_wind(cls, WrapIMG p1, const char* p2, int32_t p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, int32_t p11, int32_t p12, const char* p13):

        try:


            GridWind_IMU(get_p_geo(), &p1.handle, p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, p13)
            
        finally:
            pass

    @classmethod
    def grid_wind2(cls, WrapIMG p1, const char* p2, double p3, double p4, double p5, double p6, double p7, double p8, int32_t p9):

        try:


            GridWind2_IMU(get_p_geo(), &p1.handle, p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9)
            
        finally:
            pass

    @classmethod
    def grid_xyz(cls, WrapIMG p1, const char* p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6):

        try:


            GridXYZ_IMU(get_p_geo(), &p1.handle, p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def grid_type(cls, const char* p1):

        try:


            _return_val = iGridType_IMU(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def make_mi_tab_file(cls, const char* p1):

        try:


            MakeMITabFile_IMU(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def make_mi_tabfrom_grid(cls, const char* p1):

        try:


            MakeMITabfromGrid_IMU(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def make_mi_tabfrom_map(cls, const char* p1):

        try:


            MakeMITabfromMap_IMU(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def mosaic(cls, const char* p1, const char* p2, WrapIPJ p3, double p4):

        try:


            _return_val = WrapIMG(Mosaic_IMU(get_p_geo(), p1, p2, &p3.handle, &p4))
            return _return_val
        finally:
            pass

    @classmethod
    def peak_size(cls, const char* p1, WrapVV p2, WrapVV p3, int32_t p4, double p5, WrapVV p6):

        try:


            PeakSize_IMU(get_p_geo(), p1, &p2.handle, &p3.handle, &p4, &p5, &p6.handle)
            
        finally:
            pass

    @classmethod
    def peak_size2(cls, const char* p1, WrapVV p2, WrapVV p3, int32_t p4, WrapVV p5):

        try:


            PeakSize2_IMU(get_p_geo(), p1, &p2.handle, &p3.handle, &p4, &p5.handle)
            
        finally:
            pass

    @classmethod
    def pigeon_hole(cls, WrapIMG p1, WrapVV p2, WrapVV p3, int32_t p4):

        try:


            PigeonHole_IMU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4)
            return p4
        finally:
            pass

    @classmethod
    def profile(cls, WrapIMG p1, double p2, double p3, double p4, double p5, double p6, WrapVV p7):

        try:


            Profile_IMU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7.handle)
            
        finally:
            pass

    @classmethod
    def profile_vv(cls, WrapIMG p1, WrapVV p2, WrapVV p3, WrapVV p4):

        try:


            ProfileVV_IMU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass

    @classmethod
    def range_grids(cls, const char* p1, WrapIPJ p2, double p3, double p4, double p5, double p6):

        try:


            RangeGrids_IMU(get_p_geo(), p1, &p2.handle, &p3, &p4, &p5, &p6)
            return (p3, p4, p5, p6)
        finally:
            pass

    @classmethod
    def range_ll(cls, WrapIMG p1, double p2, double p3, double p4, double p5):

        try:


            RangeLL_IMU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5)
            return (p2, p3, p4, p5)
        finally:
            pass

    @classmethod
    def stat_window(cls, WrapIMG p1, double p2, double p3, double p4, double p5, int32_t p6, WrapST p7):

        try:


            StatWindow_IMU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7.handle)
            
        finally:
            pass

    @classmethod
    def update_ply(cls, WrapIMG p1, WrapPLY p2):

        try:


            UpdatePLY_IMU(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass

    pass



cdef class WrapIPJ:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_IPJ(get_p_geo(), &self.handle)





    def clear_warp(self):

        try:


            _ClearWarp_IPJ(get_p_geo(), &self.handle)
            
        finally:
            pass


    def make_geographic(self):

        try:


            _MakeGeographic_IPJ(get_p_geo(), &self.handle)
            
        finally:
            pass


    def make_wgs84(self):

        try:


            _MakeWGS84_IPJ(get_p_geo(), &self.handle)
            
        finally:
            pass


    def set_units(self, double p2, const char* p3):

        try:


            _SetUnits_IPJ(get_p_geo(), &self.handle, &p2, p3)
            
        finally:
            pass


    def add_exagg_warp(self, double p2, double p3, double p4, double p5, double p6, double p7):

        try:


            AddExaggWarp_IPJ(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass


    def add_log_warp(self, int32_t p2, int32_t p3):

        try:


            AddLogWarp_IPJ(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def add_matrix_warp(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11, double p12, double p13, double p14, double p15, double p16, double p17):

        try:


            AddMatrixWarp_IPJ(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16, &p17)
            
        finally:
            pass


    def add_warp(self, int32_t p2, WrapVV p3, WrapVV p4, WrapVV p5, WrapVV p6):

        try:


            AddWarp_IPJ(get_p_geo(), &self.handle, &p2, &p3.handle, &p4.handle, &p5.handle, &p6.handle)
            
        finally:
            pass


    def clear_coordinate_system(self):

        try:


            ClearCoordinateSystem_IPJ(get_p_geo(), &self.handle)
            
        finally:
            pass


    def clear_orientation(self):

        try:


            ClearOrientation_IPJ(get_p_geo(), &self.handle)
            
        finally:
            pass


    def convert_orientation_warp_vv(self, WrapVV p2, WrapVV p3, WrapVV p4, int32_t p5):

        try:


            ConvertOrientationWarpVV_IPJ(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle, &p5)
            
        finally:
            pass


    def copy(self, WrapIPJ p2):

        try:


            Copy_IPJ(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def copy_projection(self, WrapIPJ p2):

        try:


            CopyProjection_IPJ(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def create(cls):

        try:


            _return_val = WrapIPJ(Create_IPJ(get_p_geo()))
            return _return_val
        finally:
            pass

    @classmethod
    def create_s(cls, WrapBF p1):

        try:


            _return_val = WrapIPJ(CreateS_IPJ(get_p_geo(), &p1.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def create_xml(cls, const char* p1):

        try:


            _return_val = WrapIPJ(CreateXML_IPJ(get_p_geo(), p1))
            return _return_val
        finally:
            pass




    def get_3d_view(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10):

        try:


            Get3DView_IPJ(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10)
            return (p2, p3, p4, p5, p6, p7, p8, p9, p10)
        finally:
            pass


    def get_3d_view_ex(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, int32_t p11, int32_t p12):

        try:


            Get3DViewEx_IPJ(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12)
            return (p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)
        finally:
            pass


    def get_crooked_section_view_v_vs(self, WrapVV p2, WrapVV p3, WrapVV p4, int32_t p5):

        try:


            GetCrookedSectionViewVVs_IPJ(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle, &p5)
            return p5
        finally:
            pass

    @classmethod
    def get_list(cls, int32_t p1, const char* p2, WrapLST p3):

        try:


            GetList_IPJ(get_p_geo(), &p1, p2, &p3.handle)
            
        finally:
            pass


    def get_orientation_info(self, double p2, double p3, double p4, double p5, double p6):

        try:


            GetOrientationInfo_IPJ(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6)
            return (p2, p3, p4, p5, p6)
        finally:
            pass


    def get_plane_equation(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11, double p12, double p13, double p14):

        try:


            GetPlaneEquation_IPJ(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14)
            return (p6, p7, p8, p9, p10, p11, p12, p13, p14)
        finally:
            pass


    def get_plane_equation2(self, WrapIPJ p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11, double p12, double p13, double p14, double p15):

        try:


            GetPlaneEquation2_IPJ(get_p_geo(), &self.handle, &p2.handle, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15)
            return (p7, p8, p9, p10, p11, p12, p13, p14, p15)
        finally:
            pass


    def compare_datums(self, WrapIPJ p2):

        try:


            _return_val = iCompareDatums_IPJ(get_p_geo(), &self.handle, &p2.handle)
            return _return_val
        finally:
            pass


    def convert_warp(self, double p2, double p3, double p4, int32_t p5):

        try:


            _return_val = iConvertWarp_IPJ(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            return (_return_val, p2, p3, p4)
        finally:
            pass


    def convert_warp_vv(self, WrapVV p2, WrapVV p3, int32_t p4):

        try:


            _return_val = iConvertWarpVV_IPJ(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4)
            return _return_val
        finally:
            pass


    def coordinate_systems_are_the_same(self, WrapIPJ p2):

        try:


            _return_val = iCoordinateSystemsAreTheSame_IPJ(get_p_geo(), &self.handle, &p2.handle)
            return _return_val
        finally:
            pass


    def coordinate_systems_are_the_same_within_a_small_tolerance(self, WrapIPJ p2):

        try:


            _return_val = iCoordinateSystemsAreTheSameWithinASmallTolerance_IPJ(get_p_geo(), &self.handle, &p2.handle)
            return _return_val
        finally:
            pass


    def get_display_name(self, const char* p2):
        cdef int32_t p3 = 4*1024
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1024)

            strcpy(cp2, p2)

            IGetDisplayName_IPJ(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def get_esri(self, const char* p2):
        cdef int32_t p3 = 4*16384
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*16384)

            strcpy(cp2, p2)

            IGetESRI_IPJ(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def get_gxf(self, const char* p2, const char* p3, const char* p4, const char* p5, const char* p6):
        cdef int32_t p7 = 4*160
        cdef char* cp2 = NULL
        cdef char* cp3 = NULL
        cdef char* cp4 = NULL
        cdef char* cp5 = NULL
        cdef char* cp6 = NULL

        try:
            cp2 = <char*>malloc(4*160)
            cp3 = <char*>malloc(4*160)
            cp4 = <char*>malloc(4*160)
            cp5 = <char*>malloc(4*160)
            cp6 = <char*>malloc(4*160)

            strcpy(cp2, p2)
            strcpy(cp3, p3)
            strcpy(cp4, p4)
            strcpy(cp5, p5)
            strcpy(cp6, p6)

            IGetGXF_IPJ(get_p_geo(), &self.handle, cp2, cp3, cp4, cp5, cp6, &p7)
            return (cp2, cp3, cp4, cp5, cp6)
        finally:
            if cp2: free(cp2)
            if cp3: free(cp3)
            if cp4: free(cp4)
            if cp5: free(cp5)
            if cp6: free(cp6)



    def get_mi_coord_sys(self, const char* p2, const char* p4):
        cdef int32_t p3 = 4*1024
        cdef int32_t p5 = 4*1024
        cdef char* cp2 = NULL
        cdef char* cp4 = NULL

        try:
            cp2 = <char*>malloc(4*1024)
            cp4 = <char*>malloc(4*1024)

            strcpy(cp2, p2)
            strcpy(cp4, p4)

            IGetMICoordSys_IPJ(get_p_geo(), &self.handle, cp2, &p3, cp4, &p5)
            return (cp2, cp4)
        finally:
            if cp2: free(cp2)
            if cp4: free(cp4)



    def get_name(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*1024
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*1024)

            strcpy(cp3, p3)

            IGetName_IPJ(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def set_vcs(self, const char* p2):

        try:


            SetVCS_IPJ(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def get_orientation(self):

        try:


            _return_val = iGetOrientation_IPJ(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_orientation_name(self, const char* p2):
        cdef int32_t p3 = 4*1024
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1024)

            strcpy(cp2, p2)

            IGetOrientationName_IPJ(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def get_units(self, double p2, const char* p3):
        cdef int32_t p4 = 4*128
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*128)

            strcpy(cp3, p3)

            IGetUnits_IPJ(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return (p2, cp3)
        finally:
            if cp3: free(cp3)



    def get_xml(self, const char* p2):
        cdef int32_t p3 = 4*16384
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*16384)

            strcpy(cp2, p2)

            IGetXML_IPJ(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def has_projection(self):

        try:


            _return_val = iHasProjection_IPJ(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def is_3d_inverted(self):

        try:


            _return_val = iIs3DInverted_IPJ(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def is_3d_inverted_angles(self):

        try:


            _return_val = iIs3DInvertedAngles_IPJ(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def is_geographic(self):

        try:


            _return_val = iIsGeographic_IPJ(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def orientations_are_the_same(self, WrapIPJ p2):

        try:


            _return_val = iOrientationsAreTheSame_IPJ(get_p_geo(), &self.handle, &p2.handle)
            return _return_val
        finally:
            pass


    def orientations_are_the_same_within_a_small_tolerance(self, WrapIPJ p2):

        try:


            _return_val = iOrientationsAreTheSameWithinASmallTolerance_IPJ(get_p_geo(), &self.handle, &p2.handle)
            return _return_val
        finally:
            pass


    def has_section_orientation(self):

        try:


            _return_val = iHasSectionOrientation_IPJ(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def projection_type_is_fully_supported(self):

        try:


            _return_val = iProjectionTypeIsFullySupported_IPJ(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def set_gxf(self, const char* p2, const char* p3, const char* p4, const char* p5, const char* p6):

        try:


            _return_val = iSetGXF_IPJ(get_p_geo(), &self.handle, p2, p3, p4, p5, p6)
            return _return_val
        finally:
            pass


    def source_type(self):

        try:


            _return_val = iSourceType_IPJ(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def support_datum_transform(self, WrapIPJ p2):

        try:


            _return_val = iSupportDatumTransform_IPJ(get_p_geo(), &self.handle, &p2.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def unit_name(cls, double p1, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*128
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*128)

            strcpy(cp3, p3)

            IUnitName_IPJ(get_p_geo(), &p1, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def warped(self):

        try:


            _return_val = iWarped_IPJ(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def warps_are_the_same(self, WrapIPJ p2):

        try:


            _return_val = iWarpsAreTheSame_IPJ(get_p_geo(), &self.handle, &p2.handle)
            return _return_val
        finally:
            pass


    def warps_are_the_same_within_a_small_tolerance(self, WrapIPJ p2):

        try:


            _return_val = iWarpsAreTheSameWithinASmallTolerance_IPJ(get_p_geo(), &self.handle, &p2.handle)
            return _return_val
        finally:
            pass


    def warp_type(self):

        try:


            _return_val = iWarpType_IPJ(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def make_projected(self, double p2, double p3, double p4, double p5):

        try:


            MakeProjected_IPJ(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def new_box_resolution(self, WrapIPJ p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10):

        try:


            NewBoxResolution_IPJ(get_p_geo(), &self.handle, &p2.handle, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10)
            return (p8, p9, p10)
        finally:
            pass


    def read(self, int32_t p2, const char* p3, const char* p4, const char* p5):

        try:


            Read_IPJ(get_p_geo(), &self.handle, &p2, p3, p4, p5)
            
        finally:
            pass


    def get_method_parm(self, int32_t p2):

        try:


            _return_val = rGetMethodParm_IPJ(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def get_north_azimuth(self, double p2, double p3):

        try:


            _return_val = rGetNorthAzimuth_IPJ(get_p_geo(), &self.handle, &p2, &p3)
            return _return_val
        finally:
            pass

    @classmethod
    def unit_scale(cls, const char* p1, double p2):

        try:


            _return_val = rUnitScale_IPJ(get_p_geo(), p1, &p2)
            return _return_val
        finally:
            pass


    def serial(self, WrapBF p2):

        try:


            Serial_IPJ(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def serial_fgdcxml(self, const char* p2):

        try:


            SerialFGDCXML_IPJ(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def serial_isoxml(self, const char* p2):

        try:


            SerialISOXML_IPJ(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def serial_xml(self, const char* p2):

        try:


            SerialXML_IPJ(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def set_3d_inverted(self, int32_t p2):

        try:


            Set3DInverted_IPJ(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_3d_inverted_angles(self, int32_t p2):

        try:


            Set3DInvertedAngles_IPJ(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_3d_view(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10):

        try:


            Set3DView_IPJ(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10)
            
        finally:
            pass


    def set_3d_view_ex(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, int32_t p11, int32_t p12):

        try:


            Set3DViewEx_IPJ(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12)
            
        finally:
            pass


    def set_3d_view_from_axes(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11, double p12, double p13):

        try:


            Set3DViewFromAxes_IPJ(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13)
            
        finally:
            pass


    def set_crooked_section_view(self, WrapVV p2, WrapVV p3, WrapVV p4, int32_t p5):

        try:


            SetCrookedSectionView_IPJ(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle, &p5)
            
        finally:
            pass


    def set_depth_section_view(self, double p2):

        try:


            SetDepthSectionView_IPJ(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_esri(self, const char* p2):

        try:


            SetESRI_IPJ(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def set_gxf(self, const char* p2, const char* p3, const char* p4, const char* p5, const char* p6):

        try:


            SetGXF_IPJ(get_p_geo(), &self.handle, p2, p3, p4, p5, p6)
            
        finally:
            pass


    def set_method_parm(self, int32_t p2, double p3):

        try:


            SetMethodParm_IPJ(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_mi_coord_sys(self, const char* p2, const char* p3):

        try:


            SetMICoordSys_IPJ(get_p_geo(), &self.handle, p2, p3)
            
        finally:
            pass


    def set_normal_section_view(self, double p2, double p3, double p4, double p5, double p6):

        try:


            SetNormalSectionView_IPJ(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass


    def set_plan_view(self, double p2, double p3, double p4, double p5):

        try:


            SetPlanView_IPJ(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def set_section_view(self, double p2, double p3, double p4, double p5, double p6):

        try:


            SetSectionView_IPJ(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass


    def set_wms_coord_sys(self, const char* p2, double p3, double p4, double p5, double p6):

        try:


            SetWMSCoordSys_IPJ(get_p_geo(), &self.handle, p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass


    def set_xml(self, const char* p2):

        try:


            SetXML_IPJ(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def get_3d_matrix_orientation(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11, double p12, double p13, double p14, double p15, double p16, double p17):

        try:


            Get3DMatrixOrientation_IPJ(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16, &p17)
            return (p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17)
        finally:
            pass


    def set_3d_matrix_orientation(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11, double p12, double p13, double p14, double p15, double p16, double p17):

        try:


            Set3DMatrixOrientation_IPJ(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16, &p17)
            
        finally:
            pass


    def reproject_section_grid(self, WrapIPJ p2, double p3, double p4, double p5, double p6, double p7):

        try:


            ReprojectSectionGrid_IPJ(get_p_geo(), &self.handle, &p2.handle, &p3, &p4, &p5, &p6, &p7)
            return (p3, p4, p5, p6, p7)
        finally:
            pass

    pass



cdef class WrapITR:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_ITR(get_p_geo(), &self.handle)





    def change_brightness(self, double p2):

        try:


            ChangeBrightness_ITR(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def color_vv(self, WrapVV p2, WrapVV p3):

        try:


            ColorVV_ITR(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def copy(self, WrapITR p2):

        try:


            Copy_ITR(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def create(cls):

        try:


            _return_val = WrapITR(Create_ITR(get_p_geo()))
            return _return_val
        finally:
            pass

    @classmethod
    def create_file(cls, const char* p1):

        try:


            _return_val = WrapITR(CreateFile_ITR(get_p_geo(), p1))
            return _return_val
        finally:
            pass

    @classmethod
    def create_img(cls, WrapIMG p1, const char* p2, int32_t p3, double p4):

        try:


            _return_val = WrapITR(CreateIMG_ITR(get_p_geo(), &p1.handle, p2, &p3, &p4))
            return _return_val
        finally:
            pass

    @classmethod
    def create_map(cls, WrapMAP p1, const char* p2):

        try:


            _return_val = WrapITR(CreateMap_ITR(get_p_geo(), &p1.handle, p2))
            return _return_val
        finally:
            pass

    @classmethod
    def create_s(cls, WrapBF p1):

        try:


            _return_val = WrapITR(CreateS_ITR(get_p_geo(), &p1.handle))
            return _return_val
        finally:
            pass




    def equal_area(self, WrapST p2, double p3):

        try:


            EqualArea_ITR(get_p_geo(), &self.handle, &p2.handle, &p3)
            
        finally:
            pass


    def get_data_limits(self, double p2, double p3):

        try:


            GetDataLimits_ITR(get_p_geo(), &self.handle, &p2, &p3)
            return (p2, p3)
        finally:
            pass


    def get_reg(self):

        try:


            _return_val = WrapREG(GetREG_ITR(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def get_zone_color(self, int32_t p2, int32_t p3):

        try:


            GetZoneColor_ITR(get_p_geo(), &self.handle, &p2, &p3)
            return p3
        finally:
            pass


    def color_value(self, double p2):

        try:


            _return_val = iColorValue_ITR(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def get_size(self):

        try:


            _return_val = iGetSize_ITR(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_zone_model_type(self):

        try:


            _return_val = iGetZoneModelType_ITR(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def linear(self, double p2, double p3, double p4):

        try:


            Linear_ITR(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def load_a(self, const char* p2):

        try:


            LoadA_ITR(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def log_linear(self, double p2, double p3, double p4):

        try:


            LogLinear_ITR(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def normal(self, double p2, double p3, double p4, double p5):

        try:


            Normal_ITR(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def power_zone(self, int32_t p2):

        try:


            PowerZone_ITR(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def get_brightness(self):

        try:


            _return_val = rGetBrightness_ITR(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_zone_value(self, int32_t p2):

        try:


            _return_val = rGetZoneValue_ITR(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def save_a(self, const char* p2):

        try:


            SaveA_ITR(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def save_file(self, const char* p2):

        try:


            SaveFile_ITR(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def serial(self, WrapBF p2):

        try:


            Serial_ITR(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def set_agg_map(cls, WrapMAP p1, const char* p2, WrapITR p3):

        try:


            SetAggMap_ITR(get_p_geo(), &p1.handle, p2, &p3.handle)
            
        finally:
            pass


    def set_bright_contrast(self, double p2, double p3):

        try:


            SetBrightContrast_ITR(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_color_model(self, int32_t p2):

        try:


            SetColorModel_ITR(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_data_limits(self, double p2, double p3):

        try:


            SetDataLimits_ITR(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_size(self, int32_t p2):

        try:


            SetSize_ITR(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_zone_color(self, int32_t p2, int32_t p3):

        try:


            SetZoneColor_ITR(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_zone_value(self, int32_t p2, double p3):

        try:


            SetZoneValue_ITR(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass

    pass



cdef class WrapLAYOUT:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_LAYOUT(get_p_geo(), &self.handle)





    def calculate_rects(self, double p2, double p3, double p4, double p5):

        try:


            CalculateRects_LAYOUT(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            return (p2, p3, p4, p5)
        finally:
            pass


    def clear_all(self):

        try:


            ClearAll_LAYOUT(get_p_geo(), &self.handle)
            
        finally:
            pass


    def clear_constraints(self):

        try:


            ClearConstraints_LAYOUT(get_p_geo(), &self.handle)
            
        finally:
            pass

    @classmethod
    def create(cls, int32_t p1, const char* p2):

        try:


            _return_val = WrapLAYOUT(Create_LAYOUT(get_p_geo(), &p1, p2))
            return _return_val
        finally:
            pass




    def get_rectangle(self, int32_t p2, double p3, double p4, double p5, double p6):

        try:


            GetRectangle_LAYOUT(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6)
            return (p3, p4, p5, p6)
        finally:
            pass


    def get_rect_name(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*16384
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*16384)

            strcpy(cp3, p3)

            GetRectName_LAYOUT(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def add_constraint(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5, double p6, double p7):

        try:


            _return_val = iAddConstraint_LAYOUT(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            return _return_val
        finally:
            pass


    def add_rectangle(self, double p2, double p3, double p4, double p5):

        try:


            _return_val = iAddRectangle_LAYOUT(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            return _return_val
        finally:
            pass


    def num_rectangles(self):

        try:


            _return_val = iNumRectangles_LAYOUT(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def set_rectangle(self, int32_t p2, double p3, double p4, double p5, double p6):

        try:


            SetRectangle_LAYOUT(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass


    def set_rectangle_name(self, int32_t p2, const char* p3):

        try:


            SetRectangleName_LAYOUT(get_p_geo(), &self.handle, &p2, p3)
            
        finally:
            pass

    pass



cdef class WrapLL2:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_LL2(get_p_geo(), &self.handle)




    @classmethod
    def create(cls, double p1, double p2, double p3, double p4, int32_t p5, int32_t p6, WrapIPJ p7, WrapIPJ p8):

        try:


            _return_val = WrapLL2(Create_LL2(get_p_geo(), &p1, &p2, &p3, &p4, &p5, &p6, &p7.handle, &p8.handle))
            return _return_val
        finally:
            pass




    def save(self, const char* p2):

        try:


            Save_LL2(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def set_row(self, int32_t p2, WrapVV p3, WrapVV p4):

        try:


            SetRow_LL2(get_p_geo(), &self.handle, &p2, &p3.handle, &p4.handle)
            
        finally:
            pass

    pass



cdef class WrapLPT:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_LPT(get_p_geo(), &self.handle)




    @classmethod
    def create(cls):

        try:


            _return_val = WrapLPT(Create_LPT(get_p_geo()))
            return _return_val
        finally:
            pass




    def get_lst(self, WrapLST p2):

        try:


            GetLST_LPT(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_standard_lst(self, WrapLST p2):

        try:


            GetStandardLST_LPT(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    pass



cdef class WrapLST:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_LST(get_p_geo(), &self.handle)





    def add_item(self, const char* p2, const char* p3):

        try:


            AddItem_LST(get_p_geo(), &self.handle, p2, p3)
            
        finally:
            pass


    def add_symb_item(self, const char* p2, int32_t p3):

        try:


            AddSymbItem_LST(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass


    def add_unique_item(self, const char* p2, const char* p3):

        try:


            AddUniqueItem_LST(get_p_geo(), &self.handle, p2, p3)
            
        finally:
            pass


    def append(self, WrapLST p2):

        try:


            Append_LST(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def assay_channel(cls):

        try:


            _return_val = WrapLST(AssayChannel_LST(get_p_geo()))
            return _return_val
        finally:
            pass


    def clear(self):

        try:


            Clear_LST(get_p_geo(), &self.handle)
            
        finally:
            pass


    def convert_from_csv_string(self, const char* p2):

        try:


            ConvertFromCSVString_LST(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def copy(self, WrapLST p2):

        try:


            Copy_LST(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def create(cls, int32_t p1):

        try:


            _return_val = WrapLST(Create_LST(get_p_geo(), &p1))
            return _return_val
        finally:
            pass

    @classmethod
    def create_s(cls, WrapBF p1):

        try:


            _return_val = WrapLST(CreateS_LST(get_p_geo(), &p1.handle))
            return _return_val
        finally:
            pass


    def del_item(self, int32_t p2):

        try:


            DelItem_LST(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass




    def find_items(self, int32_t p2, WrapLST p3, WrapVV p4):

        try:


            FindItems_LST(get_p_geo(), &self.handle, &p2, &p3.handle, &p4.handle)
            
        finally:
            pass


    def gt_item(self, int32_t p2, int32_t p3, const char* p4):
        cdef int32_t p5 = 4*16384
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*16384)

            strcpy(cp4, p4)

            GtItem_LST(get_p_geo(), &self.handle, &p2, &p3, cp4, &p5)
            return cp4
        finally:
            if cp4: free(cp4)



    def gt_symb_item(self, int32_t p2, const char* p3, int32_t p5):
        cdef int32_t p4 = 4*64
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*64)

            strcpy(cp3, p3)

            GtSymbItem_LST(get_p_geo(), &self.handle, &p2, cp3, &p4, &p5)
            return (cp3, p5)
        finally:
            if cp3: free(cp3)



    def convert_to_csv_string(self, const char* p2):
        cdef int32_t p3 = 4*16384
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*16384)

            strcpy(cp2, p2)

            IConvertToCSVString_LST(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def find_item(self, int32_t p2, const char* p3):

        try:


            _return_val = iFindItem_LST(get_p_geo(), &self.handle, &p2, p3)
            return _return_val
        finally:
            pass


    def find_item_mask(self, int32_t p2, const char* p3):

        try:


            _return_val = iFindItemMask_LST(get_p_geo(), &self.handle, &p2, p3)
            return _return_val
        finally:
            pass


    def get_int(self, int32_t p2, int32_t p3):

        try:


            _return_val = iGetInt_LST(get_p_geo(), &self.handle, &p2, &p3)
            return _return_val
        finally:
            pass


    def insert_item(self, int32_t p2, const char* p3, const char* p4):

        try:


            InsertItem_LST(get_p_geo(), &self.handle, &p2, p3, p4)
            
        finally:
            pass


    def size(self):

        try:


            _return_val = iSize_LST(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def load_csv(self, const char* p2, const char* p3, const char* p4):

        try:


            LoadCSV_LST(get_p_geo(), &self.handle, p2, p3, p4)
            
        finally:
            pass


    def load_file(self, const char* p2):

        try:


            LoadFile_LST(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def resource(self, const char* p2):

        try:


            Resource_LST(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def get_double(self, int32_t p2, int32_t p3):

        try:


            _return_val = rGetReal_LST(get_p_geo(), &self.handle, &p2, &p3)
            return _return_val
        finally:
            pass


    def save_file(self, const char* p2):

        try:


            SaveFile_LST(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def select_csv_string_items(self, const char* p2, WrapLST p3):

        try:


            SelectCSVStringItems_LST(get_p_geo(), &self.handle, p2, &p3.handle)
            
        finally:
            pass


    def serial(self, WrapBF p2):

        try:


            Serial_LST(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_item(self, int32_t p2, int32_t p3, const char* p4):

        try:


            SetItem_LST(get_p_geo(), &self.handle, &p2, &p3, p4)
            
        finally:
            pass


    def sort(self, int32_t p2, int32_t p3):

        try:


            Sort_LST(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass

    pass



cdef class WrapLTB:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_LTB(get_p_geo(), &self.handle)





    def add_record(self, const char* p2, int32_t p3):

        try:


            AddRecord_LTB(get_p_geo(), &self.handle, p2, &p3)
            return p3
        finally:
            pass


    def contract(self, WrapLTB p2):

        try:


            _return_val = WrapLTB(Contract_LTB(get_p_geo(), &self.handle, &p2.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def create(cls, const char* p1, int32_t p2, int32_t p3, const char* p4):

        try:


            _return_val = WrapLTB(Create_LTB(get_p_geo(), p1, &p2, &p3, p4))
            return _return_val
        finally:
            pass

    @classmethod
    def create_crypt(cls, const char* p1, int32_t p2, int32_t p3, int32_t p4, const char* p5, const char* p6):

        try:


            _return_val = WrapLTB(CreateCrypt_LTB(get_p_geo(), p1, &p2, &p3, &p4, p5, p6))
            return _return_val
        finally:
            pass

    @classmethod
    def create_ex(cls, const char* p1, int32_t p2, int32_t p3, int32_t p4, const char* p5):

        try:


            _return_val = WrapLTB(CreateEx_LTB(get_p_geo(), p1, &p2, &p3, &p4, p5))
            return _return_val
        finally:
            pass


    def delete_record(self, int32_t p2):

        try:


            DeleteRecord_LTB(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass




    def get_con_lst(self, int32_t p2, const char* p3, int32_t p4, WrapLST p5):

        try:


            GetConLST_LTB(get_p_geo(), &self.handle, &p2, p3, &p4, &p5.handle)
            
        finally:
            pass


    def get_lst(self, int32_t p2, WrapLST p3):

        try:


            GetLST_LTB(get_p_geo(), &self.handle, &p2, &p3.handle)
            
        finally:
            pass


    def get_lst2(self, int32_t p2, int32_t p3, WrapLST p4):

        try:


            GetLST2_LTB(get_p_geo(), &self.handle, &p2, &p3, &p4.handle)
            
        finally:
            pass


    def fields(self):

        try:


            _return_val = iFields_LTB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def find_field(self, const char* p2):

        try:


            _return_val = iFindField_LTB(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def find_key(self, const char* p2):

        try:


            _return_val = iFindKey_LTB(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def get_field(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*1024
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*1024)

            strcpy(cp3, p3)

            IGetField_LTB(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def get_int(self, int32_t p2, int32_t p3):

        try:


            _return_val = iGetInt_LTB(get_p_geo(), &self.handle, &p2, &p3)
            return _return_val
        finally:
            pass


    def get_string(self, int32_t p2, int32_t p3, const char* p4):
        cdef int32_t p5 = 4*16384
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*16384)

            strcpy(cp4, p4)

            IGetString_LTB(get_p_geo(), &self.handle, &p2, &p3, cp4, &p5)
            return cp4
        finally:
            if cp4: free(cp4)



    def get_english_string(self, int32_t p2, int32_t p3, const char* p4):
        cdef int32_t p5 = 4*16384
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*16384)

            strcpy(cp4, p4)

            IGetEnglishString_LTB(get_p_geo(), &self.handle, &p2, &p3, cp4, &p5)
            return cp4
        finally:
            if cp4: free(cp4)



    def records(self):

        try:


            _return_val = iRecords_LTB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def search(self, int32_t p2, int32_t p3, const char* p4):

        try:


            _return_val = iSearch_LTB(get_p_geo(), &self.handle, &p2, &p3, p4)
            return _return_val
        finally:
            pass


    def merge(self, WrapLTB p2):

        try:


            _return_val = WrapLTB(Merge_LTB(get_p_geo(), &self.handle, &p2.handle))
            return _return_val
        finally:
            pass


    def get_double(self, int32_t p2, int32_t p3):

        try:


            _return_val = rGetReal_LTB(get_p_geo(), &self.handle, &p2, &p3)
            return _return_val
        finally:
            pass


    def save(self, const char* p2):

        try:


            Save_LTB(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def save_crypt(self, const char* p2, const char* p3):

        try:


            SaveCrypt_LTB(get_p_geo(), &self.handle, p2, p3)
            
        finally:
            pass


    def set_int(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            SetInt_LTB(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def set_double(self, int32_t p2, int32_t p3, double p4):

        try:


            SetReal_LTB(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def set_string(self, int32_t p2, int32_t p3, const char* p4):

        try:


            SetString_LTB(get_p_geo(), &self.handle, &p2, &p3, p4)
            
        finally:
            pass

    pass



cdef class WrapMAP:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_MAP(get_p_geo(), &self.handle)




# Export




    def export_all_in_view(self, const char* p2, const char* p3, double p4, double p5, int32_t p6, int32_t p7, const char* p8, const char* p9):

        try:


            ExportAllInView_MAP(get_p_geo(), &self.handle, p2, p3, &p4, &p5, &p6, &p7, p8, p9)
            
        finally:
            pass


    def export_all_raster(self, const char* p2, const char* p3, int32_t p4, int32_t p5, double p6, int32_t p7, int32_t p8, const char* p9, const char* p10):

        try:


            ExportAllRaster_MAP(get_p_geo(), &self.handle, p2, p3, &p4, &p5, &p6, &p7, &p8, p9, p10)
            
        finally:
            pass


    def export_area_in_view(self, const char* p2, const char* p3, double p4, double p5, int32_t p6, int32_t p7, double p8, double p9, double p10, double p11, const char* p12, const char* p13):

        try:


            ExportAreaInView_MAP(get_p_geo(), &self.handle, p2, p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, p12, p13)
            
        finally:
            pass


    def export_area_raster(self, const char* p2, const char* p3, double p4, double p5, double p6, double p7, int32_t p8, int32_t p9, double p10, int32_t p11, int32_t p12, const char* p13, const char* p14):

        try:


            ExportAreaRaster_MAP(get_p_geo(), &self.handle, p2, p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, p13, p14)
            
        finally:
            pass


    def render_bitmap(self, const char* p2, double p3, double p4, double p5, double p6, const char* p7, int32_t p8):

        try:


            RenderBitmap_MAP(get_p_geo(), &self.handle, p2, &p3, &p4, &p5, &p6, p7, &p8)
            
        finally:
            pass


# 3D View




    def create_linked_3d_view(self, WrapMVIEW p2, const char* p3, double p4, double p5, double p6, double p7):

        try:


            CreateLinked3DView_MAP(get_p_geo(), &self.handle, &p2.handle, p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass


# Miscellaneous




    def agg_list(self, WrapLST p2, int32_t p3):

        try:


            AGGList_MAP(get_p_geo(), &self.handle, &p2.handle, &p3)
            
        finally:
            pass


    def agg_list_ex(self, WrapLST p2, int32_t p3, int32_t p4):

        try:


            AGGListEx_MAP(get_p_geo(), &self.handle, &p2.handle, &p3, &p4)
            
        finally:
            pass


    def clean(self):

        try:


            Clean_MAP(get_p_geo(), &self.handle)
            
        finally:
            pass


    def commit(self):

        try:


            Commit_MAP(get_p_geo(), &self.handle)
            
        finally:
            pass


    def copy_map_to_view(self, const char* p2, const char* p3):

        try:


            CopyMapToView_MAP(get_p_geo(), &self.handle, p2, p3)
            
        finally:
            pass


    def crc_map(self, int32_t p2, const char* p3):

        try:


            CRCMap_MAP(get_p_geo(), &self.handle, &p2, p3)
            return p2
        finally:
            pass

    @classmethod
    def create(cls, const char* p1, int32_t p2):

        try:


            _return_val = WrapMAP(Create_MAP(get_p_geo(), p1, &p2))
            return _return_val
        finally:
            pass

    @classmethod
    def current(cls):

        try:


            _return_val = WrapMAP(App_Current_MAP(get_p_geo()))
            return _return_val
        finally:
            pass


    def delete_view(self, const char* p2):

        try:


            DeleteView_MAP(get_p_geo(), &self.handle, p2)
            
        finally:
            pass




    def discard(self):

        try:


            Discard_MAP(get_p_geo(), &self.handle)
            
        finally:
            pass


    def dup_map(self, WrapMAP p2, int32_t p3):

        try:


            DupMap_MAP(get_p_geo(), &self.handle, &p2.handle, &p3)
            
        finally:
            pass


    def get_lpt(self):

        try:


            _return_val = WrapLPT(GetLPT_MAP(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def get_map_size(self, double p2, double p3, double p4, double p5):

        try:


            GetMapSize_MAP(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            return (p2, p3, p4, p5)
        finally:
            pass


    def get_meta(self):

        try:


            _return_val = WrapMETA(GetMETA_MAP(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def get_reg(self):

        try:


            _return_val = WrapREG(GetREG_MAP(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def group_list(self, WrapLST p2):

        try:


            GroupList_MAP(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def group_list_ex(self, WrapLST p2, int32_t p3):

        try:


            GroupListEx_MAP(get_p_geo(), &self.handle, &p2.handle, &p3)
            
        finally:
            pass


    def duplicate_view(self, const char* p2, const char* p3, int32_t p5):
        cdef int32_t p4 = 4*2080
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*2080)

            strcpy(cp3, p3)

            IDuplicateView_MAP(get_p_geo(), &self.handle, p2, cp3, &p4, &p5)
            return cp3
        finally:
            if cp3: free(cp3)



    def exist_view(self, const char* p2):

        try:


            _return_val = iExistView_MAP(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def get_class_name(self, const char* p2, const char* p3):
        cdef int32_t p4 = 4*128
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*128)

            strcpy(cp3, p3)

            IGetClassName_MAP(get_p_geo(), &self.handle, p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def get_file_name(self, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            IGetFileName_MAP(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def get_map_name(self, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            IGetMapName_MAP(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def packed_files(self):

        try:


            _return_val = iPackedFiles_MAP(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def un_pack_files_ex(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*16384
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*16384)

            strcpy(cp3, p3)

            IUnPackFilesEx_MAP(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def un_pack_files_to_folder(self, int32_t p2, const char* p3, const char* p4):
        cdef int32_t p5 = 4*16384
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*16384)

            strcpy(cp4, p4)

            IUnPackFilesToFolder_MAP(get_p_geo(), &self.handle, &p2, p3, cp4, &p5)
            return cp4
        finally:
            if cp4: free(cp4)



    def pack_files(self):

        try:


            PackFiles_MAP(get_p_geo(), &self.handle)
            
        finally:
            pass


    def render(self, const char* p2):

        try:


            Render_MAP(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def resize_all(self):

        try:


            ResizeAll_MAP(get_p_geo(), &self.handle)
            
        finally:
            pass


    def resize_all_ex(self, int32_t p2):

        try:


            ResizeAllEx_MAP(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def get_map_scale(self):

        try:


            _return_val = rGetMapScale_MAP(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def save_as_mxd(self, const char* p2):

        try:


            SaveAsMXD_MAP(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def set_class_name(self, const char* p2, const char* p3):

        try:


            SetClassName_MAP(get_p_geo(), &self.handle, p2, p3)
            
        finally:
            pass


    def set_current(self):

        try:


            App_SetCurrent_MAP(get_p_geo(), &self.handle)
            
        finally:
            pass


    def set_map_name(self, const char* p2):

        try:


            SetMapName_MAP(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def set_map_scale(self, double p2):

        try:


            SetMapScale_MAP(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_map_size(self, double p2, double p3, double p4, double p5):

        try:


            SetMapSize_MAP(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def set_meta(self, WrapMETA p2):

        try:


            SetMETA_MAP(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_reg(self, WrapREG p2):

        try:


            SetREG_MAP(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def sync(cls, const char* p1):

        try:


            Sync_MAP(get_p_geo(), p1)
            
        finally:
            pass


    def un_pack_files(self):

        try:


            UnPackFiles_MAP(get_p_geo(), &self.handle)
            
        finally:
            pass


    def view_list(self, WrapLST p2):

        try:


            ViewList_MAP(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def view_list_ex(self, WrapLST p2, int32_t p3):

        try:


            ViewListEx_MAP(get_p_geo(), &self.handle, &p2.handle, &p3)
            
        finally:
            pass


    def get_data_proj(self):

        try:


            _return_val = GetDataProj_MAP(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    pass



cdef class WrapMAPL:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_MAPL(get_p_geo(), &self.handle)




    @classmethod
    def create(cls, const char* p1, const char* p2, int32_t p3):

        try:


            _return_val = WrapMAPL(Create_MAPL(get_p_geo(), p1, p2, &p3))
            return _return_val
        finally:
            pass

    @classmethod
    def create_reg(cls, const char* p1, const char* p2, int32_t p3, WrapREG p4):

        try:


            _return_val = WrapMAPL(CreateREG_MAPL(get_p_geo(), p1, p2, &p3, &p4.handle))
            return _return_val
        finally:
            pass




    def process(self, WrapMAP p2):

        try:


            Process_MAPL(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def replace_string(self, const char* p2, const char* p3):

        try:


            ReplaceString_MAPL(get_p_geo(), &self.handle, p2, p3)
            
        finally:
            pass

    pass



cdef class WrapMAPTEMPLATE:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_MAPTEMPLATE(get_p_geo(), &self.handle)




# Content Manipulation Methods




    def get_tmp_copy(self, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            GetTmpCopy_MAPTEMPLATE(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def update_from_tmp_copy(self, const char* p2):

        try:


            UpdateFromTmpCopy_MAPTEMPLATE(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


# File Methods




    def commit(self):

        try:


            Commit_MAPTEMPLATE(get_p_geo(), &self.handle)
            
        finally:
            pass

    @classmethod
    def create(cls, const char* p1, const char* p2, int32_t p3):

        try:


            _return_val = WrapMAPTEMPLATE(Create_MAPTEMPLATE(get_p_geo(), p1, p2, &p3))
            return _return_val
        finally:
            pass




    def discard(self):

        try:


            Discard_MAPTEMPLATE(get_p_geo(), &self.handle)
            
        finally:
            pass


    def get_file_name(self, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            GetFileName_MAPTEMPLATE(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



# Map Making




    def create_map(self, const char* p2, const char* p3):

        try:


            CreateMap_MAPTEMPLATE(get_p_geo(), &self.handle, p2, p3)
            
        finally:
            pass


# Render/Preview




    def refresh(self):

        try:


            Refresh_MAPTEMPLATE(get_p_geo(), &self.handle)
            
        finally:
            pass


    def render_preview(self, HDC p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6):

        try:


            RenderPreview_MAPTEMPLATE(get_p_geo(), &self.handle, p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass


    def render_preview_map_production(self, HDC p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6):

        try:


            RenderPreviewMapProduction_MAPTEMPLATE(get_p_geo(), &self.handle, p2, &p3, &p4, &p5, &p6)
            return (p3, p4, p5, p6)
        finally:
            pass


    pass



cdef class WrapMATH:
    




    @classmethod
    def cross_product_(cls, double p1, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9):

        try:


            CrossProduct_MATH(get_p_geo(), &p1, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9)
            return (p7, p8, p9)
        finally:
            pass

    @classmethod
    def abs_(cls, int32_t p1):

        try:


            _return_val = iAbs_MATH(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def and_(cls, int32_t p1, int32_t p2):

        try:


            _return_val = iAnd_MATH(get_p_geo(), &p1, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def mod_(cls, int32_t p1, int32_t p2):

        try:


            _return_val = iMod_MATH(get_p_geo(), &p1, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def or_(cls, int32_t p1, int32_t p2):

        try:


            _return_val = iOr_MATH(get_p_geo(), &p1, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def round_(cls, double p1):

        try:


            _return_val = iRound_MATH(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def xor_(cls, int32_t p1, int32_t p2):

        try:


            _return_val = iXor_MATH(get_p_geo(), &p1, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def nicer_log_scale_(cls, double p1, double p2, int32_t p3):

        try:


            NicerLogScale_MATH(get_p_geo(), &p1, &p2, &p3)
            return (p1, p2)
        finally:
            pass

    @classmethod
    def nicer_scale_(cls, double p1, double p2, double p3, int32_t p4):

        try:


            NicerScale_MATH(get_p_geo(), &p1, &p2, &p3, &p4)
            return (p1, p2, p3, p4)
        finally:
            pass

    @classmethod
    def normalise_3d_(cls, double p1, double p2, double p3):

        try:


            Normalise3D_MATH(get_p_geo(), &p1, &p2, &p3)
            return (p1, p2, p3)
        finally:
            pass

    @classmethod
    def abs_(cls, double p1):

        try:


            _return_val = rAbs_MATH(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def arc_cos_(cls, double p1):

        try:


            _return_val = rArcCos_MATH(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def arc_sin_(cls, double p1):

        try:


            _return_val = rArcSin_MATH(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def arc_tan_(cls, double p1):

        try:


            _return_val = rArcTan_MATH(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def arc_tan2_(cls, double p1, double p2):

        try:


            _return_val = rArcTan2_MATH(get_p_geo(), &p1, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def ceil_(cls, double p1):

        try:


            _return_val = rCeil_MATH(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def cos_(cls, double p1):

        try:


            _return_val = rCos_MATH(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def dot_product_3d_(cls, double p1, double p2, double p3, double p4, double p5, double p6):

        try:


            _return_val = rDotProduct3D_MATH(get_p_geo(), &p1, &p2, &p3, &p4, &p5, &p6)
            return _return_val
        finally:
            pass

    @classmethod
    def exp_(cls, double p1):

        try:


            _return_val = rExp_MATH(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def floor_(cls, double p1):

        try:


            _return_val = rFloor_MATH(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def hypot_(cls, double p1, double p2):

        try:


            _return_val = rHypot_MATH(get_p_geo(), &p1, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def lambda_trans_(cls, double p1, double p2):

        try:


            _return_val = rLambdaTrans_MATH(get_p_geo(), &p1, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def lambda_trans_rev_(cls, double p1, double p2):

        try:


            _return_val = rLambdaTransRev_MATH(get_p_geo(), &p1, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def log_(cls, double p1):

        try:


            _return_val = rLog_MATH(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def log10_(cls, double p1):

        try:


            _return_val = rLog10_MATH(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def log_z_(cls, double p1, int32_t p2, double p3):

        try:


            _return_val = rLogZ_MATH(get_p_geo(), &p1, &p2, &p3)
            return _return_val
        finally:
            pass

    @classmethod
    def mod_(cls, double p1, double p2):

        try:


            _return_val = rMod_MATH(get_p_geo(), &p1, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def rotate_vector_(cls, double p1, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10):

        try:


            RotateVector_MATH(get_p_geo(), &p1, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10)
            return (p8, p9, p10)
        finally:
            pass

    @classmethod
    def pow_(cls, double p1, double p2):

        try:


            _return_val = rPow_MATH(get_p_geo(), &p1, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def rand_(cls):

        try:


            _return_val = rRand_MATH(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def round_(cls, double p1, int32_t p2):

        try:


            _return_val = rRound_MATH(get_p_geo(), &p1, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def sign_(cls, double p1, double p2):

        try:


            _return_val = rSign_MATH(get_p_geo(), &p1, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def sin_(cls, double p1):

        try:


            _return_val = rSin_MATH(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def sqrt_(cls, double p1):

        try:


            _return_val = rSqrt_MATH(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def tan_(cls, double p1):

        try:


            _return_val = rTan_MATH(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def un_log_z_(cls, double p1, int32_t p2, double p3):

        try:


            _return_val = rUnLogZ_MATH(get_p_geo(), &p1, &p2, &p3)
            return _return_val
        finally:
            pass

    @classmethod
    def s_rand_(cls):

        try:


            SRand_MATH(get_p_geo())
            
        finally:
            pass

    pass



cdef class WrapMETA:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_META(get_p_geo(), &self.handle)




# Attribute




    def create_attrib(self, const char* p2, int32_t p3, int32_t p4):

        try:


            _return_val = CreateAttrib_META(get_p_geo(), &self.handle, p2, &p3, &p4)
            return _return_val
        finally:
            pass


    def delete_attrib(self, int32_t p2):

        try:


            DeleteAttrib_META(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


# Browser




    def set_attribute_editable(self, int32_t p2, int32_t p3):

        try:


            SetAttributeEditable_META(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_attribute_visible(self, int32_t p2, int32_t p3):

        try:


            SetAttributeVisible_META(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


# Class




    def create_class(self, const char* p2, int32_t p3):

        try:


            _return_val = CreateClass_META(get_p_geo(), &self.handle, p2, &p3)
            return _return_val
        finally:
            pass


    def delete_class(self, int32_t p2):

        try:


            DeleteClass_META(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


# Core




    def copy(self, WrapMETA p2):

        try:


            Copy_META(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def create(cls):

        try:


            _return_val = WrapMETA(Create_META(get_p_geo()))
            return _return_val
        finally:
            pass

    @classmethod
    def create_s(cls, WrapBF p1):

        try:


            _return_val = WrapMETA(CreateS_META(get_p_geo(), &p1.handle))
            return _return_val
        finally:
            pass




    def serial(self, WrapBF p2):

        try:


            Serial_META(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


# Get Data




    def find_data(self, int32_t p2, int32_t p3):

        try:


            _return_val = FindData_META(get_p_geo(), &self.handle, &p2, &p3)
            return _return_val
        finally:
            pass


    def get_attrib_bool(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            GetAttribBool_META(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return p4
        finally:
            pass


    def get_attrib_enum(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            GetAttribEnum_META(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return p4
        finally:
            pass


    def get_attrib_int(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            GetAttribInt_META(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return p4
        finally:
            pass


    def get_attrib_double(self, int32_t p2, int32_t p3, double p4):

        try:


            GetAttribReal_META(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return p4
        finally:
            pass


    def get_attrib_string(self, int32_t p2, int32_t p3, const char* p4):
        cdef int32_t p5 = 4*16384
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*16384)

            strcpy(cp4, p4)

            IGetAttribString_META(get_p_geo(), &self.handle, &p2, &p3, cp4, &p5)
            return cp4
        finally:
            if cp4: free(cp4)



    def has_value(self, int32_t p2, int32_t p3):

        try:


            _return_val = iHasValue_META(get_p_geo(), &self.handle, &p2, &p3)
            return _return_val
        finally:
            pass


# Import/Export




    def export_table_csv(self, int32_t p2, const char* p3):

        try:


            ExportTableCSV_META(get_p_geo(), &self.handle, &p2, p3)
            
        finally:
            pass


    def import_table_csv(self, int32_t p2, const char* p3):

        try:


            ImportTableCSV_META(get_p_geo(), &self.handle, &p2, p3)
            
        finally:
            pass


    def write_text(self, WrapWA p2):

        try:


            WriteText_META(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


# Item




    def delete_all_items(self, int32_t p2):

        try:


            DeleteAllItems_META(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def delete_item(self, int32_t p2):

        try:


            DeleteItem_META(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def h_creat_item(self, const char* p2, int32_t p3):

        try:


            _return_val = hCreatItem_META(get_p_geo(), &self.handle, p2, &p3)
            return _return_val
        finally:
            pass


    def h_get_next_item(self, int32_t p2, int32_t p3):

        try:


            _return_val = hGetNextItem_META(get_p_geo(), &self.handle, &p2, &p3)
            return _return_val
        finally:
            pass


# Object




    def get_attrib_obj(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            GetAttribOBJ_META(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def set_attrib_obj(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            SetAttribOBJ_META(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


# Set Data




    def set_attrib_bool(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            SetAttribBool_META(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def set_attrib_enum(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            SetAttribEnum_META(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def set_attrib_int(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            SetAttribInt_META(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def set_attrib_double(self, int32_t p2, int32_t p3, double p4):

        try:


            SetAttribReal_META(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def set_attrib_string(self, int32_t p2, int32_t p3, const char* p4):

        try:


            SetAttribString_META(get_p_geo(), &self.handle, &p2, &p3, p4)
            
        finally:
            pass


    def set_empty_attrib(self, int32_t p2, int32_t p3):

        try:


            SetEmptyAttrib_META(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


# Transfer




    def h_copy_across_attribute(self, WrapMETA p2, int32_t p3):

        try:


            _return_val = hCopyAcrossAttribute_META(get_p_geo(), &self.handle, &p2.handle, &p3)
            return _return_val
        finally:
            pass


    def h_copy_across_class(self, WrapMETA p2, int32_t p3):

        try:


            _return_val = hCopyAcrossClass_META(get_p_geo(), &self.handle, &p2.handle, &p3)
            return _return_val
        finally:
            pass


    def h_copy_across_data(self, WrapMETA p2, int32_t p3):

        try:


            _return_val = hCopyAcrossData_META(get_p_geo(), &self.handle, &p2.handle, &p3)
            return _return_val
        finally:
            pass


    def h_copy_across_item(self, WrapMETA p2, int32_t p3):

        try:


            _return_val = hCopyAcrossItem_META(get_p_geo(), &self.handle, &p2.handle, &p3)
            return _return_val
        finally:
            pass


    def h_copy_across_type(self, WrapMETA p2, int32_t p3):

        try:


            _return_val = hCopyAcrossType_META(get_p_geo(), &self.handle, &p2.handle, &p3)
            return _return_val
        finally:
            pass


    def move_datas_across(self, WrapMETA p2, int32_t p3, int32_t p4):

        try:


            MoveDatasAcross_META(get_p_geo(), &self.handle, &p2.handle, &p3, &p4)
            
        finally:
            pass


# Type




    def create_type(self, const char* p2, int32_t p3, int32_t p4):

        try:


            _return_val = CreateType_META(get_p_geo(), &self.handle, p2, &p3, &p4)
            return _return_val
        finally:
            pass


    def delete_data(self, int32_t p2):

        try:


            DeleteData_META(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def delete_type(self, int32_t p2):

        try:


            DeleteType_META(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


# UMN




    def get_obj_name(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*1024
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*1024)

            strcpy(cp3, p3)

            IGetObjName_META(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def resolve_umn(self, const char* p2):

        try:


            _return_val = ResolveUMN_META(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    pass



cdef class WrapMVIEW:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_MVIEW(get_p_geo(), &self.handle)




# 3D Entity




    def box_3d(self, double p2, double p3, double p4, double p5, double p6, double p7):

        try:


            Box3D_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass


    def crc_view(self, int32_t p2, const char* p3):

        try:


            CRCView_MVIEW(get_p_geo(), &self.handle, &p2, p3)
            return p2
        finally:
            pass


    def crc_view_group(self, const char* p2, int32_t p3, const char* p4):

        try:


            CRCViewGroup_MVIEW(get_p_geo(), &self.handle, p2, &p3, p4)
            return p3
        finally:
            pass


    def cylinder_3d(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, int32_t p10):

        try:


            Cylinder3D_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10)
            
        finally:
            pass


    def draw_object_3d(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5, WrapVV p6, WrapVV p7, WrapVV p8, WrapVV p9, WrapVV p10, WrapVV p11, WrapVV p12, WrapVV p13, WrapVV p14):

        try:


            DrawObject3D_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6.handle, &p7.handle, &p8.handle, &p9.handle, &p10.handle, &p11.handle, &p12.handle, &p13.handle, &p14.handle)
            
        finally:
            pass


    def draw_surface_3d_ex(self, const char* p2, WrapVV p3, WrapVV p4, WrapVV p5, WrapVV p6, WrapVV p7, WrapVV p8, WrapVV p9, int32_t p10, WrapVV p11, WrapVV p12, WrapVV p13, WrapIPJ p14):

        try:


            DrawSurface3DEx_MVIEW(get_p_geo(), &self.handle, p2, &p3.handle, &p4.handle, &p5.handle, &p6.handle, &p7.handle, &p8.handle, &p9.handle, &p10, &p11.handle, &p12.handle, &p13.handle, &p14.handle)
            
        finally:
            pass


    def draw_surface_3d_from_file(self, const char* p2, const char* p3):

        try:


            DrawSurface3DFromFile_MVIEW(get_p_geo(), &self.handle, p2, p3)
            
        finally:
            pass

    @classmethod
    def font_weight_lst(cls, WrapLST p1):

        try:


            FontWeightLST_MVIEW(get_p_geo(), &p1.handle)
            
        finally:
            pass


    def get_agg_file_names(self, const char* p2, WrapVV p3):

        try:


            GetAGGFileNames_MVIEW(get_p_geo(), &self.handle, p2, &p3.handle)
            
        finally:
            pass


    def get_meta(self, const char* p2, const char* p3):
        cdef int32_t p4 = 4*1024
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*1024)

            strcpy(cp3, p3)

            _return_val = WrapMETA(IGetMeta_MVIEW(get_p_geo(), &self.handle, p2, cp3, &p4))
            return (_return_val, cp3)
        finally:
            if cp3: free(cp3)



    def measure_text(self, const char* p2, double p3, double p4, double p5, double p6):

        try:


            MeasureText_MVIEW(get_p_geo(), &self.handle, p2, &p3, &p4, &p5, &p6)
            return (p3, p4, p5, p6)
        finally:
            pass


    def point_3d(self, double p2, double p3, double p4):

        try:


            Point3D_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def poly_line_3d(self, WrapVV p2, WrapVV p3, WrapVV p4):

        try:


            PolyLine3D_MVIEW(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass


    def relocate_group(self, const char* p2, double p3, double p4, double p5, double p6, int32_t p7):

        try:


            RelocateGroup_MVIEW(get_p_geo(), &self.handle, p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass


    def set_meta(self, const char* p2, WrapMETA p3, const char* p4):

        try:


            SetMeta_MVIEW(get_p_geo(), &self.handle, p2, &p3.handle, p4)
            
        finally:
            pass


    def sphere_3d(self, double p2, double p3, double p4, double p5):

        try:


            Sphere3D_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def update_met_afrom_group(self, const char* p2, WrapMETA p3):

        try:


            UpdateMETAfromGroup_MVIEW(get_p_geo(), &self.handle, p2, &p3.handle)
            
        finally:
            pass


# 3D Plane




    def delete_plane(self, int32_t p2, int32_t p3):

        try:


            DeletePlane_MVIEW(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def get_plane_clip_ply(self, int32_t p2, WrapPLY p3):

        try:


            GetPlaneClipPLY_MVIEW(get_p_geo(), &self.handle, &p2, &p3.handle)
            
        finally:
            pass


    def get_plane_equation(self, int32_t p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11):

        try:


            GetPlaneEquation_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11)
            return (p3, p4, p5, p6, p7, p8, p9, p10, p11)
        finally:
            pass


    def get_view_plane_equation(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10):

        try:


            GetViewPlaneEquation_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10)
            return (p2, p3, p4, p5, p6, p7, p8, p9, p10)
        finally:
            pass


    def create_plane(self, const char* p2):

        try:


            _return_val = iCreatePlane_MVIEW(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def find_plane(self, const char* p2):

        try:


            _return_val = iFindPlane_MVIEW(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def get_def_plane(self, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            IGetDefPlane_MVIEW(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def is_view_3d(self):

        try:


            _return_val = iIsView3D_MVIEW(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def is_section(self):

        try:


            _return_val = iIsSection_MVIEW(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def list_plane_groups(self, int32_t p2, WrapLST p3):

        try:


            ListPlaneGroups_MVIEW(get_p_geo(), &self.handle, &p2, &p3.handle)
            
        finally:
            pass


    def list_planes(self, WrapLST p2):

        try:


            ListPlanes_MVIEW(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_all_groups_to_plane(self, int32_t p2):

        try:


            SetAllGroupsToPlane_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_all_new_groups_to_plane(self, int32_t p2):

        try:


            SetAllNewGroupsToPlane_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_def_plane(self, const char* p2):

        try:


            SetDefPlane_MVIEW(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def set_group_to_plane(self, int32_t p2, const char* p3):

        try:


            SetGroupToPlane_MVIEW(get_p_geo(), &self.handle, &p2, p3)
            
        finally:
            pass


    def set_h_3dn(self, Wrap3DN p2):

        try:


            SetH3DN_MVIEW(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_3d_point_of_view(self, double p2, double p3, double p4, double p5, double p6, double p7):

        try:


            Get3DPointOfView_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            return (p2, p3, p4, p5, p6, p7)
        finally:
            pass


    def set_3d_point_of_view(self, double p2, double p3, double p4, double p5, double p6, double p7):

        try:


            Set3DPointOfView_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass


    def set_plane_clip_ply(self, int32_t p2, WrapPLY p3):

        try:


            SetPlaneClipPLY_MVIEW(get_p_geo(), &self.handle, &p2, &p3.handle)
            
        finally:
            pass


    def set_plane_equation(self, int32_t p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11):

        try:


            SetPlaneEquation_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11)
            
        finally:
            pass


    def set_plane_surface(self, int32_t p2, const char* p3):

        try:


            SetPlaneSurface_MVIEW(get_p_geo(), &self.handle, &p2, p3)
            
        finally:
            pass


    def set_plane_surf_info(self, int32_t p2, int32_t p3, double p4, double p5, double p6, double p7):

        try:


            SetPlaneSurfInfo_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass


# 3D Rendering 2D




    def define_plane_3d(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10):

        try:


            DefinePlane3D_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10)
            
        finally:
            pass


    def define_viewer_axis_3d(self, double p2, double p3, double p4, double p5, double p6, double p7):

        try:


            DefineViewerAxis3D_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass


    def define_viewer_plane_3d(self, double p2, double p3, double p4):

        try:


            DefineViewerPlane3D_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


# Clipping




    def clip_poly_ex(self, WrapVV p2, WrapVV p3, int32_t p4, int32_t p5):

        try:


            _ClipPolyEx_MVIEW(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4, &p5)
            
        finally:
            pass


    def clip_rect_ex(self, double p2, double p3, double p4, double p5, int32_t p6, int32_t p7):

        try:


            _ClipRectEx_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass


    def clip_clear(self):

        try:


            ClipClear_MVIEW(get_p_geo(), &self.handle)
            
        finally:
            pass


    def clip_groups(self, int32_t p2):

        try:


            ClipGroups_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def clip_marked_groups(self, int32_t p2):

        try:


            ClipMarkedGroups_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def clip_poly(self, WrapVV p2, WrapVV p3, int32_t p4):

        try:


            ClipPoly_MVIEW(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4)
            
        finally:
            pass


    def clip_rect(self, double p2, double p3, double p4, double p5, int32_t p6):

        try:


            ClipRect_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass


    def delete_ext_clip_ply(self, int32_t p2):

        try:


            DeleteExtClipPLY_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def ext_clip_ply_list(self, WrapLST p2):

        try:


            ExtClipPLYList_MVIEW(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_clip_ply(self, WrapPLY p2):

        try:


            GetClipPLY_MVIEW(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_ext_clip_ply(self, int32_t p2, WrapPLY p3):

        try:


            GetExtClipPLY_MVIEW(get_p_geo(), &self.handle, &p2, &p3.handle)
            
        finally:
            pass


    def get_group_ext_clip_ply(self, const char* p2, int32_t p3):

        try:


            GetGroupExtClipPLY_MVIEW(get_p_geo(), &self.handle, p2, &p3)
            return p3
        finally:
            pass


    def get_ply(self, WrapPLY p2):

        try:


            GetPLY_MVIEW(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def group_clip_mode(self, int32_t p2):

        try:


            GroupClipMode_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def get_name_ext_clip_ply(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*1040
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*1040)

            strcpy(cp3, p3)

            IGetNameExtClipPLY_MVIEW(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def num_ext_clip_ply(self):

        try:


            _return_val = iNumExtClipPLY_MVIEW(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def set_ext_clip_ply(self, int32_t p2, const char* p3, WrapPLY p4):

        try:


            _return_val = iSetExtClipPLY_MVIEW(get_p_geo(), &self.handle, &p2, p3, &p4.handle)
            return _return_val
        finally:
            pass


    def set_clip_ply(self, WrapPLY p2):

        try:


            SetClipPLY_MVIEW(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_group_ext_clip_ply(self, const char* p2, int32_t p3):

        try:


            SetGroupExtClipPLY_MVIEW(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass


# Color



    @classmethod
    def color2_rgb(cls, int32_t p1, int32_t p2, int32_t p3, int32_t p4):

        try:


            Color2RGB_MVIEW(get_p_geo(), &p1, &p2, &p3, &p4)
            return (p2, p3, p4)
        finally:
            pass

    @classmethod
    def color_descr(cls, int32_t p1, const char* p2):
        cdef int32_t p3 = 4*128
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*128)

            strcpy(cp2, p2)

            ColorDescr_MVIEW(get_p_geo(), &p1, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def color(cls, const char* p1):

        try:


            _return_val = iColor_MVIEW(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def color_cmy(cls, int32_t p1, int32_t p2, int32_t p3):

        try:


            _return_val = iColorCMY_MVIEW(get_p_geo(), &p1, &p2, &p3)
            return _return_val
        finally:
            pass

    @classmethod
    def color_hsv(cls, int32_t p1, int32_t p2, int32_t p3):

        try:


            _return_val = iColorHSV_MVIEW(get_p_geo(), &p1, &p2, &p3)
            return _return_val
        finally:
            pass

    @classmethod
    def color_rgb(cls, int32_t p1, int32_t p2, int32_t p3):

        try:


            _return_val = iColorRGB_MVIEW(get_p_geo(), &p1, &p2, &p3)
            return _return_val
        finally:
            pass


# Drawing Attribute




    def clip_mode(self, int32_t p2):

        try:


            ClipMode_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def fill_color(self, int32_t p2):

        try:


            FillColor_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def line_color(self, int32_t p2):

        try:


            LineColor_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def line_smooth(self, int32_t p2):

        try:


            LineSmooth_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def line_style(self, int32_t p2, double p3):

        try:


            LineStyle_MVIEW(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def line_thick(self, double p2):

        try:


            LineThick_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def pat_angle(self, double p2):

        try:


            PatAngle_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def pat_density(self, double p2):

        try:


            PatDensity_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def pat_number(self, int32_t p2):

        try:


            PatNumber_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def pat_size(self, double p2):

        try:


            PatSize_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def pat_style(self, int32_t p2):

        try:


            PatStyle_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def pat_thick(self, double p2):

        try:


            PatThick_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def symb_angle(self, double p2):

        try:


            SymbAngle_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def symb_color(self, int32_t p2):

        try:


            SymbColor_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def symb_fill_color(self, int32_t p2):

        try:


            SymbFillColor_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def symb_font(self, const char* p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            SymbFont_MVIEW(get_p_geo(), &self.handle, p2, &p3, &p4, &p5)
            
        finally:
            pass


    def symb_number(self, int32_t p2):

        try:


            SymbNumber_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def symb_size(self, double p2):

        try:


            SymbSize_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def text_angle(self, double p2):

        try:


            TextAngle_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def text_color(self, int32_t p2):

        try:


            TextColor_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def text_font(self, const char* p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            TextFont_MVIEW(get_p_geo(), &self.handle, p2, &p3, &p4, &p5)
            
        finally:
            pass


    def text_ref(self, int32_t p2):

        try:


            TextRef_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def text_size(self, double p2):

        try:


            TextSize_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def transparency(self, double p2):

        try:


            Transparency_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def z_value(self, double p2):

        try:


            ZValue_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


# Drawing Entity




    def arc(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8):

        try:


            Arc_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass


    def chord(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8):

        try:


            Chord_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass


    def classified_symbols(self, WrapVV p2, WrapVV p3, WrapVV p4, double p5, double p6, const char* p7, const char* p8, const char* p9):

        try:


            ClassifiedSymbols_MVIEW(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle, &p5, &p6, p7, p8, p9)
            
        finally:
            pass


    def complex_polygon(self, WrapVV p2, WrapVV p3, WrapVV p4):

        try:


            ComplexPolygon_MVIEW(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass


    def ellipse(self, double p2, double p3, double p4, double p5, double p6):

        try:


            Ellipse_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass


    def line(self, double p2, double p3, double p4, double p5):

        try:


            Line_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def line_vv(self, WrapVV p2):

        try:


            LineVV_MVIEW(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def polygon_dm(self, WrapVV p2, WrapVV p3):

        try:


            PolygonDm_MVIEW(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def polygon_ply(self, WrapPLY p2):

        try:


            PolygonPLY_MVIEW(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def poly_line(self, int32_t p2, WrapVV p3, WrapVV p4):

        try:


            PolyLine_MVIEW(get_p_geo(), &self.handle, &p2, &p3.handle, &p4.handle)
            
        finally:
            pass


    def poly_line_dm(self, WrapVV p2, WrapVV p3):

        try:


            PolyLineDm_MVIEW(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def poly_wrap(self, WrapVV p2, WrapVV p3):

        try:


            PolyWrap_MVIEW(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def rectangle(self, double p2, double p3, double p4, double p5):

        try:


            Rectangle_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def segment(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8):

        try:


            Segment_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass


    def size_symbols(self, WrapVV p2, WrapVV p3, WrapVV p4):

        try:


            SizeSymbols_MVIEW(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass


    def symbol(self, double p2, double p3):

        try:


            Symbol_MVIEW(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def symbols(self, WrapVV p2, WrapVV p3):

        try:


            Symbols_MVIEW(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def symbols_itr(self, const char* p2, WrapVV p3, WrapVV p4, WrapVV p5):

        try:


            SymbolsITR_MVIEW(get_p_geo(), &self.handle, p2, &p3.handle, &p4.handle, &p5.handle)
            
        finally:
            pass


    def text(self, const char* p2, double p3, double p4):

        try:


            Text_MVIEW(get_p_geo(), &self.handle, p2, &p3, &p4)
            
        finally:
            pass


# Drawing Object




    def aggregate(self, WrapAGG p2, const char* p3):

        try:


            Aggregate_MVIEW(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass


    def get_aggregate(self, int32_t p2):

        try:


            _return_val = WrapAGG(GetAggregate_MVIEW(get_p_geo(), &self.handle, &p2))
            return _return_val
        finally:
            pass


    def change_line_message(self, const char* p2):

        try:


            ChangeLineMessage_MVIEW(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def col_symbol(self, const char* p2, WrapCSYMB p3):

        try:


            ColSymbol_MVIEW(get_p_geo(), &self.handle, p2, &p3.handle)
            
        finally:
            pass


    def get_col_symbol(self, int32_t p2):

        try:


            _return_val = WrapCSYMB(GetColSymbol_MVIEW(get_p_geo(), &self.handle, &p2))
            return _return_val
        finally:
            pass


    def datalinkd(self, WrapDATALINKD p2, const char* p3):

        try:


            DATALINKD_MVIEW(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass


    def get_datalinkd(self, int32_t p2):

        try:


            _return_val = WrapDATALINKD(GetDATALINKD_MVIEW(get_p_geo(), &self.handle, &p2))
            return _return_val
        finally:
            pass


    def easy_maker(self, const char* p2, const char* p3):

        try:


            EasyMaker_MVIEW(get_p_geo(), &self.handle, p2, p3)
            
        finally:
            pass


    def emf_object(self, double p2, double p3, double p4, double p5, const char* p6):

        try:


            EMFObject_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, p6)
            
        finally:
            pass


    def external_string_object(self, double p2, double p3, double p4, double p5, const char* p6, const char* p7, const char* p8):

        try:


            ExternalStringObject_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, p6, p7, p8)
            
        finally:
            pass


    def link(self, WrapDB p2, const char* p3):

        try:


            Link_MVIEW(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass


    def maker(self, int32_t p2, int32_t p3, const char* p4, int32_t p5, const char* p6, const char* p7):

        try:


            Maker_MVIEW(get_p_geo(), &self.handle, &p2, &p3, p4, &p5, p6, p7)
            
        finally:
            pass


    def meta(self, WrapMETA p2, const char* p3):

        try:


            Meta_MVIEW(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass


    def voxd(self, WrapVOXD p2, const char* p3):

        try:


            VOXD_MVIEW(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass


    def get_voxd(self, int32_t p2):

        try:


            _return_val = WrapVOXD(GetVOXD_MVIEW(get_p_geo(), &self.handle, &p2))
            return _return_val
        finally:
            pass


    def draw_vector_voxel_vectors(self, WrapVOX p2, const char* p3, WrapITR p4, double p5, double p6, double p7, double p8, int32_t p9):

        try:


            DrawVectorVoxelVectors_MVIEW(get_p_geo(), &self.handle, &p2.handle, p3, &p4.handle, &p5, &p6, &p7, &p8, &p9)
            
        finally:
            pass


    def get_vector_3d(self, int32_t p2):

        try:


            _return_val = WrapVECTOR3D(GetVECTOR3D_MVIEW(get_p_geo(), &self.handle, &p2))
            return _return_val
        finally:
            pass


    def draw_vectors_3d(self, const char* p2, WrapVV p3, WrapVV p4, WrapVV p5, WrapVV p6, WrapVV p7, WrapVV p8, WrapITR p9, double p10, double p11, double p12):

        try:


            DrawVectors3D_MVIEW(get_p_geo(), &self.handle, p2, &p3.handle, &p4.handle, &p5.handle, &p6.handle, &p7.handle, &p8.handle, &p9.handle, &p10, &p11, &p12)
            
        finally:
            pass


# Group Methods




    def set_group_itr(self, int32_t p2, WrapITR p3):

        try:


            SetGroupITR_MVIEW(get_p_geo(), &self.handle, &p2, &p3.handle)
            
        finally:
            pass


    def get_group_itr(self, int32_t p2):

        try:


            _return_val = WrapITR(GetGroupITR_MVIEW(get_p_geo(), &self.handle, &p2))
            return _return_val
        finally:
            pass


    def group_itr_exists(self, int32_t p2):

        try:


            _return_val = iGroupITRExists_MVIEW(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def delete_group_itr(self, int32_t p2):

        try:


            DeleteGroupITR_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_group_tpat(self, int32_t p2, WrapTPAT p3):

        try:


            SetGroupTPAT_MVIEW(get_p_geo(), &self.handle, &p2, &p3.handle)
            
        finally:
            pass


    def get_group_tpat(self, int32_t p2):

        try:


            _return_val = WrapTPAT(GetGroupTPAT_MVIEW(get_p_geo(), &self.handle, &p2))
            return _return_val
        finally:
            pass


    def group_tpat_exists(self, int32_t p2):

        try:


            _return_val = iGroupTPATExists_MVIEW(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def delete_group_tpat(self, int32_t p2):

        try:


            DeleteGroupTPAT_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def group_storage_exists(self, int32_t p2, const char* p3):

        try:


            _return_val = iGroupStorageExists_MVIEW(get_p_geo(), &self.handle, &p2, p3)
            return _return_val
        finally:
            pass


    def read_group_storage(self, int32_t p2, const char* p3):

        try:


            _return_val = WrapBF(ReadGroupStorage_MVIEW(get_p_geo(), &self.handle, &p2, p3))
            return _return_val
        finally:
            pass


    def delete_group_storage(self, int32_t p2, const char* p3):

        try:


            DeleteGroupStorage_MVIEW(get_p_geo(), &self.handle, &p2, p3)
            
        finally:
            pass


    def write_group_storage(self, int32_t p2, const char* p3, WrapBF p4):

        try:


            WriteGroupStorage_MVIEW(get_p_geo(), &self.handle, &p2, p3, &p4.handle)
            
        finally:
            pass


    def copy_marked_groups(self, WrapMVIEW p2):

        try:


            CopyMarkedGroups_MVIEW(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def copy_raw_marked_groups(self, WrapMVIEW p2):

        try:


            CopyRawMarkedGroups_MVIEW(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def crc_group(self, const char* p2, int32_t p3):

        try:


            _return_val = CRCGroup_MVIEW(get_p_geo(), &self.handle, p2, &p3)
            return _return_val
        finally:
            pass


    def delete_group(self, const char* p2):

        try:


            DeleteGroup_MVIEW(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def del_marked_groups(self):

        try:


            DelMarkedGroups_MVIEW(get_p_geo(), &self.handle)
            
        finally:
            pass


    def get_group_extent(self, const char* p2, double p3, double p4, double p5, double p6, int32_t p7):

        try:


            GetGroupExtent_MVIEW(get_p_geo(), &self.handle, p2, &p3, &p4, &p5, &p6, &p7)
            return (p3, p4, p5, p6)
        finally:
            pass


    def get_group_transparency(self, const char* p2, double p3):

        try:


            GetGroupTransparency_MVIEW(get_p_geo(), &self.handle, p2, &p3)
            return p3
        finally:
            pass


    def group_to_ply(self, const char* p2, WrapPLY p3):

        try:


            GroupToPLY_MVIEW(get_p_geo(), &self.handle, p2, &p3.handle)
            
        finally:
            pass


    def hide_marked_groups(self, int32_t p2):

        try:


            HideMarkedGroups_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def hide_shadow2_d_interpretations(self, int32_t p2):

        try:


            HideShadow2DInterpretations_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def exist_group(self, const char* p2):

        try:


            _return_val = iExistGroup_MVIEW(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def gen_new_group_name(self, const char* p2, const char* p3):
        cdef int32_t p4 = 4*1040
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*1040)

            strcpy(cp3, p3)

            IGenNewGroupName_MVIEW(get_p_geo(), &self.handle, p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def is_group(self, const char* p2, int32_t p3):

        try:


            _return_val = iIsGroup_MVIEW(get_p_geo(), &self.handle, p2, &p3)
            return _return_val
        finally:
            pass


    def is_group_empty(self, const char* p2):

        try:


            _return_val = iIsGroupEmpty_MVIEW(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def is_movable(self):

        try:


            _return_val = iIsMovable_MVIEW(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def is_visible(self):

        try:


            _return_val = iIsVisible_MVIEW(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def list_groups(self, WrapLST p2, int32_t p3):

        try:


            _return_val = iListGroups_MVIEW(get_p_geo(), &self.handle, &p2.handle, &p3)
            return _return_val
        finally:
            pass


    def render_order(self):

        try:


            _return_val = iRenderOrder_MVIEW(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def mark_all_groups(self, int32_t p2):

        try:


            MarkAllGroups_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def mark_empty_groups(self, int32_t p2):

        try:


            MarkEmptyGroups_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def mark_group(self, const char* p2, int32_t p3):

        try:


            MarkGroup_MVIEW(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass


    def move_group_backward(self, const char* p2):

        try:


            MoveGroupBackward_MVIEW(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def move_group_forward(self, const char* p2):

        try:


            MoveGroupForward_MVIEW(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def move_group_to_back(self, const char* p2):

        try:


            MoveGroupToBack_MVIEW(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def move_group_to_front(self, const char* p2):

        try:


            MoveGroupToFront_MVIEW(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def rename_group(self, const char* p2, const char* p3):

        try:


            RenameGroup_MVIEW(get_p_geo(), &self.handle, p2, p3)
            
        finally:
            pass


    def set_group_moveable(self, const char* p2, int32_t p3):

        try:


            SetGroupMoveable_MVIEW(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass


    def set_group_transparency(self, const char* p2, double p3):

        try:


            SetGroupTransparency_MVIEW(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass


    def set_mark_moveable(self, int32_t p2):

        try:


            SetMarkMoveable_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_movability(self, int32_t p2):

        try:


            SetMovability_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_render_order(self, int32_t p2):

        try:


            SetRenderOrder_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_visibility(self, int32_t p2):

        try:


            SetVisibility_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def start_group(self, const char* p2, int32_t p3):

        try:


            StartGroup_MVIEW(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass


    def get_group_guid(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*64
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*64)

            strcpy(cp3, p3)

            GetGroupGUID_MVIEW(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def find_group_by_guid(self, const char* p2):

        try:


            _return_val = iFindGroupByGUID_MVIEW(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


# Projection




    def set_working_ipj(self, WrapIPJ p2):

        try:


            _SetWorkingIPJ_MVIEW(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def clear_esrild_ts(self):

        try:


            ClearESRILDTs_MVIEW(get_p_geo(), &self.handle)
            
        finally:
            pass


    def is_projection_empty(self):

        try:


            _return_val = iIsProjectionEmpty_MVIEW(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_ipj(self, WrapIPJ p2):

        try:


            GetIPJ_MVIEW(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_user_ipj(self, WrapIPJ p2):

        try:


            GetUserIPJ_MVIEW(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def mode_pj(self, int32_t p2):

        try:


            ModePJ_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def north(self):

        try:


            _return_val = rNorth_MVIEW(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def set_ipj(self, WrapIPJ p2):

        try:


            SetIPJ_MVIEW(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_user_ipj(self, WrapIPJ p2):

        try:


            SetUserIPJ_MVIEW(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


# Render




    def get_3d_group_flags(self, int32_t p2):

        try:


            _return_val = iGet3DGroupFlags_MVIEW(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def set_3d_group_flags(self, int32_t p2, int32_t p3):

        try:


            Set3DGroupFlags_MVIEW(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def get_group_freeze_scale(self, int32_t p2, double p3):

        try:


            _GetGroupFreezeScale_MVIEW(get_p_geo(), &self.handle, &p2, &p3)
            return p3
        finally:
            pass


    def set_freeze_scale(self, double p2):

        try:


            _SetFreezeScale_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_group_freeze_scale(self, int32_t p2, double p3):

        try:


            _SetGroupFreezeScale_MVIEW(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def find_group(self, const char* p2):

        try:


            _return_val = iFindGroup_MVIEW(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def group_name(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*128
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*128)

            strcpy(cp3, p3)

            IGroupName_MVIEW(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def render(self, HDC p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, double p7, double p8, double p9, double p10):

        try:


            Render_MVIEW(get_p_geo(), &self.handle, p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10)
            
        finally:
            pass


# Utility Drawing




    def set_u_fac(self, double p2):

        try:


            _SetUFac_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def axis_x(self, double p2, double p3, double p4, double p5, double p6, double p7):

        try:


            AxisX_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass


    def axis_y(self, double p2, double p3, double p4, double p5, double p6, double p7):

        try:


            AxisY_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass


    def grid(self, double p2, double p3, double p4, double p5, int32_t p6):

        try:


            Grid_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass


    def label_fid(self, WrapVV p2, double p3, double p4, double p5, double p6, double p7):

        try:


            LabelFid_MVIEW(get_p_geo(), &self.handle, &p2.handle, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass


    def label_x(self, double p2, double p3, double p4, double p5, int32_t p6, int32_t p7, int32_t p8):

        try:


            LabelX_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass


    def label_y(self, double p2, double p3, double p4, double p5, int32_t p6, int32_t p7, int32_t p8):

        try:


            LabelY_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass

    @classmethod
    def optimum_tick(cls, double p1, double p2, double p3):

        try:


            OptimumTick_MVIEW(get_p_geo(), &p1, &p2, &p3)
            return p3
        finally:
            pass


# View



    @classmethod
    def create(cls, WrapMAP p1, const char* p2, int32_t p3):

        try:


            _return_val = WrapMVIEW(Create_MVIEW(get_p_geo(), &p1.handle, p2, &p3))
            return _return_val
        finally:
            pass

    @classmethod
    def create_crooked_section(cls, WrapMAP p1, WrapIPJ p2, const char* p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11, WrapVV p12, WrapVV p13, WrapVV p14):

        try:


            _return_val = WrapMVIEW(CreateCrookedSection_MVIEW(get_p_geo(), &p1.handle, &p2.handle, p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12.handle, &p13.handle, &p14.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def create_crooked_section_data_profile(cls, WrapMAP p1, WrapIPJ p2, const char* p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11, int32_t p12, WrapVV p13, WrapVV p14, WrapVV p15):

        try:


            _return_val = WrapMVIEW(CreateCrookedSectionDataProfile_MVIEW(get_p_geo(), &p1.handle, &p2.handle, p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13.handle, &p14.handle, &p15.handle))
            return _return_val
        finally:
            pass




    def extent(self, int32_t p2, int32_t p3, double p4, double p5, double p6, double p7):

        try:


            Extent_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            return (p4, p5, p6, p7)
        finally:
            pass


    def get_map(self):

        try:


            _return_val = WrapMAP(GetMAP_MVIEW(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def get_reg(self):

        try:


            _return_val = WrapREG(GetREG_MVIEW(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def get_name(self, const char* p2):
        cdef int32_t p3 = 4*2080
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*2080)

            strcpy(cp2, p2)

            IGetName_MVIEW(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def get_guid(self, const char* p2):
        cdef int32_t p3 = 4*64
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*64)

            strcpy(cp2, p2)

            GetGUID_MVIEW(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



# View Control




    def plot_to_view(self, double p2, double p3):

        try:


            _PlotToView_MVIEW(get_p_geo(), &self.handle, &p2, &p3)
            return (p2, p3)
        finally:
            pass


    def set_thin_res(self, double p2):

        try:


            _SetThinRes_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def view_to_plot(self, double p2, double p3):

        try:


            _ViewToPlot_MVIEW(get_p_geo(), &self.handle, &p2, &p3)
            return (p2, p3)
        finally:
            pass


    def best_fit_window(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, int32_t p10):

        try:


            BestFitWindow_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10)
            return (p2, p3, p4, p5, p6, p7, p8, p9)
        finally:
            pass


    def fit_map_window_3d(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9):

        try:


            FitMapWindow3D_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9)
            
        finally:
            pass


    def fit_window(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9):

        try:


            FitWindow_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9)
            
        finally:
            pass


    def get_class_name(self, const char* p2, const char* p3):
        cdef int32_t p4 = 4*128
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*128)

            strcpy(cp3, p3)

            IGetClassName_MVIEW(get_p_geo(), &self.handle, p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def map_origin(self, double p2, double p3):

        try:


            MapOrigin_MVIEW(get_p_geo(), &self.handle, &p2, &p3)
            return (p2, p3)
        finally:
            pass


    def re_scale(self, double p2):

        try:


            ReScale_MVIEW(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def get_map_scale(self):

        try:


            _return_val = rGetMapScale_MVIEW(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def scale_mm(self):

        try:


            _return_val = rScaleMM_MVIEW(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def scale_pj_mm(self):

        try:


            _return_val = rScalePjMM_MVIEW(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def scale_ymm(self):

        try:


            _return_val = rScaleYMM_MVIEW(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def scale_all_group(self, double p2, double p3):

        try:


            ScaleAllGroup_MVIEW(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def scale_window(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9):

        try:


            ScaleWindow_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9)
            
        finally:
            pass


    def set_class_name(self, const char* p2, const char* p3):

        try:


            SetClassName_MVIEW(get_p_geo(), &self.handle, p2, p3)
            
        finally:
            pass


    def set_window(self, double p2, double p3, double p4, double p5, int32_t p6):

        try:


            SetWindow_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass


    def tran_scale(self, double p2, double p3, double p4, double p5):

        try:


            TranScale_MVIEW(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def user_to_view(self, double p2, double p3):

        try:


            UserToView_MVIEW(get_p_geo(), &self.handle, &p2, &p3)
            return (p2, p3)
        finally:
            pass


    def view_to_user(self, double p2, double p3):

        try:


            ViewToUser_MVIEW(get_p_geo(), &self.handle, &p2, &p3)
            return (p2, p3)
        finally:
            pass


    pass



cdef class WrapMVU:
    




    @classmethod
    def arrow(cls, WrapMVIEW p1, double p2, double p3, double p4, double p5, double p6, double p7, int32_t p8):

        try:


            Arrow_MVU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass

    @classmethod
    def arrow_vector_vv(cls, WrapMVIEW p1, WrapVV p2, WrapVV p3, WrapVV p4, WrapVV p5, double p6, int32_t p7, int32_t p8, int32_t p9, int32_t p10, double p11):

        try:


            ArrowVectorVV_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5.handle, &p6, &p7, &p8, &p9, &p10, &p11)
            
        finally:
            pass

    @classmethod
    def bar_chart(cls, WrapMVIEW p1, const char* p2, WrapDB p3, int32_t p4, const char* p5, const char* p6, const char* p7, double p8, const char* p9, double p10, const char* p11, double p12, double p13, int32_t p14, int32_t p15, int32_t p16, int32_t p17, int32_t p18, int32_t p19, int32_t p20, double p21, double p22, double p23, double p24, double p25, double p26, double p27, double p28):

        try:


            BarChart_MVU(get_p_geo(), &p1.handle, p2, &p3.handle, &p4, p5, p6, p7, &p8, p9, &p10, p11, &p12, &p13, &p14, &p15, &p16, &p17, &p18, &p19, &p20, &p21, &p22, &p23, &p24, &p25, &p26, &p27, &p28)
            
        finally:
            pass

    @classmethod
    def cdi_pixel_plot(cls, WrapMVIEW p1, const char* p2, WrapVA p3, WrapVA p4, WrapVV p5, WrapITR p6):

        try:


            CDIPixelPlot_MVU(get_p_geo(), &p1.handle, p2, &p3.handle, &p4.handle, &p5.handle, &p6.handle)
            
        finally:
            pass

    @classmethod
    def cdi_pixel_plot_3d(cls, WrapMVIEW p1, const char* p2, WrapVA p3, WrapVA p4, WrapVV p5, WrapVV p6, WrapITR p7):

        try:


            CDIPixelPlot3D_MVU(get_p_geo(), &p1.handle, p2, &p3.handle, &p4.handle, &p5.handle, &p6.handle, &p7.handle)
            
        finally:
            pass

    @classmethod
    def color_bar(cls, WrapMVIEW p1, WrapITR p2, int32_t p3, double p4, double p5, double p6, double p7, double p8):

        try:


            ColorBar_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass

    @classmethod
    def color_bar2(cls, WrapMVIEW p1, WrapITR p2, WrapITR p3, int32_t p4, double p5, double p6, double p7, double p8, double p9):

        try:


            ColorBar2_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5, &p6, &p7, &p8, &p9)
            
        finally:
            pass

    @classmethod
    def color_bar2_style(cls, WrapMVIEW p1, WrapITR p2, WrapITR p3, int32_t p4, double p5, double p6, double p7, double p8, double p9, int32_t p10):

        try:


            ColorBar2Style_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5, &p6, &p7, &p8, &p9, &p10)
            
        finally:
            pass

    @classmethod
    def color_bar_hor(cls, WrapMVIEW p1, WrapITR p2, int32_t p3, double p4, double p5, double p6, double p7, double p8, int32_t p9):

        try:


            ColorBarHor_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5, &p6, &p7, &p8, &p9)
            
        finally:
            pass

    @classmethod
    def color_bar_hor2(cls, WrapMVIEW p1, WrapITR p2, WrapITR p3, int32_t p4, double p5, double p6, double p7, double p8, double p9, int32_t p10):

        try:


            ColorBarHor2_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5, &p6, &p7, &p8, &p9, &p10)
            
        finally:
            pass

    @classmethod
    def color_bar_hor2_style(cls, WrapMVIEW p1, WrapITR p2, WrapITR p3, int32_t p4, double p5, double p6, double p7, double p8, double p9, int32_t p10, int32_t p11):

        try:


            ColorBarHor2Style_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11)
            
        finally:
            pass

    @classmethod
    def color_bar_hor_style(cls, WrapMVIEW p1, WrapITR p2, int32_t p3, double p4, double p5, double p6, double p7, double p8, int32_t p9, int32_t p10):

        try:


            ColorBarHorStyle_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10)
            
        finally:
            pass

    @classmethod
    def color_bar_style(cls, WrapMVIEW p1, WrapITR p2, int32_t p3, double p4, double p5, double p6, double p7, double p8, int32_t p9):

        try:


            ColorBarStyle_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5, &p6, &p7, &p8, &p9)
            
        finally:
            pass

    @classmethod
    def color_bar_reg(cls, WrapMVIEW p1, WrapITR p2, WrapITR p3, WrapREG p4):

        try:


            ColorBarREG_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass

    @classmethod
    def contour(cls, WrapMVIEW p1, const char* p2, const char* p3):

        try:


            Contour_MVU(get_p_geo(), &p1.handle, p2, p3)
            
        finally:
            pass

    @classmethod
    def contour_ply(cls, WrapMVIEW p1, WrapPLY p2, const char* p3, const char* p4):

        try:


            ContourPLY_MVU(get_p_geo(), &p1.handle, &p2.handle, p3, p4)
            
        finally:
            pass

    @classmethod
    def c_symb_legend(cls, WrapMVIEW p1, double p2, double p3, double p4, double p5, const char* p6, const char* p7, const char* p8):

        try:


            CSymbLegend_MVU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, p6, p7, p8)
            
        finally:
            pass

    @classmethod
    def decay_curve(cls, WrapMVIEW p1, WrapVV p2, WrapVV p3, WrapVA p4, WrapVA p5, int32_t p6, double p7, double p8, int32_t p9, int32_t p10, double p11, double p12, double p13, double p14, double p15, double p16, double p17, double p18, double p19, int32_t p20, const char* p21):

        try:


            DecayCurve_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5.handle, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16, &p17, &p18, &p19, &p20, p21)
            
        finally:
            pass

    @classmethod
    def direction_plot(cls, WrapMVIEW p1, WrapVV p2, WrapVV p3, double p4, double p5, int32_t p6):

        try:


            DirectionPlot_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def em_forward(cls, WrapMVIEW p1, double p2, double p3, double p4, double p5, double p6, double p7, int32_t p8, double p9, double p10, double p11, double p12, WrapVV p13, WrapVV p14, WrapVV p15, WrapVV p16, int32_t p17, int32_t p18):

        try:


            EMForward_MVU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13.handle, &p14.handle, &p15.handle, &p16.handle, &p17, &p18)
            
        finally:
            pass

    @classmethod
    def export_datamine_string(cls, WrapMVIEW p1, WrapLST p2, const char* p3):

        try:


            ExportDatamineString_MVU(get_p_geo(), &p1.handle, &p2.handle, p3)
            
        finally:
            pass

    @classmethod
    def export_dxf_3d(cls, WrapMVIEW p1, WrapLST p2, WrapWA p3):

        try:


            ExportDXF3D_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def export_surpac_str(cls, WrapMVIEW p1, WrapLST p2, WrapWA p3, WrapWA p4):

        try:


            ExportSurpacSTR_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass

    @classmethod
    def flight_plot(cls, WrapMVIEW p1, WrapVV p2, WrapVV p3, const char* p4, int32_t p5, double p6, int32_t p7, double p8, double p9):

        try:


            FlightPlot_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, p4, &p5, &p6, &p7, &p8, &p9)
            
        finally:
            pass

    @classmethod
    def gen_areas(cls, WrapMVIEW p1, const char* p2, WrapVV p3, WrapVV p4, double p5):

        try:


            GenAreas_MVU(get_p_geo(), &p1.handle, p2, &p3.handle, &p4.handle, &p5)
            
        finally:
            pass

    @classmethod
    def get_range_gocad_surface(cls, const char* p1, double p2, double p3, double p4, double p5, double p6, double p7):

        try:


            GetRangeGOCADSurface_MVU(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6, &p7)
            return (p2, p3, p4, p5, p6, p7)
        finally:
            pass

    @classmethod
    def histogram(cls, WrapMVIEW p1, WrapST p2, WrapST p3, const char* p4, const char* p5, double p6, double p7, double p8, double p9, double p10, double p11, double p12, double p13, double p14, int32_t p15, int32_t p16, int32_t p17, WrapST p18):

        try:


            Histogram_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, p4, p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16, &p17, &p18.handle)
            
        finally:
            pass

    @classmethod
    def histogram2(cls, WrapMVIEW p1, WrapST p2, WrapST p3, const char* p4, const char* p5, double p6, const char* p7, double p8, const char* p9, double p10, double p11, double p12, double p13, double p14, double p15, double p16, double p17, double p18, int32_t p19, int32_t p20, int32_t p21, WrapST p22, double p23):

        try:


            Histogram2_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, p4, p5, &p6, p7, &p8, p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16, &p17, &p18, &p19, &p20, &p21, &p22.handle, &p23)
            
        finally:
            pass

    @classmethod
    def histogram3(cls, WrapMVIEW p1, WrapST p2, WrapST p3, const char* p4, const char* p5, double p6, double p7, double p8, double p9, double p10, double p11, double p12, double p13, double p14, int32_t p15, int32_t p16, int32_t p17, int32_t p18, int32_t p19, WrapST p20):

        try:


            Histogram3_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, p4, p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16, &p17, &p18, &p19, &p20.handle)
            
        finally:
            pass

    @classmethod
    def histogram4(cls, WrapMVIEW p1, WrapST p2, WrapST p3, const char* p4, const char* p5, double p6, double p7, double p8, double p9, double p10, double p11, double p12, double p13, double p14, int32_t p15, int32_t p16, int32_t p17, int32_t p18, int32_t p19, int32_t p20, WrapST p21):

        try:


            Histogram4_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, p4, p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16, &p17, &p18, &p19, &p20, &p21.handle)
            
        finally:
            pass

    @classmethod
    def histogram5(cls, WrapMVIEW p1, WrapST p2, WrapST p3, const char* p4, const char* p5, double p6, double p7, double p8, double p9, double p10, double p11, double p12, double p13, double p14, double p15, int32_t p16, int32_t p17, int32_t p18, int32_t p19, int32_t p20, int32_t p21, WrapST p22, WrapITR p23):

        try:


            Histogram5_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, p4, p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16, &p17, &p18, &p19, &p20, &p21, &p22.handle, &p23.handle)
            
        finally:
            pass

    @classmethod
    def exportable_dxf_3d_groups_lst(cls, WrapMVIEW p1, WrapLST p2):

        try:


            _return_val = iExportableDXF3DGroupsLST_MVU(get_p_geo(), &p1.handle, &p2.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def mapset_test(cls, double p1, double p2, double p3, double p4, const char* p5, int32_t p6, int32_t p7, double p8, double p9, double p10, double p11, double p12, double p13, double p14):

        try:


            _return_val = iMapsetTest_MVU(get_p_geo(), &p1, &p2, &p3, &p4, p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14)
            return (_return_val, p8)
        finally:
            pass

    @classmethod
    def mapset2_test(cls, double p1, double p2, double p3, double p4, const char* p5, int32_t p6, int32_t p7, double p8, double p9, double p10, double p11, double p12, double p13, double p14, double p15):

        try:


            _return_val = iMapset2Test_MVU(get_p_geo(), &p1, &p2, &p3, &p4, p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15)
            return (_return_val, p8)
        finally:
            pass

    @classmethod
    def import_gocad_surface(cls, WrapMVIEW p1, const char* p2, int32_t p3):

        try:


            ImportGOCADSurface_MVU(get_p_geo(), &p1.handle, p2, &p3)
            
        finally:
            pass

    @classmethod
    def load_plot(cls, WrapMAP p1, const char* p2):

        try:


            LoadPlot_MVU(get_p_geo(), &p1.handle, p2)
            
        finally:
            pass

    @classmethod
    def map_from_plt(cls, WrapMAP p1, const char* p2, const char* p3, const char* p4, double p5, double p6):

        try:


            MapFromPLT_MVU(get_p_geo(), &p1.handle, p2, p3, p4, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def map_mdf(cls, WrapMAP p1, const char* p2, const char* p3):

        try:


            MapMDF_MVU(get_p_geo(), &p1.handle, p2, p3)
            
        finally:
            pass

    @classmethod
    def mapset(cls, WrapMAP p1, const char* p2, const char* p3, double p4, double p5, double p6, double p7, const char* p8, int32_t p9, int32_t p10, double p11, double p12, double p13, double p14, double p15, double p16, double p17):

        try:


            Mapset_MVU(get_p_geo(), &p1.handle, p2, p3, &p4, &p5, &p6, &p7, p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16, &p17)
            
        finally:
            pass

    @classmethod
    def mapset2(cls, WrapMAP p1, const char* p2, const char* p3, double p4, double p5, double p6, double p7, const char* p8, int32_t p9, int32_t p10, double p11, double p12, double p13, double p14, double p15, double p16, double p17, double p18):

        try:


            Mapset2_MVU(get_p_geo(), &p1.handle, p2, p3, &p4, &p5, &p6, &p7, p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16, &p17, &p18)
            
        finally:
            pass

    @classmethod
    def mdf(cls, WrapMAP p1, const char* p2, const char* p3, const char* p4):

        try:


            MDF_MVU(get_p_geo(), &p1.handle, p2, p3, p4)
            
        finally:
            pass

    @classmethod
    def path_plot(cls, WrapMVIEW p1, WrapVV p2, WrapVV p3, const char* p4, int32_t p5, double p6, int32_t p7, double p8, double p9, double p10):

        try:


            PathPlot_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, p4, &p5, &p6, &p7, &p8, &p9, &p10)
            
        finally:
            pass

    @classmethod
    def path_plot_ex(cls, WrapMVIEW p1, WrapVV p2, WrapVV p3, const char* p4, int32_t p5, int32_t p6, double p7, int32_t p8, double p9, double p10, double p11):

        try:


            PathPlotEx_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11)
            
        finally:
            pass

    @classmethod
    def path_plot_ex2(cls, WrapMVIEW p1, WrapVV p2, WrapVV p3, const char* p4, int32_t p5, int32_t p6, double p7, int32_t p8, double p9, double p10, double p11, int32_t p12):

        try:


            PathPlotEx2_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12)
            
        finally:
            pass

    @classmethod
    def plot_voxel_surface(cls, WrapMVIEW p1, WrapVOX p2, double p3, int32_t p4, double p5):

        try:


            PlotVoxelSurface_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def plot_voxel_surface2(cls, WrapMVIEW p1, WrapVOX p2, double p3, int32_t p4, double p5, double p6, const char* p7):

        try:


            PlotVoxelSurface2_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5, &p6, p7)
            
        finally:
            pass

    @classmethod
    def generate_surface_from_voxel(cls, WrapMVIEW p1, WrapVOX p2, int32_t p3, int32_t p4, double p5, double p6, int32_t p7, double p8, double p9, const char* p10):

        try:


            GenerateSurfaceFromVoxel_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5, &p6, &p7, &p8, &p9, p10)
            
        finally:
            pass

    @classmethod
    def post(cls, WrapMVIEW p1, WrapVV p2, WrapVV p3, WrapVV p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8, int32_t p9, double p10):

        try:


            Post_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5, &p6, &p7, &p8, &p9, &p10)
            
        finally:
            pass

    @classmethod
    def post_ex(cls, WrapMVIEW p1, WrapVV p2, WrapVV p3, WrapVV p4, WrapVV p5, int32_t p6, double p7, double p8, int32_t p9, int32_t p10, int32_t p11, double p12, double p13, int32_t p14, double p15, int32_t p16, double p17, int32_t p18, double p19, int32_t p20):

        try:


            PostEx_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5.handle, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16, &p17, &p18, &p19, &p20)
            
        finally:
            pass

    @classmethod
    def probability(cls, WrapMVIEW p1, WrapST p2, WrapST p3, const char* p4, const char* p5, int32_t p6, double p7, double p8, double p9, double p10, double p11, double p12, double p13, double p14, int32_t p15, int32_t p16, int32_t p17, WrapITR p18):

        try:


            Probability_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, p4, p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16, &p17, &p18.handle)
            
        finally:
            pass

    @classmethod
    def profile_plot(cls, WrapMVIEW p1, WrapVV p2, WrapVV p3, WrapVV p4, double p5, int32_t p6, double p7, double p8, double p9, int32_t p10):

        try:


            ProfilePlot_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5, &p6, &p7, &p8, &p9, &p10)
            
        finally:
            pass

    @classmethod
    def profile_plot_ex(cls, WrapMVIEW p1, WrapVV p2, WrapVV p3, WrapVV p4, double p5, int32_t p6, double p7, double p8, double p9, int32_t p10, int32_t p11, double p12, int32_t p13, const char* p14, const char* p15):

        try:


            ProfilePlotEx_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, p14, p15)
            
        finally:
            pass

    @classmethod
    def prop_symb_legend(cls, WrapMVIEW p1, double p2, double p3, double p4, double p5, double p6, int32_t p7, double p8, double p9, const char* p10, const char* p11):

        try:


            PropSymbLegend_MVU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, p10, p11)
            
        finally:
            pass

    @classmethod
    def re_gen_areas(cls, WrapMVIEW p1, const char* p2):

        try:


            ReGenAreas_MVU(get_p_geo(), &p1.handle, p2)
            
        finally:
            pass

    @classmethod
    def symb_off(cls, WrapMVIEW p1, WrapVV p2, WrapVV p3, WrapVV p4, double p5, double p6):

        try:


            SymbOff_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def text_box(cls, WrapMVIEW p1, double p2, double p3, double p4, double p5, const char* p6, double p7, int32_t p8):

        try:


            TextBox_MVU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, p6, &p7, &p8)
            
        finally:
            pass

    @classmethod
    def tick(cls, WrapMVIEW p1, WrapVV p2, WrapVV p3, WrapVV p4, double p5, double p6, double p7, double p8):

        try:


            Tick_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5, &p6, &p7, &p8)
            
        finally:
            pass

    @classmethod
    def tick_ex(cls, WrapMVIEW p1, WrapVV p2, WrapVV p3, WrapVV p4, double p5, double p6, double p7, double p8, double p9):

        try:


            TickEx_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5, &p6, &p7, &p8, &p9)
            
        finally:
            pass

    @classmethod
    def trnd_path(cls, WrapMVIEW p1, WrapVV p2, WrapVV p3, int32_t p4, double p5):

        try:


            TrndPath_MVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5)
            
        finally:
            pass

    pass



cdef class WrapMXD:
    




    @classmethod
    def create_metadata(cls, const char* p1):

        try:


            CreateMetadata_MXD(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def convert_to_map(cls, const char* p1, const char* p2):

        try:


            ConvertToMap_MXD(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def sync(cls, const char* p1):

        try:


            Sync_MXD(get_p_geo(), p1)
            
        finally:
            pass

    pass



cdef class WrapPAT:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_PAT(get_p_geo(), &self.handle)




    @classmethod
    def create(cls):

        try:


            _return_val = WrapPAT(Create_PAT(get_p_geo()))
            return _return_val
        finally:
            pass




    def get_lst(self, const char* p2, WrapLST p3):

        try:


            GetLST_PAT(get_p_geo(), &self.handle, p2, &p3.handle)
            
        finally:
            pass

    pass



cdef class WrapPG:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_PG(get_p_geo(), &self.handle)




# 2D Methods




    def copy(self, WrapPG p2):

        try:


            Copy_PG(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def copy_subset(self, WrapPG p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8):

        try:


            CopySubset_PG(get_p_geo(), &self.handle, &p2.handle, &p3, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass

    @classmethod
    def create(cls, int32_t p1, int32_t p2, int32_t p3):

        try:


            _return_val = WrapPG(Create_PG(get_p_geo(), &p1, &p2, &p3))
            return _return_val
        finally:
            pass

    @classmethod
    def create_s(cls, WrapBF p1):

        try:


            _return_val = WrapPG(CreateS_PG(get_p_geo(), &p1.handle))
            return _return_val
        finally:
            pass




    def dummy(self):

        try:


            Dummy_PG(get_p_geo(), &self.handle)
            
        finally:
            pass


    def e_type(self):

        try:


            _return_val = iEType_PG(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def n_cols(self):

        try:


            _return_val = iNCols_PG(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def n_rows(self):

        try:


            _return_val = iNRows_PG(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def n_slices(self):

        try:


            _return_val = iNSlices_PG(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def range(self, double p2, double p3):

        try:


            Range_PG(get_p_geo(), &self.handle, &p2, &p3)
            return (p2, p3)
        finally:
            pass


    def get(self, int32_t p2, int32_t p3):

        try:


            _return_val = rGet_PG(get_p_geo(), &self.handle, &p2, &p3)
            return _return_val
        finally:
            pass


    def read_col(self, int32_t p2, int32_t p3, int32_t p4, WrapVV p5):

        try:


            ReadCol_PG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5.handle)
            
        finally:
            pass


    def read_row(self, int32_t p2, int32_t p3, int32_t p4, WrapVV p5):

        try:


            ReadRow_PG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5.handle)
            
        finally:
            pass


    def re_allocate(self, int32_t p2, int32_t p3):

        try:


            ReAllocate_PG(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def serial(self, WrapBF p2):

        try:


            Serial_PG(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def statistics(self, WrapST p2):

        try:


            Statistics_PG(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def write_col(self, int32_t p2, int32_t p3, int32_t p4, WrapVV p5):

        try:


            WriteCol_PG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5.handle)
            
        finally:
            pass


    def write_row(self, int32_t p2, int32_t p3, int32_t p4, WrapVV p5):

        try:


            WriteRow_PG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5.handle)
            
        finally:
            pass


# 3D Methods




    def copy_subset_3d(self, WrapPG p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8, int32_t p9, int32_t p10, int32_t p11):

        try:


            CopySubset3D_PG(get_p_geo(), &self.handle, &p2.handle, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11)
            
        finally:
            pass

    @classmethod
    def create_3d(cls, int32_t p1, int32_t p2, int32_t p3, int32_t p4):

        try:


            _return_val = WrapPG(Create3D_PG(get_p_geo(), &p1, &p2, &p3, &p4))
            return _return_val
        finally:
            pass


    def read_col_3d(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5, WrapVV p6):

        try:


            ReadCol3D_PG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6.handle)
            
        finally:
            pass


    def read_row_3d(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5, WrapVV p6):

        try:


            ReadRow3D_PG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6.handle)
            
        finally:
            pass


    def read_trace_3d(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5, WrapVV p6):

        try:


            ReadTrace3D_PG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6.handle)
            
        finally:
            pass


    def re_allocate_3d(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            ReAllocate3D_PG(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def write_col_3d(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5, WrapVV p6):

        try:


            WriteCol3D_PG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6.handle)
            
        finally:
            pass


    def write_row_3d(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5, WrapVV p6):

        try:


            WriteRow3D_PG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6.handle)
            
        finally:
            pass


    def write_trace_3d(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5, WrapVV p6):

        try:


            WriteTrace3D_PG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6.handle)
            
        finally:
            pass


# Utility Methods




    def read_bf(self, WrapBF p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            ReadBF_PG(get_p_geo(), &self.handle, &p2.handle, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass


    def read_ra(self, WrapRA p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, const char* p7):

        try:


            ReadRA_PG(get_p_geo(), &self.handle, &p2.handle, &p3, &p4, &p5, &p6, p7)
            
        finally:
            pass


    def write_bf(self, WrapBF p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            WriteBF_PG(get_p_geo(), &self.handle, &p2.handle, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass


    def write_bf_ex(self, WrapBF p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, double p8):

        try:


            WriteBFEx_PG(get_p_geo(), &self.handle, &p2.handle, &p3, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass


    def write_wa(self, WrapWA p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, const char* p7):

        try:


            WriteWA_PG(get_p_geo(), &self.handle, &p2.handle, &p3, &p4, &p5, &p6, p7)
            
        finally:
            pass


    pass



cdef class WrapPJ:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_PJ(get_p_geo(), &self.handle)





    def clip_ply(self, double p2, double p3, double p4, double p5, double p6, WrapPLY p7):

        try:


            ClipPLY_PJ(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7.handle)
            
        finally:
            pass


    def convert_vv(self, WrapVV p2, WrapVV p3):

        try:


            ConvertVV_PJ(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def convert_vv3(self, WrapVV p2, WrapVV p3, WrapVV p4):

        try:


            ConvertVV3_PJ(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass


    def convert_xy(self, double p2, double p3):

        try:


            ConvertXY_PJ(get_p_geo(), &self.handle, &p2, &p3)
            return (p2, p3)
        finally:
            pass


    def convert_xy_from_xyz(self, double p2, double p3, double p4):

        try:


            ConvertXYFromXYZ_PJ(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return (p2, p3)
        finally:
            pass


    def convert_xyz(self, double p2, double p3, double p4):

        try:


            ConvertXYZ_PJ(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return (p2, p3, p4)
        finally:
            pass

    @classmethod
    def create(cls, const char* p1, const char* p2):

        try:


            _return_val = WrapPJ(Create_PJ(get_p_geo(), p1, p2))
            return _return_val
        finally:
            pass

    @classmethod
    def create_ipj(cls, WrapIPJ p1, WrapIPJ p2):

        try:


            _return_val = WrapPJ(CreateIPJ_PJ(get_p_geo(), &p1.handle, &p2.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def create_rectified(cls, double p1, double p2, double p3, double p4, double p5, double p6, int32_t p7):

        try:


            _return_val = WrapPJ(CreateRectified_PJ(get_p_geo(), &p1, &p2, &p3, &p4, &p5, &p6, &p7))
            return _return_val
        finally:
            pass




    def elevation(self):

        try:


            _return_val = iElevation_PJ(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def is_input_ll(self):

        try:


            _return_val = iIsInputLL_PJ(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def is_output_ll(self):

        try:


            _return_val = iIsOutputLL_PJ(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def project_bounding_rectangle(self, double p2, double p3, double p4, double p5):

        try:


            ProjectBoundingRectangle_PJ(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            return (p2, p3, p4, p5)
        finally:
            pass


    def project_bounding_rectangle2(self, double p2, double p3, double p4, double p5, double p6):

        try:


            ProjectBoundingRectangle2_PJ(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6)
            return (p2, p3, p4, p5)
        finally:
            pass


    def project_bounding_rectangle_res(self, double p2, double p3, double p4, double p5, double p6):

        try:


            ProjectBoundingRectangleRes_PJ(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6)
            return (p2, p3, p4, p5, p6)
        finally:
            pass


    def project_bounding_rectangle_res2(self, double p2, double p3, double p4, double p5, double p6, double p7):

        try:


            ProjectBoundingRectangleRes2_PJ(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            return (p2, p3, p4, p5, p6)
        finally:
            pass


    def project_limited_bounding_rectangle(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9):

        try:


            ProjectLimitedBoundingRectangle_PJ(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9)
            return (p6, p7, p8, p9)
        finally:
            pass


    def setup_ldt(self):

        try:


            SetupLDT_PJ(get_p_geo(), &self.handle)
            
        finally:
            pass

    pass



cdef class WrapPLY:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_PLY(get_p_geo(), &self.handle)





    def add_polygon(self, WrapVV p2, WrapVV p3):

        try:


            AddPolygon_PLY(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def add_polygon_ex(self, WrapVV p2, WrapVV p3, int32_t p4):

        try:


            AddPolygonEx_PLY(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4)
            
        finally:
            pass


    def change_ipj(self, WrapIPJ p2):

        try:


            ChangeIPJ_PLY(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def clear(self):

        try:


            Clear_PLY(get_p_geo(), &self.handle)
            
        finally:
            pass


    def copy(self, WrapPLY p2):

        try:


            Copy_PLY(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def create(cls):

        try:


            _return_val = WrapPLY(Create_PLY(get_p_geo()))
            return _return_val
        finally:
            pass

    @classmethod
    def create_s(cls, WrapBF p1):

        try:


            _return_val = WrapPLY(CreateS_PLY(get_p_geo(), &p1.handle))
            return _return_val
        finally:
            pass




    def extent(self, double p2, double p3, double p4, double p5):

        try:


            Extent_PLY(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            return (p2, p3, p4, p5)
        finally:
            pass


    def get_ipj(self, WrapIPJ p2):

        try:


            GetIPJ_PLY(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_polygon(self, WrapVV p2, WrapVV p3, int32_t p4):

        try:


            GetPolygon_PLY(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4)
            
        finally:
            pass


    def get_polygon_ex(self, WrapVV p2, WrapVV p3, int32_t p4, int32_t p5):

        try:


            GetPolygonEx_PLY(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4, &p5)
            return p5
        finally:
            pass


    def clip_area(self, double p2, double p3, double p4, double p5):

        try:


            _return_val = iClipArea_PLY(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            return _return_val
        finally:
            pass


    def clip_line_int(self, double p2, double p3, double p4, double p5, WrapVV p6, double p7, int32_t p8):

        try:


            _return_val = iClipLineInt_PLY(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6.handle, &p7, &p8)
            return (_return_val, p8)
        finally:
            pass


    def clip_ply(self, WrapPLY p2, WrapPLY p3):

        try:


            _return_val = iClipPLY_PLY(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            return _return_val
        finally:
            pass


    def get_description(self, const char* p2):
        cdef int32_t p3 = 4*16384
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*16384)

            strcpy(cp2, p2)

            IGetDescription_PLY(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def num_poly(self):

        try:


            _return_val = iNumPoly_PLY(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def load_table(self, const char* p2):

        try:


            LoadTable_PLY(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def area(self):

        try:


            _return_val = rArea_PLY(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def rectangle(self, double p2, double p3, double p4, double p5):

        try:


            Rectangle_PLY(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def rotate(self, double p2, double p3, double p4):

        try:


            Rotate_PLY(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def save_table(self, const char* p2):

        try:


            SaveTable_PLY(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def serial(self, WrapBF p2):

        try:


            Serial_PLY(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_description(self, const char* p2):

        try:


            SetDescription_PLY(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def set_ipj(self, WrapIPJ p2):

        try:


            SetIPJ_PLY(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def thin(self, double p2):

        try:


            Thin_PLY(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass

    pass



cdef class WrapRA:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_RA(get_p_geo(), &self.handle)




    @classmethod
    def create(cls, const char* p1):

        try:


            _return_val = WrapRA(Create_RA(get_p_geo(), p1))
            return _return_val
        finally:
            pass

    @classmethod
    def create_sbf(cls, WrapSBF p1, const char* p2):

        try:


            _return_val = WrapRA(CreateSBF_RA(get_p_geo(), &p1.handle, p2))
            return _return_val
        finally:
            pass




    def gets(self, const char* p2):
        cdef int32_t p3 = 4*16384
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*16384)

            strcpy(cp2, p2)

            _return_val = IiGets_RA(get_p_geo(), &self.handle, cp2, &p3)
            return (_return_val, cp2)
        finally:
            if cp2: free(cp2)



    def len(self):

        try:


            _return_val = iLen_RA(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def line(self):

        try:


            _return_val = iLine_RA(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def seek(self, int32_t p2):

        try:


            _return_val = iSeek_RA(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass

    pass



cdef class WrapREG:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_REG(get_p_geo(), &self.handle)





    def clear(self):

        try:


            Clear_REG(get_p_geo(), &self.handle)
            
        finally:
            pass


    def copy(self, WrapREG p2):

        try:


            Copy_REG(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def create(cls, int32_t p1):

        try:


            _return_val = WrapREG(Create_REG(get_p_geo(), &p1))
            return _return_val
        finally:
            pass

    @classmethod
    def create_s(cls, WrapBF p1):

        try:


            _return_val = WrapREG(CreateS_REG(get_p_geo(), &p1.handle))
            return _return_val
        finally:
            pass




    def get(self, const char* p2, const char* p3):
        cdef int32_t p4 = 4*16384
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*16384)

            strcpy(cp3, p3)

            Get_REG(get_p_geo(), &self.handle, p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def get_int(self, const char* p2, int32_t p3):

        try:


            GetInt_REG(get_p_geo(), &self.handle, p2, &p3)
            return p3
        finally:
            pass


    def get_one(self, int32_t p2, const char* p3, const char* p5):
        cdef int32_t p4 = 4*1024
        cdef int32_t p6 = 4*16384
        cdef char* cp3 = NULL
        cdef char* cp5 = NULL

        try:
            cp3 = <char*>malloc(4*1024)
            cp5 = <char*>malloc(4*16384)

            strcpy(cp3, p3)
            strcpy(cp5, p5)

            GetOne_REG(get_p_geo(), &self.handle, &p2, cp3, &p4, cp5, &p6)
            return (cp3, cp5)
        finally:
            if cp3: free(cp3)
            if cp5: free(cp5)



    def get_double(self, const char* p2, double p3):

        try:


            GetReal_REG(get_p_geo(), &self.handle, p2, &p3)
            return p3
        finally:
            pass


    def entries(self):

        try:


            _return_val = iEntries_REG(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def load_ini(self, const char* p2):

        try:


            LoadINI_REG(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def match_string(self, const char* p2, const char* p3):
        cdef int32_t p4 = 4*16384
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*16384)

            strcpy(cp3, p3)

            MatchString_REG(get_p_geo(), &self.handle, p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def merge(self, WrapREG p2, int32_t p3):

        try:


            Merge_REG(get_p_geo(), &self.handle, &p2.handle, &p3)
            
        finally:
            pass


    def save_ini(self, const char* p2):

        try:


            SaveINI_REG(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def serial(self, WrapBF p2):

        try:


            Serial_REG(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set(self, const char* p2, const char* p3):

        try:


            Set_REG(get_p_geo(), &self.handle, p2, p3)
            
        finally:
            pass


    def set_int(self, const char* p2, int32_t p3):

        try:


            SetInt_REG(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass


    def set_double(self, const char* p2, double p3):

        try:


            SetReal_REG(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass

    pass



cdef class WrapSBF:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_SBF(get_p_geo(), &self.handle)





    def create(self, const char* p2, int32_t p3):

        try:


            _return_val = WrapSBF(Create_SBF(get_p_geo(), &self.handle, p2, &p3))
            return _return_val
        finally:
            pass


    def create_obj_list(self, WrapLST p2, int32_t p3):

        try:


            CreateObjList_SBF(get_p_geo(), &self.handle, &p2.handle, &p3)
            
        finally:
            pass


    def del_dir(self, const char* p2):

        try:


            DelDir_SBF(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def del_file(self, const char* p2):

        try:


            DelFile_SBF(get_p_geo(), &self.handle, p2)
            
        finally:
            pass



    @classmethod
    def h_get_db(cls, WrapDB p1):

        try:


            _return_val = WrapSBF(hGetDB_SBF(get_p_geo(), &p1.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def h_get_map(cls, WrapMAP p1):

        try:


            _return_val = WrapSBF(hGetMAP_SBF(get_p_geo(), &p1.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def h_get_sys(cls):

        try:


            _return_val = WrapSBF(hGetSYS_SBF(get_p_geo()))
            return _return_val
        finally:
            pass


    def exist_dir(self, const char* p2):

        try:


            _return_val = iExistDir_SBF(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def exist_file(self, const char* p2):

        try:


            _return_val = iExistFile_SBF(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def save_log(self, const char* p2, const char* p3, const char* p4, int32_t p5):

        try:


            SaveLog_SBF(get_p_geo(), &self.handle, p2, p3, p4, &p5)
            
        finally:
            pass

    pass



cdef class WrapST:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_ST(get_p_geo(), &self.handle)




    @classmethod
    def create(cls):

        try:


            _return_val = WrapST(Create_ST(get_p_geo()))
            return _return_val
        finally:
            pass

    @classmethod
    def create_exact(cls):

        try:


            _return_val = WrapST(CreateExact_ST(get_p_geo()))
            return _return_val
        finally:
            pass


    def data(self, double p2):

        try:


            Data_ST(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def data_vv(self, WrapVV p2):

        try:


            DataVV_ST(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass




    def get_histogram_bins(self, WrapVV p2):

        try:


            GetHistogramBins_ST(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_histogram_info(self, int32_t p2, double p3, double p4):

        try:


            GetHistogramInfo_ST(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return (p2, p3, p4)
        finally:
            pass


    def histogram(self, int32_t p2):

        try:


            Histogram_ST(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def histogram2(self, int32_t p2, double p3, double p4):

        try:


            Histogram2_ST(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def equivalent_percentile(self, double p2):

        try:


            _return_val = rEquivalentPercentile_ST(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def equivalent_value(self, double p2):

        try:


            _return_val = rEquivalentValue_ST(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def reset(self):

        try:


            Reset_ST(get_p_geo(), &self.handle)
            
        finally:
            pass


    def get_info(self, int32_t p2):

        try:


            _return_val = rGetInfo_ST(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def get_norm_prob(cls, double p1):

        try:


            _return_val = rGetNormProb_ST(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def get_norm_prob_x(cls, double p1):

        try:


            _return_val = rGetNormProbX_ST(get_p_geo(), &p1)
            return _return_val
        finally:
            pass


    def normal_test(self):

        try:


            _return_val = rNormalTest_ST(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass

    pass



cdef class WrapST2:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_ST2(get_p_geo(), &self.handle)




    @classmethod
    def create(cls):

        try:


            _return_val = WrapST2(Create_ST2(get_p_geo()))
            return _return_val
        finally:
            pass


    def data_vv(self, WrapVV p2, WrapVV p3):

        try:


            DataVV_ST2(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass




    def items(self):

        try:


            _return_val = iItems_ST2(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def reset(self):

        try:


            Reset_ST2(get_p_geo(), &self.handle)
            
        finally:
            pass


    def get(self, int32_t p2):

        try:


            _return_val = rGet_ST2(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass

    pass



cdef class WrapSTR:
    




# Data Input



    @classmethod
    def scan_i(cls, const char* p1):

        try:


            _return_val = iScanI_STR(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def scan_date(cls, const char* p1, int32_t p2):

        try:


            _return_val = rScanDate_STR(get_p_geo(), p1, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def scan_form(cls, const char* p1, int32_t p2):

        try:


            _return_val = rScanForm_STR(get_p_geo(), p1, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def scan_r(cls, const char* p1):

        try:


            _return_val = rScanR_STR(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def scan_time(cls, const char* p1, int32_t p2):

        try:


            _return_val = rScanTime_STR(get_p_geo(), p1, &p2)
            return _return_val
        finally:
            pass


# File Name



    @classmethod
    def file_combine_parts(cls, const char* p1, const char* p2, const char* p3, const char* p4, const char* p5, const char* p6):
        cdef int32_t p7 = 4*1040
        cdef char* cp6 = NULL

        try:
            cp6 = <char*>malloc(4*1040)

            strcpy(cp6, p6)

            IFileCombineParts_STR(get_p_geo(), p1, p2, p3, p4, p5, cp6, &p7)
            return cp6
        finally:
            if cp6: free(cp6)


    @classmethod
    def file_ext(cls, const char* p1, const char* p2, const char* p3, int32_t p4):
        cdef int32_t p5 = 4*1040
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*1040)

            strcpy(cp3, p3)

            IFileExt_STR(get_p_geo(), p1, p2, cp3, &p4, &p5)
            return cp3
        finally:
            if cp3: free(cp3)


    @classmethod
    def file_name_part(cls, const char* p1, const char* p2, int32_t p4):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            IFileNamePart_STR(get_p_geo(), p1, cp2, &p3, &p4)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def get_m_file(cls, const char* p1, const char* p2, int32_t p4):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            IGetMFile_STR(get_p_geo(), p1, cp2, &p3, &p4)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def remove_qualifiers(cls, const char* p1, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            IRemoveQualifiers_STR(get_p_geo(), p1, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



# Formating



    @classmethod
    def format_crc(cls, int32_t p1, const char* p2, int32_t p4):
        cdef int32_t p3 = 4*128
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*128)

            strcpy(cp2, p2)

            IFormatCRC_STR(get_p_geo(), &p1, cp2, &p3, &p4)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def format_date(cls, double p1, const char* p2, int32_t p4, int32_t p5):
        cdef int32_t p3 = 4*128
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*128)

            strcpy(cp2, p2)

            IFormatDate_STR(get_p_geo(), &p1, cp2, &p3, &p4, &p5)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def format_i(cls, int32_t p1, const char* p2, int32_t p4):
        cdef int32_t p3 = 4*128
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*128)

            strcpy(cp2, p2)

            IFormatI_STR(get_p_geo(), &p1, cp2, &p3, &p4)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def format_r(cls, double p1, const char* p2, int32_t p4, int32_t p5):
        cdef int32_t p3 = 4*128
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*128)

            strcpy(cp2, p2)

            IFormatR_STR(get_p_geo(), &p1, cp2, &p3, &p4, &p5)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def format_r2(cls, double p1, const char* p2, int32_t p4, int32_t p5):
        cdef int32_t p3 = 4*128
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*128)

            strcpy(cp2, p2)

            IFormatR2_STR(get_p_geo(), &p1, cp2, &p3, &p4, &p5)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def format_double(cls, double p1, const char* p2, int32_t p4, int32_t p5, int32_t p6):
        cdef int32_t p3 = 4*128
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*128)

            strcpy(cp2, p2)

            IFormatReal_STR(get_p_geo(), &p1, cp2, &p3, &p4, &p5, &p6)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def format_time(cls, double p1, const char* p2, int32_t p4, int32_t p5, int32_t p6):
        cdef int32_t p3 = 4*128
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*128)

            strcpy(cp2, p2)

            IFormatTime_STR(get_p_geo(), &p1, cp2, &p3, &p4, &p5, &p6)
            return cp2
        finally:
            if cp2: free(cp2)



# General



    @classmethod
    def escape(cls, const char* p1, int32_t p3):
        cdef int32_t p2 = 4*16384
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*16384)

            strcpy(cp1, p1)

            _Escape_STR(get_p_geo(), cp1, &p2, &p3)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def char_(cls, const char* p1):

        try:


            _return_val = iChar_STR(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def char_n(cls, const char* p1, int32_t p2, int32_t p3):

        try:


            _return_val = IiCharN_STR(get_p_geo(), p1, &p2, &p3)
            return _return_val
        finally:
            pass

    @classmethod
    def justify(cls, const char* p1, const char* p2, int32_t p3, int32_t p4):
        cdef int32_t p5 = 4*16384
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*16384)

            strcpy(cp2, p2)

            IJustify_STR(get_p_geo(), p1, cp2, &p3, &p4, &p5)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def replacei_match_string(cls, const char* p1, const char* p2, const char* p3):
        cdef int32_t p4 = 4*16384
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*16384)

            strcpy(cp1, p1)

            IReplaceiMatchString_STR(get_p_geo(), cp1, p2, p3, &p4)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def replace_match_string(cls, const char* p1, const char* p2, const char* p3):
        cdef int32_t p4 = 4*16384
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*16384)

            strcpy(cp1, p1)

            IReplaceMatchString_STR(get_p_geo(), cp1, p2, p3, &p4)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def set_char_n(cls, const char* p1, int32_t p2, int32_t p4):
        cdef int32_t p3 = 4*16384
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*16384)

            strcpy(cp1, p1)

            ISetCharN_STR(get_p_geo(), cp1, &p2, &p3, &p4)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def split_string(cls, const char* p1, const char* p2, const char* p3):
        cdef int32_t p4 = 4*16384
        cdef char* cp1 = NULL
        cdef char* cp3 = NULL

        try:
            cp1 = <char*>malloc(len(p1)+1)
            cp3 = <char*>malloc(4*16384)

            strcpy(cp1, p1)
            strcpy(cp3, p3)

            ISplitString_STR(get_p_geo(), cp1, p2, cp3, &p4)
            return (cp1, cp3)
        finally:
            if cp1: free(cp1)
            if cp3: free(cp3)


    @classmethod
    def strcat(cls, const char* p1, const char* p2):
        cdef int32_t p3 = 4*16384
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*16384)

            strcpy(cp1, p1)

            IStrcat_STR(get_p_geo(), cp1, p2, &p3)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def strcmp(cls, const char* p1, const char* p2, int32_t p3):

        try:


            _return_val = iStrcmp_STR(get_p_geo(), p1, p2, &p3)
            return _return_val
        finally:
            pass

    @classmethod
    def strcpy(cls, const char* p1, const char* p2):
        cdef int32_t p3 = 4*16384
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*16384)

            strcpy(cp1, p1)

            IStrcpy_STR(get_p_geo(), cp1, p2, &p3)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def stri_mask(cls, const char* p1, const char* p2):

        try:


            _return_val = iStriMask_STR(get_p_geo(), p1, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def strins(cls, const char* p1, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*16384
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*16384)

            strcpy(cp1, p1)

            IStrins_STR(get_p_geo(), cp1, &p2, p3, &p4)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def strlen(cls, const char* p1):

        try:


            _return_val = iStrlen_STR(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def str_mask(cls, const char* p1, const char* p2):

        try:


            _return_val = iStrMask_STR(get_p_geo(), p1, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def str_min(cls, const char* p1):
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(len(p1)+1)

            strcpy(cp1, p1)

            _return_val = iStrMin_STR(get_p_geo(), cp1)
            return (_return_val, cp1)
        finally:
            if cp1: free(cp1)


    @classmethod
    def str_min2(cls, const char* p1):

        try:


            _return_val = iStrMin2_STR(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def strncmp(cls, const char* p1, const char* p2, int32_t p3, int32_t p4):

        try:


            _return_val = iStrncmp_STR(get_p_geo(), p1, p2, &p3, &p4)
            return _return_val
        finally:
            pass

    @classmethod
    def str_str(cls, const char* p1, const char* p2, int32_t p3):

        try:


            _return_val = iStrStr_STR(get_p_geo(), p1, p2, &p3)
            return _return_val
        finally:
            pass

    @classmethod
    def substr(cls, const char* p1, const char* p3, int32_t p4, int32_t p5):
        cdef int32_t p2 = 4*16384
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*16384)

            strcpy(cp1, p1)

            ISubstr_STR(get_p_geo(), cp1, &p2, p3, &p4, &p5)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def to_lower(cls, const char* p1):
        cdef int32_t p2 = 4*16384
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*16384)

            strcpy(cp1, p1)

            IToLower_STR(get_p_geo(), cp1, &p2)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def to_upper(cls, const char* p1):
        cdef int32_t p2 = 4*16384
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*16384)

            strcpy(cp1, p1)

            IToUpper_STR(get_p_geo(), cp1, &p2)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def xyz_line(cls, const char* p1, const char* p2):
        cdef int32_t p3 = 4*64
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*64)

            strcpy(cp2, p2)

            IXYZLine_STR(get_p_geo(), p1, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def make_alpha(cls, const char* p1):
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(len(p1)+1)

            strcpy(cp1, p1)

            MakeAlpha_STR(get_p_geo(), cp1)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def printf(cls, const char* p1, const char* p3):
        cdef int32_t p2 = 4*16384
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*16384)

            strcpy(cp1, p1)

            Printf_STR(get_p_geo(), cp1, &p2, p3)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def replace_char(cls, const char* p1, const char* p2, const char* p3):
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(len(p1)+1)

            strcpy(cp1, p1)

            ReplaceChar_STR(get_p_geo(), cp1, p2, p3)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def replace_char2(cls, const char* p1, const char* p2, const char* p3):
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(len(p1)+1)

            strcpy(cp1, p1)

            ReplaceChar2_STR(get_p_geo(), cp1, p2, p3)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def replace_multi_char(cls, const char* p1, const char* p2, const char* p3):
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(len(p1)+1)

            strcpy(cp1, p1)

            ReplaceMultiChar_STR(get_p_geo(), cp1, p2, p3)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def replace_non_ascii(cls, const char* p1, const char* p2):
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(len(p1)+1)

            strcpy(cp1, p1)

            ReplaceNonASCII_STR(get_p_geo(), cp1, p2)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def set_char(cls, const char* p1, int32_t p2):
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(len(p1)+1)

            strcpy(cp1, p1)

            SetChar_STR(get_p_geo(), cp1, &p2)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def trim_quotes(cls, const char* p1):
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(len(p1)+1)

            strcpy(cp1, p1)

            TrimQuotes_STR(get_p_geo(), cp1)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def trim_space(cls, const char* p1, int32_t p2):
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(len(p1)+1)

            strcpy(cp1, p1)

            TrimSpace_STR(get_p_geo(), cp1, &p2)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def un_quote(cls, const char* p1):
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(len(p1)+1)

            strcpy(cp1, p1)

            UnQuote_STR(get_p_geo(), cp1)
            return cp1
        finally:
            if cp1: free(cp1)



# Misc



    @classmethod
    def gen_group_name(cls, const char* p1, const char* p2, const char* p3, const char* p4):
        cdef int32_t p5 = 4*1040
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*1040)

            strcpy(cp4, p4)

            IGenGroupName_STR(get_p_geo(), p1, p2, p3, cp4, &p5)
            return cp4
        finally:
            if cp4: free(cp4)



# Tokenizing



    @classmethod
    def count_tokens(cls, const char* p1, const char* p2):

        try:


            _return_val = iCountTokens_STR(get_p_geo(), p1, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def get_token(cls, const char* p1, const char* p3, int32_t p4):
        cdef int32_t p2 = 4*16384
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*16384)

            strcpy(cp1, p1)

            IGetToken_STR(get_p_geo(), cp1, &p2, p3, &p4)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def tokenize(cls, const char* p1, const char* p2, const char* p3, const char* p4, const char* p5):
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(len(p1)+1)

            strcpy(cp1, p1)

            _return_val = iTokenize_STR(get_p_geo(), cp1, p2, p3, p4, p5)
            return (_return_val, cp1)
        finally:
            if cp1: free(cp1)


    @classmethod
    def tokens(cls, const char* p1, const char* p2):
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(len(p1)+1)

            strcpy(cp1, p1)

            _return_val = iTokens_STR(get_p_geo(), cp1, p2)
            return (_return_val, cp1)
        finally:
            if cp1: free(cp1)


    @classmethod
    def tokens2(cls, const char* p1, const char* p2, const char* p3, const char* p4, const char* p5):
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(len(p1)+1)

            strcpy(cp1, p1)

            _return_val = iTokens2_STR(get_p_geo(), cp1, p2, p3, p4, p5)
            return (_return_val, cp1)
        finally:
            if cp1: free(cp1)


    @classmethod
    def parse_list(cls, const char* p1, WrapVV p2):

        try:


            ParseList_STR(get_p_geo(), p1, &p2.handle)
            
        finally:
            pass


    pass



cdef class WrapSURFACE:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_SURFACE(get_p_geo(), &self.handle)




    @classmethod
    def create(cls, const char* p1, WrapIPJ p2):

        try:


            _return_val = WrapSURFACE(Create_SURFACE(get_p_geo(), p1, &p2.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def open(cls, const char* p1, int32_t p2):

        try:


            _return_val = WrapSURFACE(Open_SURFACE(get_p_geo(), p1, &p2))
            return _return_val
        finally:
            pass




    def get_ipj(self, WrapIPJ p2):

        try:


            GetIPJ_SURFACE(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_ipj(self, WrapIPJ p2):

        try:


            SetIPJ_SURFACE(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_surface_items(self, WrapLST p2):

        try:


            GetSurfaceItems_SURFACE(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_surface_item(self, const char* p2):

        try:


            _return_val = WrapSURFACEITEM(GetSurfaceItem_SURFACE(get_p_geo(), &self.handle, p2))
            return _return_val
        finally:
            pass


    def add_surface_item(self, WrapSURFACEITEM p2):

        try:


            AddSurfaceItem_SURFACE(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def get_surface_names(cls, const char* p1, WrapLST p2):

        try:


            GetSurfaceNames_SURFACE(get_p_geo(), p1, &p2.handle)
            
        finally:
            pass

    @classmethod
    def get_closed_surface_names(cls, const char* p1, WrapLST p2):

        try:


            GetClosedSurfaceNames_SURFACE(get_p_geo(), p1, &p2.handle)
            
        finally:
            pass


    def get_extents(self, double p2, double p3, double p4, double p5, double p6, double p7):

        try:


            GetExtents_SURFACE(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            return (p2, p3, p4, p5, p6, p7)
        finally:
            pass

    @classmethod
    def crc(cls, const char* p1, const char* p2, int32_t p3):

        try:


            _return_val = CRC_SURFACE(get_p_geo(), p1, p2, &p3)
            return (_return_val, p3)
        finally:
            pass

    @classmethod
    def sync(cls, const char* p1):

        try:


            Sync_SURFACE(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def create_from_dxf(cls, WrapIPJ p1, const char* p2, const char* p3):

        try:


            CreateFromDXF_SURFACE(get_p_geo(), &p1.handle, p2, p3)
            
        finally:
            pass

    @classmethod
    def create_from_vulcan_triangulation(cls, const char* p1, WrapIPJ p2, const char* p3):

        try:


            CreateFromVulcanTriangulation_SURFACE(get_p_geo(), p1, &p2.handle, p3)
            
        finally:
            pass

    @classmethod
    def append_vulcan_triangulation(cls, const char* p1, WrapIPJ p2, const char* p3):

        try:


            AppendVulcanTriangulation_SURFACE(get_p_geo(), p1, &p2.handle, p3)
            
        finally:
            pass

    pass



cdef class WrapSURFACEITEM:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_SURFACEITEM(get_p_geo(), &self.handle)




    @classmethod
    def create(cls, const char* p1, const char* p2):

        try:


            _return_val = WrapSURFACEITEM(Create_SURFACEITEM(get_p_geo(), p1, p2))
            return _return_val
        finally:
            pass




    def get_guid(self, const char* p2):
        cdef int32_t p3 = 4*64
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*64)

            strcpy(cp2, p2)

            GetGUID_SURFACEITEM(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def set_properties(self, const char* p2, const char* p3, const char* p4, const char* p5, double p6, const char* p7, const char* p8, double p9):

        try:


            SetProperties_SURFACEITEM(get_p_geo(), &self.handle, p2, p3, p4, p5, &p6, p7, p8, &p9)
            
        finally:
            pass


    def set_properties_ex(self, const char* p2, const char* p3, const char* p4, const char* p5, double p6, const char* p7, const char* p8, int32_t p9, double p10, double p11):

        try:


            SetPropertiesEx_SURFACEITEM(get_p_geo(), &self.handle, p2, p3, p4, p5, &p6, p7, p8, &p9, &p10, &p11)
            
        finally:
            pass


    def get_properties(self, const char* p2, const char* p4, const char* p6, const char* p8, double p10, const char* p11, const char* p13, double p15):
        cdef int32_t p3 = 4*64
        cdef int32_t p5 = 4*1040
        cdef int32_t p7 = 4*64
        cdef int32_t p9 = 4*1040
        cdef int32_t p12 = 4*64
        cdef int32_t p14 = 4*1040
        cdef char* cp2 = NULL
        cdef char* cp4 = NULL
        cdef char* cp6 = NULL
        cdef char* cp8 = NULL
        cdef char* cp11 = NULL
        cdef char* cp13 = NULL

        try:
            cp2 = <char*>malloc(4*64)
            cp4 = <char*>malloc(4*1040)
            cp6 = <char*>malloc(4*64)
            cp8 = <char*>malloc(4*1040)
            cp11 = <char*>malloc(4*64)
            cp13 = <char*>malloc(4*1040)

            strcpy(cp2, p2)
            strcpy(cp4, p4)
            strcpy(cp6, p6)
            strcpy(cp8, p8)
            strcpy(cp11, p11)
            strcpy(cp13, p13)

            GetProperties_SURFACEITEM(get_p_geo(), &self.handle, cp2, &p3, cp4, &p5, cp6, &p7, cp8, &p9, &p10, cp11, &p12, cp13, &p14, &p15)
            return (cp2, cp4, cp6, cp8, p10, cp11, cp13, p15)
        finally:
            if cp2: free(cp2)
            if cp4: free(cp4)
            if cp6: free(cp6)
            if cp8: free(cp8)
            if cp11: free(cp11)
            if cp13: free(cp13)



    def get_properties_ex(self, const char* p2, const char* p4, const char* p6, const char* p8, double p10, const char* p11, const char* p13, int32_t p15, double p16, double p17):
        cdef int32_t p3 = 4*64
        cdef int32_t p5 = 4*1040
        cdef int32_t p7 = 4*64
        cdef int32_t p9 = 4*1040
        cdef int32_t p12 = 4*64
        cdef int32_t p14 = 4*1040
        cdef char* cp2 = NULL
        cdef char* cp4 = NULL
        cdef char* cp6 = NULL
        cdef char* cp8 = NULL
        cdef char* cp11 = NULL
        cdef char* cp13 = NULL

        try:
            cp2 = <char*>malloc(4*64)
            cp4 = <char*>malloc(4*1040)
            cp6 = <char*>malloc(4*64)
            cp8 = <char*>malloc(4*1040)
            cp11 = <char*>malloc(4*64)
            cp13 = <char*>malloc(4*1040)

            strcpy(cp2, p2)
            strcpy(cp4, p4)
            strcpy(cp6, p6)
            strcpy(cp8, p8)
            strcpy(cp11, p11)
            strcpy(cp13, p13)

            GetPropertiesEx_SURFACEITEM(get_p_geo(), &self.handle, cp2, &p3, cp4, &p5, cp6, &p7, cp8, &p9, &p10, cp11, &p12, cp13, &p14, &p15, &p16, &p17)
            return (cp2, cp4, cp6, cp8, p10, cp11, cp13, p15, p16, p17)
        finally:
            if cp2: free(cp2)
            if cp4: free(cp4)
            if cp6: free(cp6)
            if cp8: free(cp8)
            if cp11: free(cp11)
            if cp13: free(cp13)



    def set_default_render_properties(self, int32_t p2, double p3, int32_t p4):

        try:


            SetDefaultRenderProperties_SURFACEITEM(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def get_default_render_properties(self, int32_t p2, double p3, int32_t p4):

        try:


            GetDefaultRenderProperties_SURFACEITEM(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return (p2, p3, p4)
        finally:
            pass


    def num_components(self):

        try:


            _return_val = iNumComponents_SURFACEITEM(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def add_mesh(self, WrapVV p2, WrapVV p3, WrapVV p4, WrapVV p5, WrapVV p6, WrapVV p7):

        try:


            _return_val = iAddMesh_SURFACEITEM(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle, &p5.handle, &p6.handle, &p7.handle)
            return _return_val
        finally:
            pass


    def get_mesh(self, int32_t p2, WrapVV p3, WrapVV p4, WrapVV p5, WrapVV p6, WrapVV p7, WrapVV p8):

        try:


            GetMesh_SURFACEITEM(get_p_geo(), &self.handle, &p2, &p3.handle, &p4.handle, &p5.handle, &p6.handle, &p7.handle, &p8.handle)
            
        finally:
            pass


    def get_extents(self, double p2, double p3, double p4, double p5, double p6, double p7):

        try:


            GetExtents_SURFACEITEM(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            return (p2, p3, p4, p5, p6, p7)
        finally:
            pass


    def get_mesh_info(self, int32_t p2, int32_t p3, int32_t p4, double p5, double p6, double p7):

        try:


            GetMeshInfo_SURFACEITEM(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            return (p3, p4, p5, p6, p7)
        finally:
            pass


    def get_info(self, int32_t p2, double p3, double p4, double p5):

        try:


            GetInfo_SURFACEITEM(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            return (p2, p3, p4, p5)
        finally:
            pass


    def get_geometry_info(self, int32_t p2, int32_t p3):

        try:


            GetGeometryInfo_SURFACEITEM(get_p_geo(), &self.handle, &p2, &p3)
            return (p2, p3)
        finally:
            pass


    def compute_extended_info(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8):

        try:


            ComputeExtendedInfo_SURFACEITEM(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8)
            return (p2, p3, p4, p5, p6, p7, p8)
        finally:
            pass

    pass



cdef class WrapSYS:
    




# Date/Time



    @classmethod
    def break_date(cls, double p1, int32_t p2, int32_t p3, int32_t p4):

        try:


            BreakDate_SYS(get_p_geo(), &p1, &p2, &p3, &p4)
            return (p2, p3, p4)
        finally:
            pass

    @classmethod
    def dateto_long(cls, double p1):

        try:


            _return_val = iDatetoLong_SYS(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def timeto_long(cls, double p1):

        try:


            _return_val = iTimetoLong_SYS(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def date(cls):

        try:


            _return_val = rDate_SYS(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def longto_date(cls, int32_t p1):

        try:


            _return_val = rLongtoDate_SYS(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def longto_time(cls, int32_t p1):

        try:


            _return_val = rLongtoTime_SYS(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def make_date(cls, int32_t p1, int32_t p2, int32_t p3):

        try:


            _return_val = rMakeDate_SYS(get_p_geo(), &p1, &p2, &p3)
            return _return_val
        finally:
            pass

    @classmethod
    def secondsto_time(cls, double p1):

        try:


            _return_val = rSecondstoTime_SYS(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def time(cls):

        try:


            _return_val = rTime_SYS(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def timeto_seconds(cls, double p1):

        try:


            _return_val = rTimetoSeconds_SYS(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def utc_date(cls):

        try:


            _return_val = rUTCDate_SYS(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def utc_time(cls):

        try:


            _return_val = rUTCTime_SYS(get_p_geo())
            return _return_val
        finally:
            pass


# Environment



    @classmethod
    def exist_env(cls, const char* p1):

        try:


            _return_val = iExistEnv_SYS(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def get_env(cls, const char* p1, const char* p2):
        cdef int32_t p3 = 4*16384
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*16384)

            strcpy(cp2, p2)

            IGetEnv_SYS(get_p_geo(), p1, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def set_env(cls, const char* p1, const char* p2):

        try:


            SetEnv_SYS(get_p_geo(), p1, p2)
            
        finally:
            pass


# Error Handling



    @classmethod
    def clear_err_ap(cls):

        try:


            _return_val = iClearErrAP_SYS(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def get_top_error_ap(cls):

        try:


            _return_val = iGetTopErrorAP_SYS(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def get_error_message_ap(cls, int32_t p1, const char* p2):
        cdef int32_t p3 = 4*16384
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*16384)

            strcpy(cp2, p2)

            IGetErrorMessageAP_SYS(get_p_geo(), &p1, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def num_errors_ap(cls):

        try:


            _return_val = iNumErrorsAP_SYS(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def set_server_messages_ap(cls, int32_t p1):

        try:


            SetServerMessagesAP_SYS(get_p_geo(), &p1)
            
        finally:
            pass


# Execution



    @classmethod
    def run(cls, const char* p1, const char* p2, int32_t p3):

        try:


            _return_val = iRun_SYS(get_p_geo(), p1, p2, &p3)
            return _return_val
        finally:
            pass

    @classmethod
    def run_gs(cls, const char* p1):

        try:


            _return_val = iRunGS_SYS(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def run_gx(cls, const char* p1):

        try:


            _return_val = iRunGX_SYS(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def run_gx_ex(cls, const char* p1, int32_t p2):

        try:


            _return_val = iRunGXEx_SYS(get_p_geo(), p1, &p2)
            return (_return_val, p2)
        finally:
            pass

    @classmethod
    def run_pdf(cls, const char* p1, const char* p2):

        try:


            _return_val = App_iRunPDF_SYS(get_p_geo(), p1, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def shell_execute(cls, const char* p1, const char* p2, const char* p3, const char* p4, int32_t p5):

        try:


            _return_val = iShellExecute_SYS(get_p_geo(), p1, p2, p3, p4, &p5)
            return _return_val
        finally:
            pass

    @classmethod
    def set_return(cls, int32_t p1):

        try:


            SetReturn_SYS(get_p_geo(), &p1)
            
        finally:
            pass


# External DLL



    @classmethod
    def do_command(cls, const char* p1):

        try:


            App_DoCommand_SYS(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def error(cls, const char* p1, const char* p2, int32_t p3):

        try:


            Error_SYS(get_p_geo(), p1, p2, &p3)
            
        finally:
            pass

    @classmethod
    def error_tag(cls, const char* p1, const char* p2):

        try:


            ErrorTag_SYS(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def assert_gx(cls, int32_t p1, const char* p2, const char* p3):

        try:


            _return_val = iAssertGX_SYS(get_p_geo(), &p1, p2, p3)
            return _return_val
        finally:
            pass

    @classmethod
    def ole_automation(cls, const char* p1, const char* p2, int32_t p3):

        try:


            _return_val = App_iOLEAutomation_SYS(get_p_geo(), p1, p2, &p3)
            return _return_val
        finally:
            pass

    @classmethod
    def save_log(cls, const char* p1):

        try:


            App_SaveLog_SYS(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def show_error(cls):

        try:


            App_ShowError_SYS(get_p_geo())
            
        finally:
            pass

    @classmethod
    def terminate(cls, const char* p1):

        try:


            Terminate_SYS(get_p_geo(), p1)
            
        finally:
            pass


# File System



    @classmethod
    def crc_file(cls, const char* p1):

        try:


            _return_val = CRCFile_SYS(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def crc_file_offset(cls, const char* p1, int32_t p2):

        try:


            _return_val = CRCFileOffset_SYS(get_p_geo(), p1, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def file_ren(cls, const char* p1, const char* p2):

        try:


            FileRen_SYS(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def find_files_vv(cls, WrapVV p1, const char* p2):

        try:


            FindFilesVV_SYS(get_p_geo(), &p1.handle, p2)
            
        finally:
            pass

    @classmethod
    def absolute_file_name(cls, const char* p1, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            IAbsoluteFileName_SYS(get_p_geo(), p1, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def copy_file(cls, const char* p1, const char* p2):

        try:


            _return_val = iCopyFile_SYS(get_p_geo(), p1, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def delete_file(cls, const char* p1):

        try:


            _return_val = iDeleteFile_SYS(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def delete_gi_file(cls, const char* p1):

        try:


            _return_val = iDeleteGIFile_SYS(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def delete_grid_file(cls, const char* p1):

        try:


            _return_val = iDeleteGridFile_SYS(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def dir_exist(cls, const char* p1):

        try:


            _return_val = iDirExist_SYS(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def file_exist(cls, const char* p1):

        try:


            _return_val = iFileExist_SYS(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def file_size(cls, const char* p1):

        try:


            _return_val = iFileSize_SYS(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def file_writable(cls, const char* p1):

        try:


            _return_val = iFileWritable_SYS(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def find_path(cls, const char* p1, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*1040
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*1040)

            strcpy(cp3, p3)

            _return_val = iFindPath_SYS(get_p_geo(), p1, &p2, cp3, &p4)
            return (_return_val, cp3)
        finally:
            if cp3: free(cp3)


    @classmethod
    def find_path_ex(cls, const char* p1, int32_t p2, int32_t p3, const char* p4):
        cdef int32_t p5 = 4*1040
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*1040)

            strcpy(cp4, p4)

            _return_val = iFindPathEx_SYS(get_p_geo(), p1, &p2, &p3, cp4, &p5)
            return (_return_val, cp4)
        finally:
            if cp4: free(cp4)


    @classmethod
    def get_directory(cls, int32_t p1, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            IGetDirectory_SYS(get_p_geo(), &p1, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def get_path(cls, int32_t p1, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            IGetPath_SYS(get_p_geo(), &p1, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def get_windows_dir(cls, const char* p1):
        cdef int32_t p2 = 4*1040
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*1040)

            strcpy(cp1, p1)

            IGetWindowsDir_SYS(get_p_geo(), cp1, &p2)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def make_dir(cls, const char* p1):

        try:


            _return_val = iMakeDir_SYS(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def make_file_readonly(cls, const char* p1):

        try:


            _return_val = iMakeFileReadonly_SYS(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def make_file_writable(cls, const char* p1):

        try:


            _return_val = iMakeFileWritable_SYS(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def relative_file_name(cls, const char* p1, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            IRelativeFileName_SYS(get_p_geo(), p1, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def short_path_file_name(cls, const char* p1, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            IShortPathFileName_SYS(get_p_geo(), p1, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def temp_file_ext(cls, const char* p1, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            ITempFileExt_SYS(get_p_geo(), p1, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def temp_file_name(cls, const char* p1, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            ITempFileName_SYS(get_p_geo(), p1, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def transfer_path(cls, const char* p1, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            ITransferPath_SYS(get_p_geo(), p1, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def valid_file_name(cls, const char* p1):

        try:


            _return_val = iValidFileName_SYS(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def write_in_dir(cls, const char* p1):

        try:


            _return_val = iWriteInDir_SYS(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def file_date(cls, const char* p1):

        try:


            _return_val = rFileDate_SYS(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def file_time(cls, const char* p1):

        try:


            _return_val = rFileTime_SYS(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def utc_file_date(cls, const char* p1):

        try:


            _return_val = rUTCFileDate_SYS(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def utc_file_time(cls, const char* p1):

        try:


            _return_val = rUTCFileTime_SYS(get_p_geo(), p1)
            return _return_val
        finally:
            pass


# Global Parameter



    @classmethod
    def get_settings_meta(cls, WrapMETA p1):

        try:


            GetSettingsMETA_SYS(get_p_geo(), &p1.handle)
            
        finally:
            pass

    @classmethod
    def global_reset(cls, const char* p1):

        try:


            GlobalReset_SYS(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def global_set(cls, const char* p1, const char* p2):

        try:


            GlobalSet_SYS(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def global_write(cls, const char* p1):

        try:


            GlobalWrite_SYS(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def global_(cls, const char* p1, const char* p2):
        cdef int32_t p3 = 4*16384
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*16384)

            strcpy(cp2, p2)

            _return_val = IiGlobal_SYS(get_p_geo(), p1, cp2, &p3)
            return (_return_val, cp2)
        finally:
            if cp2: free(cp2)


    @classmethod
    def reset_settings(cls):

        try:


            App_ResetSettings_SYS(get_p_geo())
            
        finally:
            pass

    @classmethod
    def set_settings_meta(cls, WrapMETA p1):

        try:


            SetSettingsMETA_SYS(get_p_geo(), &p1.handle)
            
        finally:
            pass


# Licensing



    @classmethod
    def check_arc_license(cls):

        try:


            _return_val = iCheckArcLicense_SYS(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def check_arc_license_ex(cls, const char* p1):
        cdef int32_t p2 = 4*64
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*64)

            strcpy(cp1, p1)

            _return_val = iCheckArcLicenseEx_SYS(get_p_geo(), cp1, &p2)
            return (_return_val, cp1)
        finally:
            if cp1: free(cp1)


    @classmethod
    def check_intrinsic(cls, int32_t p1, const char* p2):

        try:


            _return_val = iCheckIntrinsic_SYS(get_p_geo(), &p1, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def get_geodist(cls):

        try:


            _return_val = iGetGeodist_SYS(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def get_license_class(cls, const char* p1):
        cdef int32_t p2 = 4*128
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*128)

            strcpy(cp1, p1)

            IGetLicenseClass_SYS(get_p_geo(), cp1, &p2)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def get_licensed_user(cls, const char* p1, const char* p3):
        cdef int32_t p2 = 4*1024
        cdef int32_t p4 = 4*1024
        cdef char* cp1 = NULL
        cdef char* cp3 = NULL

        try:
            cp1 = <char*>malloc(4*1024)
            cp3 = <char*>malloc(4*1024)

            strcpy(cp1, p1)
            strcpy(cp3, p3)

            IGetLicensedUser_SYS(get_p_geo(), cp1, &p2, cp3, &p4)
            return (cp1, cp3)
        finally:
            if cp1: free(cp1)
            if cp3: free(cp3)



# Lineage



    @classmethod
    def add_lineage_parameter(cls, const char* p1, const char* p2):

        try:


            AddLineageParameter_SYS(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def add_lineage_source(cls, int32_t p1, const char* p2):

        try:


            AddLineageSource_SYS(get_p_geo(), &p1, p2)
            
        finally:
            pass

    @classmethod
    def clear_lineage_parameters(cls):

        try:


            ClearLineageParameters_SYS(get_p_geo())
            
        finally:
            pass

    @classmethod
    def clear_lineage_sources(cls):

        try:


            ClearLineageSources_SYS(get_p_geo())
            
        finally:
            pass

    @classmethod
    def copy_geo_file(cls, const char* p1, const char* p2):

        try:


            CopyGeoFile_SYS(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def backup_geo_file(cls, const char* p1, const char* p2):
        cdef int32_t p3 = 4*16384
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*16384)

            strcpy(cp2, p2)

            IBackupGeoFile_SYS(get_p_geo(), p1, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def remove_lineage_output(cls, const char* p1):

        try:


            RemoveLineageOutput_SYS(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def remove_lineage_parameter(cls, const char* p1):

        try:


            RemoveLineageParameter_SYS(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def remove_lineage_source(cls, const char* p1):

        try:


            RemoveLineageSource_SYS(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def restore_geo_file(cls, const char* p1, const char* p2):

        try:


            RestoreGeoFile_SYS(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def set_lineage_description(cls, const char* p1):

        try:


            SetLineageDescription_SYS(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def set_lineage_display_name(cls, const char* p1):

        try:


            SetLineageDisplayName_SYS(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def set_lineage_name(cls, const char* p1):

        try:


            SetLineageName_SYS(get_p_geo(), p1)
            
        finally:
            pass


# Menus and Toolbar



    @classmethod
    def clear_menus(cls, int32_t p1):

        try:


            App_ClearMenus_SYS(get_p_geo(), &p1)
            
        finally:
            pass

    @classmethod
    def get_loaded_menus(cls, WrapLST p1, WrapLST p2, WrapLST p3):

        try:


            App_GetLoadedMenus_SYS(get_p_geo(), &p1.handle, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def set_loaded_menus(cls, WrapLST p1, WrapLST p2, WrapLST p3):

        try:


            App_SetLoadedMenus_SYS(get_p_geo(), &p1.handle, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def get_entitlement_rights(cls, WrapLST p1):

        try:


            GetEntitlementRights_SYS(get_p_geo(), &p1.handle)
            
        finally:
            pass


# Misc



    @classmethod
    def generate_guid(cls, const char* p1):
        cdef int32_t p2 = 4*64
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*64)

            strcpy(cp1, p1)

            GenerateGUID_SYS(get_p_geo(), cp1, &p2)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def clipboard_to_file(cls, const char* p1):

        try:


            ClipboardToFile_SYS(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def create_clipboard_ra(cls):

        try:


            _return_val = WrapRA(CreateClipboardRA_SYS(get_p_geo()))
            return _return_val
        finally:
            pass

    @classmethod
    def create_clipboard_wa(cls):

        try:


            _return_val = WrapWA(CreateClipboardWA_SYS(get_p_geo()))
            return _return_val
        finally:
            pass

    @classmethod
    def emf_object_size(cls, const char* p1, double p2, double p3):

        try:


            EMFObjectSize_SYS(get_p_geo(), p1, &p2, &p3)
            return (p2, p3)
        finally:
            pass

    @classmethod
    def file_to_clipboard(cls, const char* p1):

        try:


            FileToClipboard_SYS(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def font_lst(cls, WrapLST p1, int32_t p2):

        try:


            FontLST_SYS(get_p_geo(), &p1.handle, &p2)
            
        finally:
            pass

    @classmethod
    def get_dot_net_gx_entries(cls, const char* p1, const char* p2):
        cdef int32_t p3 = 4*16384
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*16384)

            strcpy(cp2, p2)

            _return_val = IiGetDotNetGXEntries_SYS(get_p_geo(), p1, cp2, &p3)
            return (_return_val, cp2)
        finally:
            if cp2: free(cp2)


    @classmethod
    def send_general_message(cls, const char* p1, const char* p2):

        try:


            SendGeneralMessage_SYS(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def write_debug_log(cls, const char* p1):

        try:


            WriteDebugLog_SYS(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def log_script_run(cls, const char* p1):

        try:


            LogScriptRun_SYS(get_p_geo(), p1)
            
        finally:
            pass


# Multithreading



    @classmethod
    def get_thread_id(cls):

        try:


            _return_val = iGetThreadID_SYS(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def run_multi_user_script(cls, const char* p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6):

        try:


            RunMultiUserScript_SYS(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass


# Parameter



    @classmethod
    def clear_group(cls, const char* p1):

        try:


            ClearGroup_SYS(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def clear_group_parm(cls, const char* p1):

        try:


            ClearGroupParm_SYS(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def clear_parm(cls):

        try:


            ClearParm_SYS(get_p_geo())
            
        finally:
            pass

    @classmethod
    def default_int(cls, const char* p1, const char* p2, int32_t p3):

        try:


            DefaultInt_SYS(get_p_geo(), p1, p2, &p3)
            
        finally:
            pass

    @classmethod
    def default_double(cls, const char* p1, const char* p2, double p3):

        try:


            DefaultReal_SYS(get_p_geo(), p1, p2, &p3)
            
        finally:
            pass

    @classmethod
    def default_string(cls, const char* p1, const char* p2, const char* p3):

        try:


            DefaultString_SYS(get_p_geo(), p1, p2, p3)
            
        finally:
            pass

    @classmethod
    def get_pattern(cls, const char* p1, int32_t p2, double p3, int32_t p4, double p5, int32_t p6, int32_t p7):

        try:


            GetPattern_SYS(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6, &p7)
            return (p2, p3, p4, p5, p6, p7)
        finally:
            pass

    @classmethod
    def get_reg(cls, WrapREG p1, const char* p2):

        try:


            GetREG_SYS(get_p_geo(), &p1.handle, p2)
            
        finally:
            pass

    @classmethod
    def gt_string(cls, const char* p1, const char* p2, const char* p3):
        cdef int32_t p4 = 4*16384
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*16384)

            strcpy(cp3, p3)

            GtString_SYS(get_p_geo(), p1, p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)


    @classmethod
    def exist_int(cls, const char* p1, const char* p2):

        try:


            _return_val = iExistInt_SYS(get_p_geo(), p1, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def exist_double(cls, const char* p1, const char* p2):

        try:


            _return_val = iExistReal_SYS(get_p_geo(), p1, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def exist_string(cls, const char* p1, const char* p2):

        try:


            _return_val = iExistString_SYS(get_p_geo(), p1, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def get_int(cls, const char* p1, const char* p2):

        try:


            _return_val = iGetInt_SYS(get_p_geo(), p1, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def get_yes_no(cls, const char* p1, const char* p2):

        try:


            _return_val = iGetYesNo_SYS(get_p_geo(), p1, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def replace_string(cls, const char* p1, const char* p2, const char* p4):
        cdef int32_t p3 = 4*16384
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*16384)

            strcpy(cp2, p2)

            IReplaceString_SYS(get_p_geo(), p1, cp2, &p3, p4)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def load_parm(cls, const char* p1, const char* p2):

        try:


            LoadParm_SYS(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def get_double(cls, const char* p1, const char* p2):

        try:


            _return_val = rGetReal_SYS(get_p_geo(), p1, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def save_parm(cls, const char* p1, int32_t p2, const char* p3):

        try:


            SaveParm_SYS(get_p_geo(), p1, &p2, p3)
            
        finally:
            pass

    @classmethod
    def filter_parm_group(cls, const char* p1, int32_t p2):

        try:


            FilterParmGroup_SYS(get_p_geo(), p1, &p2)
            
        finally:
            pass

    @classmethod
    def set_int(cls, const char* p1, const char* p2, int32_t p3):

        try:


            SetInt_SYS(get_p_geo(), p1, p2, &p3)
            
        finally:
            pass

    @classmethod
    def set_pattern(cls, const char* p1, int32_t p2, double p3, int32_t p4, double p5, int32_t p6, int32_t p7):

        try:


            SetPattern_SYS(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass

    @classmethod
    def set_double(cls, const char* p1, const char* p2, double p3):

        try:


            SetReal_SYS(get_p_geo(), p1, p2, &p3)
            
        finally:
            pass

    @classmethod
    def set_reg(cls, WrapREG p1):

        try:


            SetREG_SYS(get_p_geo(), &p1.handle)
            
        finally:
            pass

    @classmethod
    def set_string(cls, const char* p1, const char* p2, const char* p3):

        try:


            SetString_SYS(get_p_geo(), p1, p2, p3)
            
        finally:
            pass


# Progress Control



    @classmethod
    def check_stop(cls):

        try:


            _return_val = iCheckStop_SYS(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def prog_state(cls):

        try:


            _return_val = iProgState_SYS(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def prog_name(cls, const char* p1, int32_t p2):

        try:


            ProgName_SYS(get_p_geo(), p1, &p2)
            
        finally:
            pass

    @classmethod
    def progress(cls, int32_t p1):

        try:


            Progress_SYS(get_p_geo(), &p1)
            
        finally:
            pass

    @classmethod
    def prog_update(cls, int32_t p1):

        try:


            ProgUpdate_SYS(get_p_geo(), &p1)
            
        finally:
            pass

    @classmethod
    def prog_update_l(cls, int32_t p1, int32_t p2):

        try:


            ProgUpdateL_SYS(get_p_geo(), &p1, &p2)
            
        finally:
            pass


# Registry



    @classmethod
    def get_sys_info(cls, int32_t p1, const char* p2):
        cdef int32_t p3 = 4*1024
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1024)

            strcpy(cp2, p2)

            IGetSysInfo_SYS(get_p_geo(), &p1, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def registry_get_val(cls, int32_t p1, const char* p2, const char* p3, const char* p4):
        cdef int32_t p5 = 4*16384
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*16384)

            strcpy(cp4, p4)

            _return_val = IiRegistryGetVal_SYS(get_p_geo(), &p1, p2, p3, cp4, &p5)
            return (_return_val, cp4)
        finally:
            if cp4: free(cp4)


    @classmethod
    def registry_delete_key(cls, int32_t p1, const char* p2):

        try:


            _return_val = iRegistryDeleteKey_SYS(get_p_geo(), &p1, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def registry_delete_val(cls, int32_t p1, const char* p2, const char* p3):

        try:


            _return_val = iRegistryDeleteVal_SYS(get_p_geo(), &p1, p2, p3)
            return _return_val
        finally:
            pass

    @classmethod
    def registry_set_val(cls, int32_t p1, const char* p2, const char* p3, const char* p4):

        try:


            RegistrySetVal_SYS(get_p_geo(), &p1, p2, p3, p4)
            
        finally:
            pass


# Temporary File



    @classmethod
    def destroy_ptmp(cls, int32_t p1):

        try:


            DestroyPTMP_SYS(get_p_geo(), &p1)
            
        finally:
            pass

    @classmethod
    def get_ptmp(cls, int32_t p1):

        try:


            GetPTMP_SYS(get_p_geo(), &p1)
            
        finally:
            pass

    @classmethod
    def save_ptmp(cls, const char* p1):

        try:


            _return_val = SavePTMP_SYS(get_p_geo(), p1)
            return _return_val
        finally:
            pass


# Termination



    @classmethod
    def abort(cls, const char* p1):

        try:


            _Abort_SYS(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def assert_(cls, int32_t p1):

        try:


            _Assert_SYS(get_p_geo(), &p1)
            
        finally:
            pass

    @classmethod
    def exit_(cls):

        try:


            _Exit_SYS(get_p_geo())
            
        finally:
            pass

    @classmethod
    def cancel_(cls):

        try:


            Cancel_SYS(get_p_geo())
            
        finally:
            pass


# Timing



    @classmethod
    def delay(cls, double p1):

        try:


            _return_val = iDelay_SYS(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def get_timer(cls, int32_t p1, double p2, double p3):

        try:


            _return_val = iGetTimer_SYS(get_p_geo(), &p1, &p2, &p3)
            return (_return_val, p2, p3)
        finally:
            pass


# User Interaction



    @classmethod
    def display_help(cls, const char* p1, const char* p2):

        try:


            App_DisplayHelp_SYS(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def display_help_topic(cls, const char* p1, const char* p2):

        try:


            App_DisplayHelpTopic_SYS(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def display_int(cls, const char* p1, int32_t p2):

        try:


            App_DisplayInt_SYS(get_p_geo(), p1, &p2)
            
        finally:
            pass

    @classmethod
    def display_message(cls, const char* p1, const char* p2):

        try:


            App_DisplayMessage_SYS(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def display_double(cls, const char* p1, double p2):

        try:


            App_DisplayReal_SYS(get_p_geo(), p1, &p2)
            
        finally:
            pass

    @classmethod
    def display_question(cls, const char* p1, const char* p2):

        try:


            _return_val = App_iDisplayQuestion_SYS(get_p_geo(), p1, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def display_question_with_cancel(cls, const char* p1, const char* p2):

        try:


            _return_val = App_iDisplayQuestionWithCancel_SYS(get_p_geo(), p1, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def display_task_dialog_ui(cls, const char* p1, const char* p2, const char* p3, int32_t p4, WrapLST p5, int32_t p6, const char* p7, int32_t p8, const char* p9, int32_t p10, const char* p11, const char* p12, const char* p13):

        try:


            _return_val = iDisplayTaskDialogUI_SYS(get_p_geo(), p1, p2, p3, &p4, &p5.handle, &p6, p7, &p8, p9, &p10, p11, p12, p13)
            return (_return_val, p10)
        finally:
            pass

    @classmethod
    def interactive(cls):

        try:


            _return_val = iInteractive_SYS(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def prompt(cls, const char* p1, const char* p2):
        cdef int32_t p3 = 4*16384
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*16384)

            strcpy(cp2, p2)

            _return_val = App_IiPrompt_SYS(get_p_geo(), p1, cp2, &p3)
            return (_return_val, cp2)
        finally:
            if cp2: free(cp2)


    @classmethod
    def script(cls):

        try:


            _return_val = iScript_SYS(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def script_record(cls):

        try:


            _return_val = iScriptRecord_SYS(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def set_cursor(cls, const char* p1):

        try:


            App_SetCursor_SYS(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def set_info_line(cls, const char* p1):

        try:


            App_SetInfoLine_SYS(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def set_interactive(cls, int32_t p1):

        try:


            SetInteractive_SYS(get_p_geo(), &p1)
            
        finally:
            pass


# Workspace



    @classmethod
    def get_workspace_reg(cls, WrapREG p1):

        try:


            GetWorkspaceREG_SYS(get_p_geo(), &p1.handle)
            
        finally:
            pass

    @classmethod
    def set_workspace_reg(cls, WrapREG p1):

        try:


            SetWorkspaceREG_SYS(get_p_geo(), &p1.handle)
            
        finally:
            pass


# String Encryption



    @classmethod
    def encrypt_string(cls, const char* p1, const char* p2, int32_t p4):
        cdef int32_t p3 = 4*16384
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*16384)

            strcpy(cp2, p2)

            EncryptString_SYS(get_p_geo(), p1, cp2, &p3, &p4)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def decrypt_string(cls, const char* p1, const char* p2, int32_t p4):
        cdef int32_t p3 = 4*16384
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*16384)

            strcpy(cp2, p2)

            DecryptString_SYS(get_p_geo(), p1, cp2, &p3, &p4)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def is_encrypted_string(cls, const char* p1):

        try:


            _return_val = IsEncryptedString_SYS(get_p_geo(), p1)
            return _return_val
        finally:
            pass


# GX Debugger



    @classmethod
    def disable_gx_debugger(cls):

        try:


            DisableGXDebugger_SYS(get_p_geo())
            
        finally:
            pass

    @classmethod
    def enable_gx_debugger(cls, const char* p1, const char* p2):

        try:


            EnableGXDebugger_SYS(get_p_geo(), p1, p2)
            
        finally:
            pass


    pass



cdef class WrapTB:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_TB(get_p_geo(), &self.handle)





    def set_search_mode(self, int32_t p2):

        try:


            _SetSearchMode_TB(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass

    @classmethod
    def create(cls, const char* p1):

        try:


            _return_val = WrapTB(Create_TB(get_p_geo(), p1))
            return _return_val
        finally:
            pass

    @classmethod
    def create_db(cls, WrapDB p1):

        try:


            _return_val = WrapTB(CreateDB_TB(get_p_geo(), &p1.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def create_ltb(cls, WrapLTB p1):

        try:


            _return_val = WrapTB(CreateLTB_TB(get_p_geo(), &p1.handle))
            return _return_val
        finally:
            pass




    def field(self, const char* p2):

        try:


            _return_val = Field_TB(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def get_string(self, int32_t p2, int32_t p3, const char* p4):
        cdef int32_t p5 = 4*16384
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*16384)

            strcpy(cp4, p4)

            GetString_TB(get_p_geo(), &self.handle, &p2, &p3, cp4, &p5)
            return cp4
        finally:
            if cp4: free(cp4)



    def data_type(self, int32_t p2):

        try:


            _return_val = iDataType_TB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def find_col_by_index(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*1024
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*1024)

            strcpy(cp3, p3)

            IFindColByIndex_TB(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def find_col_by_name(self, const char* p2):

        try:


            _return_val = iFindColByName_TB(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def format(self, int32_t p2):

        try:


            _return_val = iFormat_TB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def get_int(self, int32_t p2, int32_t p3):

        try:


            _return_val = iGetInt_TB(get_p_geo(), &self.handle, &p2, &p3)
            return _return_val
        finally:
            pass


    def num_columns(self):

        try:


            _return_val = iNumColumns_TB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def num_rows(self):

        try:


            _return_val = iNumRows_TB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def load_db(self, WrapDB p2, int32_t p3):

        try:


            LoadDB_TB(get_p_geo(), &self.handle, &p2.handle, &p3)
            
        finally:
            pass


    def get_double(self, int32_t p2, int32_t p3):

        try:


            _return_val = rGetReal_TB(get_p_geo(), &self.handle, &p2, &p3)
            return _return_val
        finally:
            pass


    def save(self, const char* p2):

        try:


            Save_TB(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def save_db(self, WrapDB p2, int32_t p3):

        try:


            SaveDB_TB(get_p_geo(), &self.handle, &p2.handle, &p3)
            
        finally:
            pass


    def save_to_ascii(self, const char* p2):

        try:


            SaveToAscii_TB(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def set_int(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            SetInt_TB(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def set_double(self, int32_t p2, int32_t p3, double p4):

        try:


            SetReal_TB(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def set_string(self, int32_t p2, int32_t p3, const char* p4):

        try:


            SetString_TB(get_p_geo(), &self.handle, &p2, &p3, p4)
            
        finally:
            pass


    def sort(self, int32_t p2):

        try:


            Sort_TB(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass

    pass



cdef class WrapTPAT:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_TPAT(get_p_geo(), &self.handle)





    def add_color(self, const char* p2, const char* p3, const char* p4, int32_t p5):

        try:


            AddColor_TPAT(get_p_geo(), &self.handle, p2, p3, p4, &p5)
            
        finally:
            pass

    @classmethod
    def create(cls):

        try:


            _return_val = WrapTPAT(Create_TPAT(get_p_geo()))
            return _return_val
        finally:
            pass




    def code(self, const char* p2):

        try:


            _return_val = iCode_TPAT(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def get_solid_pattern(self, int32_t p2, const char* p3, const char* p5, const char* p7, int32_t p9):
        cdef int32_t p4 = 4*21
        cdef int32_t p6 = 4*32
        cdef int32_t p8 = 4*128
        cdef char* cp3 = NULL
        cdef char* cp5 = NULL
        cdef char* cp7 = NULL

        try:
            cp3 = <char*>malloc(4*21)
            cp5 = <char*>malloc(4*32)
            cp7 = <char*>malloc(4*128)

            strcpy(cp3, p3)
            strcpy(cp5, p5)
            strcpy(cp7, p7)

            IGetSolidPattern_TPAT(get_p_geo(), &self.handle, &p2, cp3, &p4, cp5, &p6, cp7, &p8, &p9)
            return (cp3, cp5, cp7, p9)
        finally:
            if cp3: free(cp3)
            if cp5: free(cp5)
            if cp7: free(cp7)



    def size(self):

        try:


            _return_val = iSize_TPAT(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def load_csv(self, const char* p2):

        try:


            LoadCSV_TPAT(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def setup_translation_vv(self, WrapLTB p2, int32_t p3, WrapVV p4):

        try:


            SetupTranslationVV_TPAT(get_p_geo(), &self.handle, &p2.handle, &p3, &p4.handle)
            
        finally:
            pass

    pass



cdef class WrapTR:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_TR(get_p_geo(), &self.handle)




    @classmethod
    def create(cls, int32_t p1):

        try:


            _return_val = WrapTR(Create_TR(get_p_geo(), &p1))
            return _return_val
        finally:
            pass




    def copy(self, WrapTR p2):

        try:


            Copy_TR(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    pass



cdef class WrapUSERMETA:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_USERMETA(get_p_geo(), &self.handle)




    @classmethod
    def create(cls, int32_t p1):

        try:


            _return_val = WrapUSERMETA(Create_USERMETA(get_p_geo(), &p1))
            return _return_val
        finally:
            pass

    @classmethod
    def create_s(cls, const char* p1):

        try:


            _return_val = WrapUSERMETA(CreateS_USERMETA(get_p_geo(), p1))
            return _return_val
        finally:
            pass




    def get_data_creation_date(self, double p2):

        try:


            GetDataCreationDate_USERMETA(get_p_geo(), &self.handle, &p2)
            return p2
        finally:
            pass


    def get_extents2d(self, double p2, double p3, double p4, double p5):

        try:


            GetExtents2d_USERMETA(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            return (p2, p3, p4, p5)
        finally:
            pass


    def get_extents3d(self, double p2, double p3, double p4, double p5, double p6, double p7):

        try:


            GetExtents3d_USERMETA(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            return (p2, p3, p4, p5, p6, p7)
        finally:
            pass


    def get_ipj(self, WrapIPJ p2):

        try:


            GetIPJ_USERMETA(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_meta_creation_date(self, double p2):

        try:


            GetMetaCreationDate_USERMETA(get_p_geo(), &self.handle, &p2)
            return p2
        finally:
            pass


    def get_xml_format(self, int32_t p2):

        try:


            GetXMLFormat_USERMETA(get_p_geo(), &self.handle, &p2)
            return p2
        finally:
            pass


    def compare(self, WrapUSERMETA p2):

        try:


            _return_val = iCompare_USERMETA(get_p_geo(), &self.handle, &p2.handle)
            return _return_val
        finally:
            pass


    def get_data_creator(self, const char* p2):
        cdef int32_t p3 = 4*1024
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1024)

            strcpy(cp2, p2)

            IGetDataCreator_USERMETA(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def get_format(self, const char* p2):
        cdef int32_t p3 = 4*1024
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1024)

            strcpy(cp2, p2)

            IGetFormat_USERMETA(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def get_meta_creator(self, const char* p2):
        cdef int32_t p3 = 4*1024
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1024)

            strcpy(cp2, p2)

            IGetMetaCreator_USERMETA(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def get_project(self, const char* p2):
        cdef int32_t p3 = 4*1024
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1024)

            strcpy(cp2, p2)

            IGetProject_USERMETA(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def get_title(self, const char* p2):
        cdef int32_t p3 = 4*1024
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1024)

            strcpy(cp2, p2)

            IGetTitle_USERMETA(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def serial(self, int32_t p2, const char* p3):

        try:


            Serial_USERMETA(get_p_geo(), &self.handle, &p2, p3)
            
        finally:
            pass


    def set_data_creation_date(self, double p2):

        try:


            SetDataCreationDate_USERMETA(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_data_creator(self, const char* p2):

        try:


            SetDataCreator_USERMETA(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def set_extents2d(self, double p2, double p3, double p4, double p5):

        try:


            SetExtents2d_USERMETA(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def set_extents3d(self, double p2, double p3, double p4, double p5, double p6, double p7):

        try:


            SetExtents3d_USERMETA(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass


    def set_format(self, const char* p2):

        try:


            SetFormat_USERMETA(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def set_ipj(self, WrapIPJ p2):

        try:


            SetIPJ_USERMETA(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_meta_creation_date(self, double p2):

        try:


            SetMetaCreationDate_USERMETA(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_meta_creator(self, const char* p2):

        try:


            SetMetaCreator_USERMETA(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def set_project(self, const char* p2):

        try:


            SetProject_USERMETA(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def set_title(self, const char* p2):

        try:


            SetTitle_USERMETA(get_p_geo(), &self.handle, p2)
            
        finally:
            pass

    @classmethod
    def update_extents2_d(cls, const char* p1, WrapIPJ p2, double p3, double p4, double p5, double p6):

        try:


            UpdateExtents2D_USERMETA(get_p_geo(), p1, &p2.handle, &p3, &p4, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def update_file_type(cls, const char* p1, const char* p2):

        try:


            UpdateFileType_USERMETA(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def save_file_lineage(cls, const char* p1, int32_t p2):

        try:


            SaveFileLineage_USERMETA(get_p_geo(), p1, &p2)
            
        finally:
            pass

    pass



cdef class WrapVA:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_VA(get_p_geo(), &self.handle)





    def get_array(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5, unsigned char* p6, int32_t p7):

        try:


            _return_val = iGetArray_VA(get_p_geo(), &self.handle, p2, p3, p4, p5, p6, p7)
            return _return_val
        finally:
            pass


    def set_array(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5, const unsigned char* p6, int32_t p7):

        try:


            _return_val = iSetArray_VA(get_p_geo(), &self.handle, p2, p3, p4, p5, p6, p7)
            return _return_val
        finally:
            pass


    def add_elevations_vv_to_depths(self, WrapVV p2, int32_t p3):

        try:


            AddElevationsVVToDepths_VA(get_p_geo(), &self.handle, &p2.handle, &p3)
            
        finally:
            pass


    def append(self, WrapVA p2):

        try:


            Append_VA(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def average(self, WrapVV p2, int32_t p3):

        try:


            Average_VA(get_p_geo(), &self.handle, &p2.handle, &p3)
            
        finally:
            pass


    def copy(self, WrapVA p2):

        try:


            Copy_VA(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def copy2(self, int32_t p2, int32_t p3, WrapVA p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8):

        try:


            Copy2_VA(get_p_geo(), &self.handle, &p2, &p3, &p4.handle, &p5, &p6, &p7, &p8)
            
        finally:
            pass

    @classmethod
    def create(cls, int32_t p1, int32_t p2, int32_t p3):

        try:


            _return_val = WrapVA(Create_VA(get_p_geo(), &p1, &p2, &p3))
            return _return_val
        finally:
            pass

    @classmethod
    def create_ext(cls, int32_t p1, int32_t p2, int32_t p3):

        try:


            _return_val = WrapVA(CreateExt_VA(get_p_geo(), &p1, &p2, &p3))
            return _return_val
        finally:
            pass

    @classmethod
    def create_vv(cls, WrapVV p1, int32_t p2, int32_t p3):

        try:


            _return_val = WrapVA(CreateVV_VA(get_p_geo(), &p1.handle, &p2, &p3))
            return _return_val
        finally:
            pass




    def get_full_vv(self):

        try:


            _return_val = WrapVV(GetFullVV_VA(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def get_vv(self, int32_t p2, int32_t p3, WrapVV p4):

        try:


            GetVV_VA(get_p_geo(), &self.handle, &p2, &p3, &p4.handle)
            
        finally:
            pass


    def col(self):

        try:


            _return_val = iCol_VA(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_int(self, int32_t p2, int32_t p3):

        try:


            _return_val = iGetInt_VA(get_p_geo(), &self.handle, &p2, &p3)
            return _return_val
        finally:
            pass


    def get_string(self, int32_t p2, int32_t p3, const char* p4):
        cdef int32_t p5 = 4*16384
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*16384)

            strcpy(cp4, p4)

            IGetString_VA(get_p_geo(), &self.handle, &p2, &p3, cp4, &p5)
            return cp4
        finally:
            if cp4: free(cp4)



    def len(self):

        try:


            _return_val = iLen_VA(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def index_order(cls, WrapVV p1, WrapVA p2):

        try:


            IndexOrder_VA(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass


    def lookup_index(self, WrapVV p2, WrapVA p3):

        try:


            LookupIndex_VA(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def range_double(self, double p2, double p3):

        try:


            RangeDouble_VA(get_p_geo(), &self.handle, &p2, &p3)
            return (p2, p3)
        finally:
            pass


    def re_fid(self, double p2, double p3, int32_t p4):

        try:


            ReFid_VA(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def reverse(self):

        try:


            Reverse_VA(get_p_geo(), &self.handle)
            
        finally:
            pass


    def get_fid_incr(self):

        try:


            _return_val = rGetFidIncr_VA(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_fid_start(self):

        try:


            _return_val = rGetFidStart_VA(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_double(self, int32_t p2, int32_t p3):

        try:


            _return_val = rGetReal_VA(get_p_geo(), &self.handle, &p2, &p3)
            return _return_val
        finally:
            pass


    def set_fid_incr(self, double p2):

        try:


            SetFidIncr_VA(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_fid_start(self, double p2):

        try:


            SetFidStart_VA(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_int(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            SetInt_VA(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def set_ln(self, int32_t p2):

        try:


            SetLn_VA(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_double(self, int32_t p2, int32_t p3, double p4):

        try:


            SetReal_VA(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def set_string(self, int32_t p2, int32_t p3, const char* p4):

        try:


            SetString_VA(get_p_geo(), &self.handle, &p2, &p3, p4)
            
        finally:
            pass


    def set_vv(self, int32_t p2, int32_t p3, WrapVV p4):

        try:


            SetVV_VA(get_p_geo(), &self.handle, &p2, &p3, &p4.handle)
            
        finally:
            pass


    def trans(self, double p2, double p3):

        try:


            Trans_VA(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def window(self, int32_t p2, int32_t p3, WrapVV p4):

        try:


            Window_VA(get_p_geo(), &self.handle, &p2, &p3, &p4.handle)
            
        finally:
            pass


    def window2(self, double p2, double p3, WrapVV p4):

        try:


            Window2_VA(get_p_geo(), &self.handle, &p2, &p3, &p4.handle)
            
        finally:
            pass


    def check_for_repeating(self, WrapVV p2, int32_t p3, WrapVV p4, double p5):

        try:


            _return_val = iCheckForRepeating_VA(get_p_geo(), &self.handle, &p2.handle, &p3, &p4.handle, &p5)
            return _return_val
        finally:
            pass


    def check_for_repeating2(self, WrapVV p2, int32_t p3, WrapVV p4, double p5, int32_t p6, int32_t p7):

        try:


            _return_val = iCheckForRepeating2_VA(get_p_geo(), &self.handle, &p2.handle, &p3, &p4.handle, &p5, &p6, &p7)
            return (_return_val, p6, p7)
        finally:
            pass

    pass



cdef class WrapVECTOR3D:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_VECTOR3D(get_p_geo(), &self.handle)







    def get_itr(self, WrapITR p2):

        try:


            GetITR_VECTOR3D(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_itr(self, WrapITR p2):

        try:


            SetITR_VECTOR3D(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    pass



cdef class WrapVM:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_VM(get_p_geo(), &self.handle)




    @classmethod
    def create(cls, int32_t p1, int32_t p2):

        try:


            _return_val = WrapVM(Create_VM(get_p_geo(), &p1, &p2))
            return _return_val
        finally:
            pass

    @classmethod
    def create_ext(cls, int32_t p1, int32_t p2):

        try:


            _return_val = WrapVM(CreateExt_VM(get_p_geo(), &p1, &p2))
            return _return_val
        finally:
            pass




    def get_int(self, int32_t p2):

        try:


            _return_val = iGetInt_VM(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def get_string(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*16384
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*16384)

            strcpy(cp3, p3)

            IGetString_VM(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def length(self):

        try:


            _return_val = iLength_VM(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def re_size(self, int32_t p2):

        try:


            ReSize_VM(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def get_double(self, int32_t p2):

        try:


            _return_val = rGetReal_VM(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def set_int(self, int32_t p2, int32_t p3):

        try:


            SetInt_VM(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_double(self, int32_t p2, double p3):

        try:


            SetReal_VM(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_string(self, int32_t p2, const char* p3):

        try:


            SetString_VM(get_p_geo(), &self.handle, &p2, p3)
            
        finally:
            pass

    pass



cdef class WrapVOX:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_VOX(get_p_geo(), &self.handle)





    def calc_stats(self, WrapST p2):

        try:


            CalcStats_VOX(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def create(cls, const char* p1):

        try:


            _return_val = WrapVOX(Create_VOX(get_p_geo(), p1))
            return _return_val
        finally:
            pass


    def create_pg(self):

        try:


            _return_val = WrapPG(CreatePG_VOX(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def create_type_pg(self, int32_t p2):

        try:


            _return_val = WrapPG(CreateTypePG_VOX(get_p_geo(), &self.handle, &p2))
            return _return_val
        finally:
            pass




    def dump(self, const char* p2):

        try:


            Dump_VOX(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def export_img(self, const char* p2, int32_t p3):

        try:


            ExportIMG_VOX(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass


    def export_to_grids(self, const char* p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, double p7, int32_t p8):

        try:


            ExportToGrids_VOX(get_p_geo(), &self.handle, p2, &p3, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass

    @classmethod
    def export_xml(cls, const char* p1, int32_t p2, const char* p3):

        try:


            ExportXML_VOX(get_p_geo(), p1, &p2, p3)
            return p2
        finally:
            pass


    def export_seg_y(self, const char* p2, double p3):

        try:


            ExportSegY_VOX(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass

    @classmethod
    def export_ji_gs_xml(cls, const char* p1, const char* p2):

        try:


            ExportJIGsXML_VOX(get_p_geo(), p1, p2)
            
        finally:
            pass


    def export_xyz(self, const char* p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            ExportXYZ_VOX(get_p_geo(), &self.handle, p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass


    def filter(self, int32_t p2, const char* p3, int32_t p4, int32_t p5, const char* p6):

        try:


            Filter_VOX(get_p_geo(), &self.handle, &p2, p3, &p4, &p5, p6)
            
        finally:
            pass

    @classmethod
    def generate_db(cls, const char* p1, WrapDB p2, int32_t p3):

        try:


            GenerateDB_VOX(get_p_geo(), p1, &p2.handle, &p3)
            
        finally:
            pass

    @classmethod
    def generate_vector_voxel_from_db(cls, const char* p1, WrapDB p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, double p7, double p8):

        try:


            GenerateVectorVoxelFromDB_VOX(get_p_geo(), p1, &p2.handle, &p3, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass

    @classmethod
    def generate_pg(cls, const char* p1, WrapPG p2, double p3, double p4, double p5, double p6, double p7, double p8, WrapIPJ p9, WrapMETA p10):

        try:


            _return_val = WrapVOX(GeneratePG_VOX(get_p_geo(), p1, &p2.handle, &p3, &p4, &p5, &p6, &p7, &p8, &p9.handle, &p10.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def generate_constant_value(cls, const char* p1, double p2, int32_t p3, double p4, double p5, double p6, double p7, double p8, double p9, int32_t p10, int32_t p11, int32_t p12, WrapIPJ p13, WrapMETA p14):

        try:


            _return_val = WrapVOX(GenerateConstantValue_VOX(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13.handle, &p14.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def generate_pgvv(cls, const char* p1, WrapPG p2, double p3, double p4, double p5, WrapVV p6, WrapVV p7, WrapVV p8, WrapIPJ p9, WrapMETA p10):

        try:


            _return_val = WrapVOX(GeneratePGVV_VOX(get_p_geo(), p1, &p2.handle, &p3, &p4, &p5, &p6.handle, &p7.handle, &p8.handle, &p9.handle, &p10.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def generate_constant_value_vv(cls, const char* p1, double p2, int32_t p3, double p4, double p5, double p6, WrapVV p7, WrapVV p8, WrapVV p9, WrapIPJ p10, WrapMETA p11):

        try:


            _return_val = WrapVOX(GenerateConstantValueVV_VOX(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6, &p7.handle, &p8.handle, &p9.handle, &p10.handle, &p11.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def init_generate_by_subset_pg(cls, int32_t p1, int32_t p2, int32_t p3, int32_t p4):

        try:


            _return_val = WrapVOX(InitGenerateBySubsetPG_VOX(get_p_geo(), &p1, &p2, &p3, &p4))
            return _return_val
        finally:
            pass


    def add_generate_by_subset_pg(self, WrapPG p2, int32_t p3, int32_t p4):

        try:


            AddGenerateBySubsetPG_VOX(get_p_geo(), &self.handle, &p2.handle, &p3, &p4)
            
        finally:
            pass


    def end_generate_by_subset_pg(self, const char* p2, double p3, double p4, double p5, double p6, double p7, double p8, WrapIPJ p9, WrapMETA p10):

        try:


            EndGenerateBySubsetPG_VOX(get_p_geo(), &self.handle, p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9.handle, &p10.handle)
            
        finally:
            pass


    def get_area(self, double p2, double p3, double p4, double p5, double p6, double p7):

        try:


            GetArea_VOX(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            return (p2, p3, p4, p5, p6, p7)
        finally:
            pass


    def get_gocad_location(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11, double p12, double p13):

        try:


            GetGOCADLocation_VOX(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13)
            return (p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13)
        finally:
            pass


    def get_grid_section_cell_sizes(self, double p2, double p3, double p4):

        try:


            GetGridSectionCellSizes_VOX(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return (p3, p4)
        finally:
            pass


    def get_info(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6):

        try:


            GetInfo_VOX(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6)
            return (p2, p3, p4, p5, p6)
        finally:
            pass


    def get_ipj(self, WrapIPJ p2):

        try:


            GetIPJ_VOX(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_limits(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            GetLimits_VOX(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            return (p2, p3, p4, p5, p6, p7)
        finally:
            pass


    def get_limits_xyz(self, double p2, double p3, double p4, double p5, double p6, double p7):

        try:


            GetLimitsXYZ_VOX(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            return (p2, p3, p4, p5, p6, p7)
        finally:
            pass


    def get_location(self, double p2, double p3, double p4, WrapVV p5, WrapVV p6, WrapVV p7):

        try:


            GetLocation_VOX(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5.handle, &p6.handle, &p7.handle)
            return (p2, p3, p4)
        finally:
            pass


    def get_location_points(self, WrapVV p2, WrapVV p3, WrapVV p4):

        try:


            GetLocationPoints_VOX(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass


    def get_meta(self, WrapMETA p2):

        try:


            GetMETA_VOX(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_double_location(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11, double p12, double p13):

        try:


            GetRealLocation_VOX(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13)
            return (p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13)
        finally:
            pass


    def get_simple_location(self, double p2, double p3, double p4, double p5, double p6, double p7):

        try:


            GetSimpleLocation_VOX(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            return (p2, p3, p4, p5, p6, p7)
        finally:
            pass


    def get_stats(self):

        try:


            _return_val = WrapST(GetStats_VOX(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def get_tpat(self, WrapTPAT p2):

        try:


            GetTPAT_VOX(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def grid_points(cls, const char* p1, const char* p2, double p3, int32_t p4, double p5, double p6, int32_t p7, int32_t p8, int32_t p9, double p10, double p11, double p12, double p13, double p14, int32_t p15, WrapVV p16, WrapVV p17, WrapVV p18, WrapVV p19, WrapIPJ p20):

        try:


            _return_val = WrapVOX(GridPoints_VOX(get_p_geo(), p1, p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16.handle, &p17.handle, &p18.handle, &p19.handle, &p20.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def grid_points_z(cls, const char* p1, const char* p2, double p3, const char* p4, int32_t p5, double p6, double p7, int32_t p8, int32_t p9, int32_t p10, double p11, double p12, double p13, double p14, double p15, int32_t p16, WrapVV p17, WrapVV p18, WrapVV p19, WrapVV p20, WrapIPJ p21):

        try:


            _return_val = WrapVOX(GridPointsZ_VOX(get_p_geo(), p1, p2, &p3, p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16, &p17.handle, &p18.handle, &p19.handle, &p20.handle, &p21.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def grid_points_z_ex(cls, const char* p1, const char* p2, double p3, const char* p4, int32_t p5, double p6, double p7, int32_t p8, int32_t p9, int32_t p10, double p11, double p12, double p13, double p14, double p15, double p16, double p17, double p18, double p19, double p20, int32_t p21, WrapVV p22, WrapVV p23, WrapVV p24, WrapVV p25, WrapIPJ p26):

        try:


            _return_val = WrapVOX(GridPointsZEx_VOX(get_p_geo(), p1, p2, &p3, p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16, &p17, &p18, &p19, &p20, &p21, &p22.handle, &p23.handle, &p24.handle, &p25.handle, &p26.handle))
            return (_return_val, p12, p13, p15)
        finally:
            pass


    def can_append_to(self, const char* p2):

        try:


            _return_val = iCanAppendTo_VOX(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def get_cell_size_strings(self, const char* p2, const char* p4, const char* p6, double p8, double p9, double p10):
        cdef int32_t p3 = 4*16384
        cdef int32_t p5 = 4*16384
        cdef int32_t p7 = 4*16384
        cdef char* cp2 = NULL
        cdef char* cp4 = NULL
        cdef char* cp6 = NULL

        try:
            cp2 = <char*>malloc(4*16384)
            cp4 = <char*>malloc(4*16384)
            cp6 = <char*>malloc(4*16384)

            strcpy(cp2, p2)
            strcpy(cp4, p4)
            strcpy(cp6, p6)

            IGetCellSizeStrings_VOX(get_p_geo(), &self.handle, cp2, &p3, cp4, &p5, cp6, &p7, &p8, &p9, &p10)
            return (cp2, cp4, cp6)
        finally:
            if cp2: free(cp2)
            if cp4: free(cp4)
            if cp6: free(cp6)



    def is_thematic(self):

        try:


            _return_val = iIsThematic_VOX(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def is_vector_voxel(self):

        try:


            _return_val = iIsVectorVoxel_VOX(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def set_cell_size_strings(self, const char* p2, const char* p3, const char* p4):

        try:


            _return_val = iSetCellSizeStrings_VOX(get_p_geo(), &self.handle, p2, p3, p4)
            return _return_val
        finally:
            pass

    @classmethod
    def log_grid_points_z_ex(cls, const char* p1, const char* p2, double p3, const char* p4, int32_t p5, double p6, double p7, int32_t p8, int32_t p9, int32_t p10, double p11, double p12, double p13, double p14, double p15, double p16, double p17, double p18, double p19, double p20, int32_t p21, double p22, int32_t p23, WrapVV p24, WrapVV p25, WrapVV p26, WrapVV p27, WrapIPJ p28):

        try:


            _return_val = WrapVOX(LogGridPointsZEx_VOX(get_p_geo(), p1, p2, &p3, p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16, &p17, &p18, &p19, &p20, &p21, &p22, &p23, &p24.handle, &p25.handle, &p26.handle, &p27.handle, &p28.handle))
            return (_return_val, p12, p13, p15)
        finally:
            pass

    @classmethod
    def krig(cls, const char* p1, double p2, int32_t p3, WrapVV p4, WrapVV p5, WrapVV p6, WrapVV p7, WrapIPJ p8, WrapREG p9):

        try:


            _return_val = WrapVOX(Krig_VOX(get_p_geo(), p1, &p2, &p3, &p4.handle, &p5.handle, &p6.handle, &p7.handle, &p8.handle, &p9.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def math(cls, const char* p1, const char* p2, const char* p3, const char* p4, const char* p5, WrapLST p6):

        try:


            _return_val = WrapVOX(Math_VOX(get_p_geo(), p1, p2, p3, p4, p5, &p6.handle))
            return _return_val
        finally:
            pass


    def merge(self, WrapVOX p2, WrapREG p3, const char* p4):

        try:


            Merge_VOX(get_p_geo(), &self.handle, &p2.handle, &p3.handle, p4)
            
        finally:
            pass

    @classmethod
    def nearest_neighbour_grid(cls, const char* p1, double p2, double p3, int32_t p4, WrapVV p5, WrapVV p6, WrapVV p7, WrapVV p8, WrapIPJ p9):

        try:


            _return_val = WrapVOX(NearestNeighbourGrid_VOX(get_p_geo(), p1, &p2, &p3, &p4, &p5.handle, &p6.handle, &p7.handle, &p8.handle, &p9.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def compute_cell_size(cls, double p1, double p2, double p3, double p4, double p5, double p6):

        try:


            _return_val = rComputeCellSize_VOX(get_p_geo(), &p1, &p2, &p3, &p4, &p5, &p6)
            return _return_val
        finally:
            pass


    def re_grid(self, WrapVOX p2, WrapREG p3, const char* p4):

        try:


            ReGrid_VOX(get_p_geo(), &self.handle, &p2.handle, &p3.handle, p4)
            
        finally:
            pass


    def resample_pg(self, WrapIPJ p2, double p3, double p4, double p5, double p6, double p7, double p8, int32_t p9, int32_t p10, int32_t p11, double p12, double p13, int32_t p14):

        try:


            _return_val = WrapPG(ResamplePG_VOX(get_p_geo(), &self.handle, &p2.handle, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14))
            return _return_val
        finally:
            pass


    def rescale_cell_sizes(self, double p2):

        try:


            RescaleCellSizes_VOX(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def sample_cdi(self, WrapDB p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8, int32_t p9, const char* p10):

        try:


            SampleCDI_VOX(get_p_geo(), &self.handle, &p2.handle, &p3, &p4, &p5, &p6, &p7, &p8, &p9, p10)
            
        finally:
            pass


    def sample_cdi_to_topography(self, WrapDB p2, int32_t p3, int32_t p4, int32_t p5, WrapVV p6, int32_t p7, const char* p8, const char* p9):

        try:


            SampleCDIToTopography_VOX(get_p_geo(), &self.handle, &p2.handle, &p3, &p4, &p5, &p6.handle, &p7, p8, p9)
            
        finally:
            pass


    def sample_vv(self, WrapVV p2, WrapVV p3, WrapVV p4, int32_t p5, WrapVV p6):

        try:


            SampleVV_VOX(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle, &p5, &p6.handle)
            
        finally:
            pass


    def set_ipj(self, WrapIPJ p2):

        try:


            SetIPJ_VOX(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_location(self, double p2, double p3, double p4, WrapVV p5, WrapVV p6, WrapVV p7):

        try:


            SetLocation_VOX(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5.handle, &p6.handle, &p7.handle)
            
        finally:
            pass


    def set_meta(self, WrapMETA p2):

        try:


            SetMETA_VOX(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_origin(self, int32_t p2, double p3, double p4, double p5):

        try:


            SetOrigin_VOX(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def set_simple_location(self, double p2, double p3, double p4, double p5, double p6, double p7):

        try:


            SetSimpleLocation_VOX(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass


    def set_tpat(self, WrapTPAT p2):

        try:


            SetTPAT_VOX(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def slice_ipj(self, const char* p2, WrapIPJ p3, int32_t p4, double p5, double p6, double p7, double p8, int32_t p9, int32_t p10):

        try:


            SliceIPJ_VOX(get_p_geo(), &self.handle, p2, &p3.handle, &p4, &p5, &p6, &p7, &p8, &p9, &p10)
            
        finally:
            pass


    def slice_multi_layer_ipj(self, const char* p2, WrapIPJ p3, int32_t p4, double p5, double p6, double p7, double p8, int32_t p9, int32_t p10, int32_t p11, double p12, double p13):

        try:


            SliceMultiLayerIPJ_VOX(get_p_geo(), &self.handle, p2, &p3.handle, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13)
            
        finally:
            pass


    def subset_to_double_extents(self, const char* p2):

        try:


            SubsetToRealExtents_VOX(get_p_geo(), &self.handle, p2)
            
        finally:
            pass

    @classmethod
    def sync(cls, const char* p1):

        try:


            Sync_VOX(get_p_geo(), p1)
            
        finally:
            pass


    def window_ply(self, WrapPLY p2, int32_t p3, double p4, double p5, const char* p6, int32_t p7):

        try:


            WindowPLY_VOX(get_p_geo(), &self.handle, &p2.handle, &p3, &p4, &p5, p6, &p7)
            
        finally:
            pass


    def window_xyz(self, double p2, double p3, double p4, double p5, double p6, double p7, const char* p8, int32_t p9):

        try:


            WindowXYZ_VOX(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, p8, &p9)
            
        finally:
            pass


    def write_xml(self, const char* p2):

        try:


            WriteXML_VOX(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def convert_numeric_to_thematic(self, WrapVV p2, const char* p3):

        try:


            ConvertNumericToThematic_VOX(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass


    def convert_thematic_to_numeric(self, WrapVV p2, const char* p3):

        try:


            ConvertThematicToNumeric_VOX(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass


    def convert_velocity_to_density(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, const char* p10):

        try:


            ConvertVelocityToDensity_VOX(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, p10)
            
        finally:
            pass


    def convert_velocity_in_range_to_density(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11, const char* p12):

        try:


            ConvertVelocityInRangeToDensity_VOX(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, p12)
            
        finally:
            pass


    def convert_density_to_velocity(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11, const char* p12):

        try:


            ConvertDensityToVelocity_VOX(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, p12)
            
        finally:
            pass


    def invert_z(self, const char* p2):

        try:


            InvertZ_VOX(get_p_geo(), &self.handle, p2)
            
        finally:
            pass

    @classmethod
    def dw_grid_db(cls, const char* p1, WrapDB p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, WrapREG p7):

        try:


            IDWGridDB_VOX(get_p_geo(), p1, &p2.handle, &p3, &p4, &p5, &p6, &p7.handle)
            
        finally:
            pass

    @classmethod
    def tin_grid_db(cls, const char* p1, WrapDB p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, WrapVV p8, WrapREG p9):

        try:


            TINGridDB_VOX(get_p_geo(), p1, &p2.handle, &p3, &p4, &p5, &p6, &p7, &p8.handle, &p9.handle)
            
        finally:
            pass

    @classmethod
    def get_multi_voxset_guid(cls, const char* p1, const char* p2):
        cdef int32_t p3 = 4*1024
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1024)

            strcpy(cp2, p2)

            IGetMultiVoxsetGUID_VOX(get_p_geo(), p1, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def generate_gocad(cls, const char* p1, const char* p2, const char* p3, WrapIPJ p4):

        try:


            _return_val = WrapVOX(GenerateGOCAD_VOX(get_p_geo(), p1, p2, p3, &p4.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def generate_oriented_gocad(cls, const char* p1, const char* p2, const char* p3, WrapIPJ p4, int32_t p5):

        try:


            _return_val = WrapVOX(GenerateOrientedGOCAD_VOX(get_p_geo(), p1, p2, p3, &p4.handle, &p5))
            return _return_val
        finally:
            pass

    @classmethod
    def generate_ubc(cls, const char* p1, const char* p2, const char* p3, double p4, WrapIPJ p5):

        try:


            _return_val = WrapVOX(GenerateUBC_VOX(get_p_geo(), p1, p2, p3, &p4, &p5.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def generate_xyz(cls, const char* p1, WrapRA p2, int32_t p3, WrapIPJ p4):

        try:


            GenerateXYZ_VOX(get_p_geo(), p1, &p2.handle, &p3, &p4.handle)
            
        finally:
            pass

    @classmethod
    def list_gocad_properties(cls, const char* p1, WrapLST p2):

        try:


            ListGOCADProperties_VOX(get_p_geo(), p1, &p2.handle)
            
        finally:
            pass


    def export_db(self, WrapDB p2, const char* p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8):

        try:


            ExportDB_VOX(get_p_geo(), &self.handle, &p2.handle, p3, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass

    pass



cdef class WrapVOXD:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_VOXD(get_p_geo(), &self.handle)




    @classmethod
    def create(cls, WrapVOX p1, const char* p2, int32_t p3, double p4):

        try:


            _return_val = WrapVOXD(Create_VOXD(get_p_geo(), &p1.handle, p2, &p3, &p4))
            return _return_val
        finally:
            pass

    @classmethod
    def create_itr(cls, WrapVOX p1, WrapITR p2):

        try:


            _return_val = WrapVOXD(CreateITR_VOXD(get_p_geo(), &p1.handle, &p2.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def create_thematic(cls, WrapVOX p1):

        try:


            _return_val = WrapVOXD(CreateThematic_VOXD(get_p_geo(), &p1.handle))
            return _return_val
        finally:
            pass


    def is_thematic(self):

        try:


            _return_val = iIsThematic_VOXD(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_thematic_info(self, WrapTPAT p2, WrapVV p3):

        try:


            GetThematicInfo_VOXD(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def set_thematic_selection(self, WrapVV p2):

        try:


            SetThematicSelection_VOXD(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass




    def get_draw_controls(self, int32_t p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9):

        try:


            GetDrawControls_VOXD(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9)
            return (p2, p3, p4, p5, p6, p7, p8, p9)
        finally:
            pass


    def get_name(self, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            IGetName_VOXD(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def get_itr(self, WrapITR p2):

        try:


            GetITR_VOXD(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_shell_controls(self, double p2, double p3):

        try:


            GetShellControls_VOXD(get_p_geo(), &self.handle, &p2, &p3)
            return (p2, p3)
        finally:
            pass


    def set_draw_controls(self, int32_t p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9):

        try:


            SetDrawControls_VOXD(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9)
            
        finally:
            pass


    def set_itr(self, WrapITR p2):

        try:


            SetITR_VOXD(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_shell_controls(self, double p2, double p3):

        try:


            SetShellControls_VOXD(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass

    pass



cdef class WrapVOXE:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_VOXE(get_p_geo(), &self.handle)




    @classmethod
    def create(cls, WrapVOX p1):

        try:


            _return_val = WrapVOXE(Create_VOXE(get_p_geo(), &p1.handle))
            return _return_val
        finally:
            pass




    def profile(self, WrapVV p2, WrapVV p3, WrapVV p4, WrapVV p5, int32_t p6):

        try:


            Profile_VOXE(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle, &p5.handle, &p6)
            
        finally:
            pass


    def value(self, double p2, double p3, double p4, int32_t p5):

        try:


            _return_val = rValue_VOXE(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            return _return_val
        finally:
            pass


    def vector(self, double p2, double p3, double p4, double p5, double p6, double p7, WrapVV p8, int32_t p9):

        try:


            Vector_VOXE(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8.handle, &p9)
            
        finally:
            pass

    pass



cdef class WrapVULCAN:
    




    @classmethod
    def is_valid_triangulation_file(cls, const char* p1):

        try:


            _return_val = IsValidTriangulationFile_VULCAN(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def is_valid_block_model_file(cls, const char* p1):

        try:


            _return_val = IsValidBlockModelFile_VULCAN(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def triangulation_to_view(cls, const char* p1, WrapIPJ p2, WrapMVIEW p3, const char* p4):

        try:


            TriangulationToView_VULCAN(get_p_geo(), p1, &p2.handle, &p3.handle, p4)
            
        finally:
            pass

    @classmethod
    def get_block_model_variable_info(cls, const char* p1, int32_t p2, WrapLST p3):

        try:


            GetBlockModelVariableInfo_VULCAN(get_p_geo(), p1, &p2, &p3.handle)
            
        finally:
            pass

    @classmethod
    def get_block_model_string_variable_values(cls, const char* p1, const char* p2, WrapLST p3):

        try:


            GetBlockModelStringVariableValues_VULCAN(get_p_geo(), p1, p2, &p3.handle)
            
        finally:
            pass

    @classmethod
    def block_model_to_voxel(cls, const char* p1, WrapIPJ p2, const char* p3, const char* p4, int32_t p5, const char* p6):

        try:


            BlockModelToVoxel_VULCAN(get_p_geo(), p1, &p2.handle, p3, p4, &p5, p6)
            
        finally:
            pass

    pass



cdef class WrapVV:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_VV(get_p_geo(), &self.handle)




    def get_data(self, int32_t p2, int32_t p3, unsigned char* p4, int32_t p5):

        try:

            _return_val = iGetData_VV(get_p_geo(), &self.handle, p2, p3, p4, p5)
            return _return_val
        finally:
            pass


    def get_data_array(self, int32_t p2, int32_t p3, int32_t p5):
        """
        Type code	C Type	Python Type	Minimum size in bytes	Notes
        'b'	signed char	int	1	 
        'B'	unsigned char	int	1	 
        'u'	Py_UNICODE	Unicode character	2	(1)
        'h'	signed short	int	2	 
        'H'	unsigned short	int	2	 
        'i'	signed int	int	2	 
        'I'	unsigned int	int	2	 
        'l'	signed long	int	4	 
        'L'	unsigned long	int	4	 
        'q'	signed long long	int	8	(2)
        'Q'	unsigned long long	int	8	(2)
        'f'	float	float	4	 
        'd'	double	float	8	 
        Notes:
        """

        cdef void* ap4 = NULL
        cdef array arrp4

        try:
            ap4 = malloc(p3*8)
            arrp4 = array(shape=(p3,), itemsize=sizeof(double), format="d", mode="c", allocate_buffer=False)
            arrp4.data = <char*>ap4
            arrp4.callback_free_data = callback_free_data
            ap4 = NULL
            _return_val = iGetData_VV(get_p_geo(), &self.handle, p2, 5, arrp4.data, p5)
            return (_return_val, arrp4)
        finally:
            if (ap4): free(ap4)


    def set_data(self, int32_t p2, int32_t p3, const unsigned char* p4, int32_t p5):

        try:


            _return_val = iSetData_VV(get_p_geo(), &self.handle, p2, p3, p4, p5)
            return _return_val
        finally:
            pass


    def copy(self, WrapVV p2):

        try:


            _Copy_VV(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def copy2(self, int32_t p2, WrapVV p3, int32_t p4, int32_t p5):

        try:


            _Copy2_VV(get_p_geo(), &self.handle, &p2, &p3.handle, &p4, &p5)
            
        finally:
            pass


    def log(self, int32_t p2, int32_t p3, double p4):

        try:


            _Log_VV(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def log_linear(self, double p2):

        try:


            _LogLinear_VV(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def mask(self, WrapVV p2):

        try:


            _Mask_VV(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def reverse(self):

        try:


            _Reverse_VV(get_p_geo(), &self.handle)
            
        finally:
            pass


    def serial(self, WrapBF p2):

        try:


            _Serial_VV(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def trans(self, double p2, double p3):

        try:


            _Trans_VV(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def abs(self):

        try:


            Abs_VV(get_p_geo(), &self.handle)
            
        finally:
            pass


    def add(self, WrapVV p2, WrapVV p3):

        try:


            Add_VV(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def add2(self, double p2, WrapVV p3, double p4, WrapVV p5):

        try:


            Add2_VV(get_p_geo(), &self.handle, &p2, &p3.handle, &p4, &p5.handle)
            
        finally:
            pass


    def append(self, WrapVV p2):

        try:


            Append_VV(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def crc(self, int32_t p2):

        try:


            _return_val = CRC_VV(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def crc_inexact(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            _return_val = CRCInexact_VV(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return _return_val
        finally:
            pass

    @classmethod
    def create(cls, int32_t p1, int32_t p2):

        try:


            _return_val = WrapVV(Create_VV(get_p_geo(), &p1, &p2))
            return _return_val
        finally:
            pass

    @classmethod
    def create_ext(cls, int32_t p1, int32_t p2):

        try:


            _return_val = WrapVV(CreateExt_VV(get_p_geo(), &p1, &p2))
            return _return_val
        finally:
            pass

    @classmethod
    def create_s(cls, WrapBF p1):

        try:


            _return_val = WrapVV(CreateS_VV(get_p_geo(), &p1.handle))
            return _return_val
        finally:
            pass




    def diff(self, int32_t p2):

        try:


            Diff_VV(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def divide(self, WrapVV p2, WrapVV p3):

        try:


            Divide_VV(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def fid_norm(self, WrapVV p2):

        try:


            FidNorm_VV(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def fill_int(self, int32_t p2):

        try:


            FillInt_VV(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def fill_double(self, double p2):

        try:


            FillReal_VV(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def fill_string(self, const char* p2):

        try:


            FillString_VV(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def count_dummies(self, int32_t p2, int32_t p3):

        try:


            _return_val = iCountDummies_VV(get_p_geo(), &self.handle, &p2, &p3)
            return _return_val
        finally:
            pass


    def find_dum(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            _return_val = iFindDum_VV(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            return _return_val
        finally:
            pass


    def get_fid_expansion(self):

        try:


            _return_val = iGetFidExpansion_VV(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_int(self, int32_t p2):

        try:


            _return_val = iGetInt_VV(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def get_string(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*16384
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*16384)

            strcpy(cp3, p3)

            IGetString_VV(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)



    def index_max(self, double p2):

        try:


            _return_val = iIndexMax_VV(get_p_geo(), &self.handle, &p2)
            return (_return_val, p2)
        finally:
            pass


    def length(self):

        try:


            _return_val = iLength_VV(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def index_insert(self, WrapVV p2, WrapVV p3):

        try:


            IndexInsert_VV(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def index_order(self, WrapVV p2):

        try:


            IndexOrder_VV(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def init_index(self, int32_t p2):

        try:


            InitIndex_VV(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def inv_log(self, int32_t p2, int32_t p3, double p4):

        try:


            InvLog_VV(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def order(self, int32_t p2):

        try:


            _return_val = iOrder_VV(get_p_geo(), &self.handle, &p2)
            return (_return_val, p2)
        finally:
            pass


    def lines_to_xy(self, WrapVV p2, WrapVV p3):

        try:


            LinesToXY_VV(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def lookup_index(self, WrapVV p2, WrapVV p3):

        try:


            LookupIndex_VV(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def make_mem_based(self):

        try:


            MakeMemBased_VV(get_p_geo(), &self.handle)
            
        finally:
            pass


    def mask_and(self, WrapVV p2, WrapVV p3):

        try:


            MaskAND_VV(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def mask_or(self, WrapVV p2, WrapVV p3):

        try:


            MaskOR_VV(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def mask_str(self, WrapVV p2, const char* p3):

        try:


            MaskStr_VV(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass


    def multiply(self, WrapVV p2, WrapVV p3):

        try:


            Multiply_VV(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def amplitude_3d(self, WrapVV p2, WrapVV p3, WrapVV p4):

        try:


            Amplitude3D_VV(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass


    def polygon_mask(self, WrapVV p2, WrapVV p3, WrapPLY p4, int32_t p5):

        try:


            PolygonMask_VV(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle, &p5)
            
        finally:
            pass

    @classmethod
    def project(cls, WrapPJ p1, WrapVV p2, WrapVV p3):

        try:


            Project_VV(get_p_geo(), &p1.handle, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def project_3d(cls, WrapPJ p1, WrapVV p2, WrapVV p3, WrapVV p4):

        try:


            Project3D_VV(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass


    def range_double(self, double p2, double p3):

        try:


            RangeDouble_VV(get_p_geo(), &self.handle, &p2, &p3)
            return (p2, p3)
        finally:
            pass


    def re_fid(self, double p2, double p3, int32_t p4):

        try:


            ReFid_VV(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def re_fid_vv(self, WrapVV p2):

        try:


            ReFidVV_VV(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def re_sample(self, double p2, double p3, double p4, double p5, int32_t p6, int32_t p7):

        try:


            ReSample_VV(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass


    def get_fid_incr(self):

        try:


            _return_val = rGetFidIncr_VV(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_fid_start(self):

        try:


            _return_val = rGetFidStart_VV(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_double(self, int32_t p2):

        try:


            _return_val = rGetReal_VV(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def sum(self):

        try:


            _return_val = rSum_VV(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def weighted_mean(self, WrapVV p2):

        try:


            _return_val = rWeightedMean_VV(get_p_geo(), &self.handle, &p2.handle)
            return _return_val
        finally:
            pass


    def set_fid_expansion(self, int32_t p2):

        try:


            SetFidExpansion_VV(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_fid_incr(self, double p2):

        try:


            SetFidIncr_VV(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_fid_start(self, double p2):

        try:


            SetFidStart_VV(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_int(self, int32_t p2, int32_t p3):

        try:


            SetInt_VV(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_int_n(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            SetIntN_VV(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def set_len(self, int32_t p2):

        try:


            SetLen_VV(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_double(self, int32_t p2, double p3):

        try:


            SetReal_VV(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_double_n(self, int32_t p2, int32_t p3, double p4):

        try:


            SetRealN_VV(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def set_string(self, int32_t p2, const char* p3):

        try:


            SetString_VV(get_p_geo(), &self.handle, &p2, p3)
            
        finally:
            pass


    def set_string_n(self, int32_t p2, int32_t p3, const char* p4):

        try:


            SetStringN_VV(get_p_geo(), &self.handle, &p2, &p3, p4)
            
        finally:
            pass


    def setup_index(self, WrapVV p2, WrapVV p3, int32_t p4, double p5):

        try:


            SetupIndex_VV(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4, &p5)
            
        finally:
            pass


    def sort(self, int32_t p2):

        try:


            Sort_VV(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def sort_index(self, WrapVV p2):

        try:


            SortIndex_VV(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def sort_index1(self, WrapVV p2, int32_t p3):

        try:


            SortIndex1_VV(get_p_geo(), &self.handle, &p2.handle, &p3)
            
        finally:
            pass


    def sort_index2(self, WrapVV p2, WrapVV p3, int32_t p4, int32_t p5):

        try:


            SortIndex2_VV(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4, &p5)
            
        finally:
            pass


    def sort_index3(self, WrapVV p2, WrapVV p3, WrapVV p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            SortIndex3_VV(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle, &p5, &p6, &p7)
            
        finally:
            pass


    def sort_index4(self, WrapVV p2, WrapVV p3, WrapVV p4, WrapVV p5, int32_t p6, int32_t p7, int32_t p8, int32_t p9):

        try:


            SortIndex4_VV(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle, &p5.handle, &p6, &p7, &p8, &p9)
            
        finally:
            pass

    @classmethod
    def statistics(cls, WrapST p1, WrapVV p2):

        try:


            Statistics_VV(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass


    def subtract(self, WrapVV p2, WrapVV p3):

        try:


            Subtract_VV(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def swap(self):

        try:


            Swap_VV(get_p_geo(), &self.handle)
            
        finally:
            pass


    def window(self, double p2, double p3, int32_t p4):

        try:


            Window_VV(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def write_xml(self, const char* p2, int32_t p3, int32_t p4):

        try:


            WriteXML_VV(get_p_geo(), &self.handle, p2, &p3, &p4)
            
        finally:
            pass

    pass



cdef class WrapWA:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_WA(get_p_geo(), &self.handle)





    def puts(self, const char* p2):

        try:


            _Puts_WA(get_p_geo(), &self.handle, p2)
            
        finally:
            pass

    @classmethod
    def create(cls, const char* p1, int32_t p2):

        try:


            _return_val = WrapWA(Create_WA(get_p_geo(), p1, &p2))
            return _return_val
        finally:
            pass

    @classmethod
    def create_ex(cls, const char* p1, int32_t p2, int32_t p3):

        try:


            _return_val = WrapWA(CreateEx_WA(get_p_geo(), p1, &p2, &p3))
            return _return_val
        finally:
            pass

    @classmethod
    def create_sbf(cls, WrapSBF p1, const char* p2, int32_t p3):

        try:


            _return_val = WrapWA(CreateSBF_WA(get_p_geo(), &p1.handle, p2, &p3))
            return _return_val
        finally:
            pass

    @classmethod
    def create_sbf_ex(cls, WrapSBF p1, const char* p2, int32_t p3, int32_t p4):

        try:


            _return_val = WrapWA(CreateSBFEx_WA(get_p_geo(), &p1.handle, p2, &p3, &p4))
            return _return_val
        finally:
            pass




    def new_line(self):

        try:


            NewLine_WA(get_p_geo(), &self.handle)
            
        finally:
            pass

    pass



cdef class WrapACQUIRE:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_ACQUIRE(get_p_geo(), &self.handle)




    @classmethod
    def create(cls):

        try:


            _return_val = WrapACQUIRE(Create_ACQUIRE(get_p_geo()))
            return _return_val
        finally:
            pass


    def delete_empty_chan(self, WrapDB p2):

        try:


            DeleteEmptyChan_ACQUIRE(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass




    def import_hole(self, const char* p2, const char* p3, const char* p4, WrapVV p5, int32_t p6, int32_t p7):

        try:


            _return_val = iImportHole_ACQUIRE(get_p_geo(), &self.handle, p2, p3, p4, &p5.handle, &p6, &p7)
            return _return_val
        finally:
            pass


    def import_point(self, WrapDB p2, const char* p3, int32_t p4):

        try:


            _return_val = iImportPoint_ACQUIRE(get_p_geo(), &self.handle, &p2.handle, p3, &p4)
            return _return_val
        finally:
            pass


    def selection_tool(self, const char* p2, int32_t p3):

        try:


            _return_val = iSelectionTool_ACQUIRE(get_p_geo(), &self.handle, p2, &p3)
            return _return_val
        finally:
            pass

    pass



cdef class WrapARCDB:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destr_SYS(get_p_geo(), &self.handle)





    def create_dat(self, const char* p2, const char* p3, const char* p4):

        try:


            _return_val = WrapDAT(CreateDAT_ARCDB(get_p_geo(), &self.handle, p2, p3, p4))
            return _return_val
        finally:
            pass


    def create_dat_3d(self, const char* p2, const char* p3, const char* p4, const char* p5):

        try:


            _return_val = WrapDAT(CreateDAT3D_ARCDB(get_p_geo(), &self.handle, p2, p3, p4, p5))
            return _return_val
        finally:
            pass

    @classmethod
    def current(cls):

        try:


            _return_val = WrapARCDB(Current_ARCDB(get_p_geo()))
            return _return_val
        finally:
            pass


    def export_to_db(self, WrapDB p2, const char* p3, const char* p4):

        try:


            ExportToDB_ARCDB(get_p_geo(), &self.handle, &p2.handle, p3, p4)
            
        finally:
            pass


    def field_lst(self, WrapLST p2):

        try:


            FieldLST_ARCDB(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def from_i_unknown(cls, int32_t p1):

        try:


            _return_val = WrapARCDB(FromIUnknown_ARCDB(get_p_geo(), &p1))
            return _return_val
        finally:
            pass


    def get_ipj(self, WrapIPJ p2):

        try:


            GetIPJ_ARCDB(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def exist_field(self, const char* p2):

        try:


            _return_val = iExistField_ARCDB(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def get_i_unknown(self):

        try:


            _return_val = iGetIUnknown_ARCDB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def import_chem_database_wizard(self, const char* p2, int32_t p3):

        try:


            _return_val = iImportChemDatabaseWizard_ARCDB(get_p_geo(), &self.handle, p2, &p3)
            return _return_val
        finally:
            pass

    @classmethod
    def sel_tbl_ex_gui(cls, int32_t p1):

        try:


            _return_val = WrapARCDB(SelTblExGUI_ARCDB(get_p_geo(), &p1))
            return (_return_val, p1)
        finally:
            pass

    @classmethod
    def sel_tbl_gui(cls):

        try:


            _return_val = WrapARCDB(SelTblGUI_ARCDB(get_p_geo()))
            return _return_val
        finally:
            pass

    pass



cdef class WrapARCDH:
    




    @classmethod
    def close_project(cls):

        try:


            CloseProject_ARCDH(get_p_geo())
            
        finally:
            pass

    @classmethod
    def set_project(cls, const char* p1, const char* p2):

        try:


            SetProject_ARCDH(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def set_string_file_gdb(cls, const char* p1):

        try:


            SetStringFileGDB_ARCDH(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def stop_editing_string_file_gdb(cls):

        try:


            StopEditingStringFileGDB_ARCDH(get_p_geo())
            
        finally:
            pass

    @classmethod
    def has_string_file_gdb_edits(cls):

        try:


            _return_val = iHasStringFileGDBEdits_ARCDH(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def geostrings_extension_available(cls):

        try:


            _return_val = iGeostringsExtensionAvailable_ARCDH(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def get_current_string_file_gdb(cls, const char* p1):
        cdef int32_t p2 = 4*1040
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*1040)

            strcpy(cp1, p1)

            GetCurrentStringFileGDB_ARCDH(get_p_geo(), cp1, &p2)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def is_valid_fgdb_file_name(cls, const char* p1):

        try:


            _return_val = iIsValidFGDBFileName_ARCDH(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def is_valid_feature_class_name(cls, const char* p1):

        try:


            _return_val = iIsValidFeatureClassName_ARCDH(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def s_prompt_for_esri_symbol(cls, HWND p1, const char* p2, int32_t p3, const char* p4, int32_t p6, int32_t p7):
        cdef int32_t p5 = 4*16384
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*16384)

            strcpy(cp4, p4)

            sPromptForESRISymbol_ARCDH(get_p_geo(), p1, p2, &p3, cp4, &p5, &p6, &p7)
            return (cp4, p6, p7)
        finally:
            if cp4: free(cp4)


    pass



cdef class WrapARCMAP:
    




    @classmethod
    def change_size(cls, double p1, double p2):

        try:


            ChangeSize_ARCMAP(get_p_geo(), &p1, &p2)
            
        finally:
            pass

    @classmethod
    def display_in_3d_view(cls, const char* p1):

        try:


            DisplayIn3DView_ARCMAP(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def export_feature_layer_by_name_to_3d_file(cls, const char* p1, const char* p2, const char* p3, const char* p4):

        try:


            ExportFeatureLayerByNameTo3DFile_ARCMAP(get_p_geo(), p1, p2, p3, p4)
            
        finally:
            pass

    @classmethod
    def export_selected_feature_layer_to_3d_file(cls, const char* p1):

        try:


            ExportSelectedFeatureLayerTo3DFile_ARCMAP(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def get_current_document_info(cls, const char* p1, const char* p2, const char* p3):
        cdef int32_t p4 = 4*1040
        cdef char* cp1 = NULL
        cdef char* cp2 = NULL
        cdef char* cp3 = NULL

        try:
            cp1 = <char*>malloc(4*1040)
            cp2 = <char*>malloc(4*1040)
            cp3 = <char*>malloc(4*1040)

            strcpy(cp1, p1)
            strcpy(cp2, p2)
            strcpy(cp3, p3)

            GetCurrentDocumentInfo_ARCMAP(get_p_geo(), cp1, cp2, cp3, &p4)
            return (cp1, cp2, cp3)
        finally:
            if cp1: free(cp1)
            if cp2: free(cp2)
            if cp3: free(cp3)


    @classmethod
    def get_selected_layer_info(cls, int32_t p1, const char* p2, const char* p3):
        cdef int32_t p4 = 4*1040
        cdef char* cp2 = NULL
        cdef char* cp3 = NULL

        try:
            cp2 = <char*>malloc(4*1040)
            cp3 = <char*>malloc(4*1040)

            strcpy(cp2, p2)
            strcpy(cp3, p3)

            GetSelectedLayerInfo_ARCMAP(get_p_geo(), &p1, cp2, cp3, &p4)
            return (cp2, cp3)
        finally:
            if cp2: free(cp2)
            if cp3: free(cp3)


    @classmethod
    def get_number_of_selected_layers(cls):

        try:


            _return_val = iGetNumberOfSelectedLayers_ARCMAP(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def load_map(cls, const char* p1, const char* p2, const char* p3, int32_t p4):

        try:


            _return_val = iLoadMAP_ARCMAP(get_p_geo(), p1, p2, p3, &p4)
            return _return_val
        finally:
            pass

    @classmethod
    def load_map_ex(cls, const char* p1, const char* p2, const char* p3, const char* p4, int32_t p5):

        try:


            _return_val = iLoadMAPEx_ARCMAP(get_p_geo(), p1, p2, p3, p4, &p5)
            return _return_val
        finally:
            pass

    @classmethod
    def load_shape(cls, const char* p1, int32_t p2):

        try:


            _return_val = iLoadShape_ARCMAP(get_p_geo(), p1, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def load_spf(cls, const char* p1, int32_t p2):

        try:


            _return_val = iLoadSPF_ARCMAP(get_p_geo(), p1, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def load_lyr(cls, const char* p1):

        try:


            LoadLYR_ARCMAP(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def load_map(cls, const char* p1, const char* p2, const char* p3, const char* p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            LoadMap_ARCMAP(get_p_geo(), p1, p2, p3, p4, &p5, &p6, &p7)
            
        finally:
            pass

    @classmethod
    def load_map_view(cls, const char* p1, const char* p2, const char* p3, int32_t p4):

        try:


            LoadMapView_ARCMAP(get_p_geo(), p1, p2, p3, &p4)
            
        finally:
            pass

    @classmethod
    def load_raster(cls, const char* p1):

        try:


            LoadRaster_ARCMAP(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def load_shape(cls, const char* p1, const char* p2, const char* p3):

        try:


            LoadShape_ARCMAP(get_p_geo(), p1, p2, p3)
            
        finally:
            pass

    @classmethod
    def map_view_to_shape(cls, const char* p1, const char* p2, const char* p3, WrapLST p4):

        try:


            MapViewToShape_ARCMAP(get_p_geo(), p1, p2, p3, &p4.handle)
            
        finally:
            pass

    @classmethod
    def query_size(cls, double p1, double p2):

        try:


            QuerySize_ARCMAP(get_p_geo(), &p1, &p2)
            return (p1, p2)
        finally:
            pass

    @classmethod
    def show_layer_by_name_in_3d(cls, const char* p1, const char* p2, const char* p3):

        try:


            ShowLayerByNameIn3D_ARCMAP(get_p_geo(), p1, p2, p3)
            
        finally:
            pass

    @classmethod
    def show_selected_layers_in_3d(cls):

        try:


            ShowSelectedLayersIn3D_ARCMAP(get_p_geo())
            
        finally:
            pass

    @classmethod
    def get_ipj_for_predefined_esri_gcs(cls, WrapIPJ p1, int32_t p2):

        try:


            GetIPJForPredefinedEsriGCS_ARCMAP(get_p_geo(), &p1.handle, &p2)
            
        finally:
            pass

    @classmethod
    def get_ipj_for_predefined_esri_pcs(cls, WrapIPJ p1, int32_t p2):

        try:


            GetIPJForPredefinedEsriPCS_ARCMAP(get_p_geo(), &p1.handle, &p2)
            
        finally:
            pass

    pass



cdef class WrapARCSYS:
    




    @classmethod
    def get_browse_loc(cls, const char* p1):
        cdef int32_t p2 = 4*1040
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*1040)

            strcpy(cp1, p1)

            IGetBrowseLoc_ARCSYS(get_p_geo(), cp1, &p2)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def get_current_doc(cls, const char* p1):
        cdef int32_t p2 = 4*1040
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*1040)

            strcpy(cp1, p1)

            IGetCurrentDoc_ARCSYS(get_p_geo(), cp1, &p2)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def set_browse_loc(cls, const char* p1):

        try:


            SetBrowseLoc_ARCSYS(get_p_geo(), p1)
            
        finally:
            pass

    pass



cdef class WrapBIGRID:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_BIGRID(get_p_geo(), &self.handle)





    def clear(self):

        try:


            _Clear_BIGRID(get_p_geo(), &self.handle)
            
        finally:
            pass

    @classmethod
    def create(cls):

        try:


            _return_val = WrapBIGRID(Create_BIGRID(get_p_geo()))
            return _return_val
        finally:
            pass




    def load_parms(self, const char* p2):

        try:


            _return_val = iLoadParms_BIGRID(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def load_warp(self, const char* p2, const char* p3, const char* p4):

        try:


            _return_val = iLoadWarp_BIGRID(get_p_geo(), &self.handle, p2, p3, p4)
            return _return_val
        finally:
            pass


    def run(self, const char* p2, WrapDAT p3, WrapDAT p4):

        try:


            Run_BIGRID(get_p_geo(), &self.handle, p2, &p3.handle, &p4.handle)
            
        finally:
            pass


    def run2(self, const char* p2, WrapDAT p3, WrapDAT p4, WrapIPJ p5):

        try:


            Run2_BIGRID(get_p_geo(), &self.handle, p2, &p3.handle, &p4.handle, &p5.handle)
            
        finally:
            pass


    def save_parms(self, const char* p2):

        try:


            SaveParms_BIGRID(get_p_geo(), &self.handle, p2)
            
        finally:
            pass

    pass



cdef class WrapCHIMERA:
    




    @classmethod
    def bar_plot(cls, WrapMVIEW p1, const char* p2, const char* p3, WrapVV p4, WrapVV p5, WrapVV p6, WrapVV p7, int32_t p8, int32_t p9, double p10, double p11):

        try:


            BarPlot_CHIMERA(get_p_geo(), &p1.handle, p2, p3, &p4.handle, &p5.handle, &p6.handle, &p7.handle, &p8, &p9, &p10, &p11)
            
        finally:
            pass

    @classmethod
    def categorize_by_value(cls, WrapVV p1, WrapVV p2, WrapVV p3):

        try:


            CategorizeByValue_CHIMERA(get_p_geo(), &p1.handle, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def categorize_by_value_det_limit(cls, WrapVV p1, WrapVV p2, double p3, WrapVV p4):

        try:


            CategorizeByValueDetLimit_CHIMERA(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4.handle)
            
        finally:
            pass

    @classmethod
    def clip_to_detect_limit(cls, WrapVV p1, double p2, int32_t p3):

        try:


            ClipToDetectLimit_CHIMERA(get_p_geo(), &p1.handle, &p2, &p3)
            
        finally:
            pass

    @classmethod
    def draw_circle_offset_markers(cls, WrapMVIEW p1, WrapVV p2, WrapVV p3, WrapVV p4, WrapVV p5, double p6):

        try:


            DrawCircleOffsetMarkers_CHIMERA(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5.handle, &p6)
            
        finally:
            pass

    @classmethod
    def draw_rectangle_offset_markers(cls, WrapMVIEW p1, WrapVV p2, WrapVV p3, WrapVV p4, WrapVV p5, double p6, double p7, double p8):

        try:


            DrawRectangleOffsetMarkers_CHIMERA(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5.handle, &p6, &p7, &p8)
            
        finally:
            pass

    @classmethod
    def duplicate_chem(cls, WrapMVIEW p1, WrapVV p2, int32_t p3, double p4, int32_t p5, WrapVV p6, const char* p7, const char* p8, double p9, double p10, double p11, double p12):

        try:


            DuplicateChem_CHIMERA(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5, &p6.handle, p7, p8, &p9, &p10, &p11, &p12)
            
        finally:
            pass

    @classmethod
    def duplicate_chem_view(cls, WrapMAP p1, const char* p2, const char* p3, WrapIPJ p4, WrapVV p5, int32_t p6, double p7, int32_t p8, WrapVV p9, const char* p10, const char* p11, WrapVV p12, WrapVV p13, WrapVV p14, WrapDB p15, double p16, double p17):

        try:


            DuplicateChemView_CHIMERA(get_p_geo(), &p1.handle, p2, p3, &p4.handle, &p5.handle, &p6, &p7, &p8, &p9.handle, p10, p11, &p12.handle, &p13.handle, &p14.handle, &p15.handle, &p16, &p17)
            return (p16, p17)
        finally:
            pass

    @classmethod
    def get_expression_data_vv(cls, WrapDB p1, int32_t p2, const char* p3, const char* p4, const char* p5, WrapVV p6):

        try:


            GetExpressionDataVV_CHIMERA(get_p_geo(), &p1.handle, &p2, p3, p4, p5, &p6.handle)
            
        finally:
            pass

    @classmethod
    def get_lithogeochem_data(cls, WrapDB p1, WrapLST p2, int32_t p3, WrapVV p4, int32_t p5, WrapVV p6, int32_t p7, WrapVV p8, WrapVV p9, WrapVV p10, WrapVV p11, WrapVV p12, WrapVV p13, WrapVV p14):

        try:


            GetLithogeochemData_CHIMERA(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4.handle, &p5, &p6.handle, &p7, &p8.handle, &p9.handle, &p10.handle, &p11.handle, &p12.handle, &p13.handle, &p14.handle)
            
        finally:
            pass

    @classmethod
    def get_transform(cls, WrapDB p1, const char* p2, int32_t p3, int32_t p4, double p5):

        try:


            GetTransform_CHIMERA(get_p_geo(), &p1.handle, p2, &p3, &p4, &p5)
            return (p4, p5)
        finally:
            pass

    @classmethod
    def is_acquire_chan(cls, const char* p1, const char* p2, const char* p4, double p6, int32_t p7):
        cdef int32_t p3 = 4*64
        cdef int32_t p5 = 4*64
        cdef char* cp2 = NULL
        cdef char* cp4 = NULL

        try:
            cp2 = <char*>malloc(4*64)
            cp4 = <char*>malloc(4*64)

            strcpy(cp2, p2)
            strcpy(cp4, p4)

            _return_val = iIsAcquireChan_CHIMERA(get_p_geo(), p1, cp2, &p3, cp4, &p5, &p6, &p7)
            return (_return_val, cp2, cp4, p6, p7)
        finally:
            if cp2: free(cp2)
            if cp4: free(cp4)


    @classmethod
    def is_element(cls, const char* p1, int32_t p2):

        try:


            _return_val = iIsElement_CHIMERA(get_p_geo(), p1, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def launch_histogram(cls, const char* p1, const char* p2):

        try:


            LaunchHistogram_CHIMERA(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def launch_probability(cls, const char* p1, const char* p2):

        try:


            LaunchProbability_CHIMERA(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def launch_scatter(cls, const char* p1):

        try:


            LaunchScatter_CHIMERA(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def launch_triplot(cls, const char* p1):

        try:


            LaunchTriplot_CHIMERA(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def mask_chan_lst(cls, WrapDB p1, WrapLST p2):

        try:


            MaskChanLST_CHIMERA(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def ordered_channel_lst(cls, WrapDB p1, WrapLST p2):

        try:


            OrderedChannelLST_CHIMERA(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def pie_plot(cls, WrapMVIEW p1, const char* p2, const char* p3, WrapVV p4, WrapVV p5, WrapVV p6, WrapVV p7, int32_t p8, int32_t p9, double p10, double p11):

        try:


            PiePlot_CHIMERA(get_p_geo(), &p1.handle, p2, p3, &p4.handle, &p5.handle, &p6.handle, &p7.handle, &p8, &p9, &p10, &p11)
            
        finally:
            pass

    @classmethod
    def pie_plot2(cls, WrapMVIEW p1, const char* p2, const char* p3, WrapVV p4, WrapVV p5, WrapVV p6, WrapVV p7, int32_t p8, int32_t p9, double p10, double p11, double p12):

        try:


            PiePlot2_CHIMERA(get_p_geo(), &p1.handle, p2, p3, &p4.handle, &p5.handle, &p6.handle, &p7.handle, &p8, &p9, &p10, &p11, &p12)
            
        finally:
            pass

    @classmethod
    def plot_string_classified_symbols_legend_from_class_file(cls, WrapMVIEW p1, const char* p2, double p3, double p4, double p5, const char* p6, WrapVV p7):

        try:


            PlotStringClassifiedSymbolsLegendFromClassFile_CHIMERA(get_p_geo(), &p1.handle, p2, &p3, &p4, &p5, p6, &p7.handle)
            
        finally:
            pass

    @classmethod
    def atomic_weight(cls, const char* p1):

        try:


            _return_val = rAtomicWeight_CHIMERA(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def rose_plot(cls, WrapMVIEW p1, const char* p2, const char* p3, WrapVV p4, WrapVV p5, WrapVV p6, WrapVV p7, int32_t p8, int32_t p9, double p10):

        try:


            RosePlot_CHIMERA(get_p_geo(), &p1.handle, p2, p3, &p4.handle, &p5.handle, &p6.handle, &p7.handle, &p8, &p9, &p10)
            
        finally:
            pass

    @classmethod
    def rose_plot2(cls, WrapMVIEW p1, const char* p2, const char* p3, WrapVV p4, WrapVV p5, WrapVV p6, WrapVV p7, int32_t p8, int32_t p9, double p10, double p11):

        try:


            RosePlot2_CHIMERA(get_p_geo(), &p1.handle, p2, p3, &p4.handle, &p5.handle, &p6.handle, &p7.handle, &p8, &p9, &p10, &p11)
            
        finally:
            pass

    @classmethod
    def scatter2(cls, WrapMVIEW p1, const char* p2, double p3, double p4, double p5, double p6, WrapVV p7, WrapVV p8, const char* p9, WrapVV p10, WrapVV p11, WrapVV p12, int32_t p13, const char* p14, const char* p15, const char* p16, const char* p17, double p18, double p19, double p20, double p21, double p22, double p23, double p24, double p25, int32_t p26, int32_t p27, int32_t p28, int32_t p29, int32_t p30, int32_t p31):

        try:


            Scatter2_CHIMERA(get_p_geo(), &p1.handle, p2, &p3, &p4, &p5, &p6, &p7.handle, &p8.handle, p9, &p10.handle, &p11.handle, &p12.handle, &p13, p14, p15, p16, p17, &p18, &p19, &p20, &p21, &p22, &p23, &p24, &p25, &p26, &p27, &p28, &p29, &p30, &p31)
            
        finally:
            pass

    @classmethod
    def fixed_symbol_scatter_plot(cls, WrapMVIEW p1, const char* p2, double p3, double p4, double p5, double p6, WrapVV p7, WrapVV p8, WrapVV p9, int32_t p10, const char* p11, int32_t p12, double p13, double p14, int32_t p15, int32_t p16, WrapDB p17, WrapVV p18, WrapVV p19, int32_t p20, const char* p21, const char* p22, const char* p23, const char* p24, double p25, double p26, double p27, double p28, int32_t p29, int32_t p30, const char* p31):

        try:


            FixedSymbolScatterPlot_CHIMERA(get_p_geo(), &p1.handle, p2, &p3, &p4, &p5, &p6, &p7.handle, &p8.handle, &p9.handle, &p10, p11, &p12, &p13, &p14, &p15, &p16, &p17.handle, &p18.handle, &p19.handle, &p20, p21, p22, p23, p24, &p25, &p26, &p27, &p28, &p29, &p30, p31)
            
        finally:
            pass

    @classmethod
    def zone_coloured_scatter_plot(cls, WrapMVIEW p1, const char* p2, double p3, double p4, double p5, double p6, WrapVV p7, WrapVV p8, WrapVV p9, int32_t p10, WrapVV p11, const char* p12, const char* p13, int32_t p14, double p15, double p16, int32_t p17, int32_t p18, int32_t p19, WrapDB p20, WrapVV p21, WrapVV p22, int32_t p23, const char* p24, const char* p25, const char* p26, const char* p27, double p28, double p29, double p30, double p31, int32_t p32, int32_t p33, const char* p34):

        try:


            ZoneColouredScatterPlot_CHIMERA(get_p_geo(), &p1.handle, p2, &p3, &p4, &p5, &p6, &p7.handle, &p8.handle, &p9.handle, &p10, &p11.handle, p12, p13, &p14, &p15, &p16, &p17, &p18, &p19, &p20.handle, &p21.handle, &p22.handle, &p23, p24, p25, p26, p27, &p28, &p29, &p30, &p31, &p32, &p33, p34)
            
        finally:
            pass

    @classmethod
    def string_classified_scatter_plot(cls, WrapMVIEW p1, const char* p2, double p3, double p4, double p5, double p6, WrapVV p7, WrapVV p8, WrapVV p9, int32_t p10, WrapVV p11, const char* p12, double p13, WrapDB p14, WrapVV p15, WrapVV p16, int32_t p17, const char* p18, const char* p19, const char* p20, const char* p21, double p22, double p23, double p24, double p25, int32_t p26, int32_t p27, const char* p28):

        try:


            StringClassifiedScatterPlot_CHIMERA(get_p_geo(), &p1.handle, p2, &p3, &p4, &p5, &p6, &p7.handle, &p8.handle, &p9.handle, &p10, &p11.handle, p12, &p13, &p14.handle, &p15.handle, &p16.handle, &p17, p18, p19, p20, p21, &p22, &p23, &p24, &p25, &p26, &p27, p28)
            
        finally:
            pass

    @classmethod
    def set_lithogeochem_data(cls, WrapDB p1, WrapLST p2, WrapVV p3, WrapVV p4, WrapVV p5, WrapVV p6, WrapVV p7, WrapVV p8, WrapVV p9, WrapVV p10):

        try:


            SetLithogeochemData_CHIMERA(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5.handle, &p6.handle, &p7.handle, &p8.handle, &p9.handle, &p10.handle)
            
        finally:
            pass

    @classmethod
    def stacked_bar_plot(cls, WrapMVIEW p1, const char* p2, const char* p3, WrapVV p4, WrapVV p5, WrapVV p6, WrapVV p7, int32_t p8, int32_t p9, double p10, double p11):

        try:


            StackedBarPlot_CHIMERA(get_p_geo(), &p1.handle, p2, p3, &p4.handle, &p5.handle, &p6.handle, &p7.handle, &p8, &p9, &p10, &p11)
            
        finally:
            pass

    @classmethod
    def standard(cls, WrapMVIEW p1, WrapVV p2, int32_t p3, double p4, double p5, double p6, const char* p7, const char* p8, double p9, double p10, double p11, double p12):

        try:


            Standard_CHIMERA(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5, &p6, p7, p8, &p9, &p10, &p11, &p12)
            
        finally:
            pass

    @classmethod
    def standard_view(cls, WrapMAP p1, const char* p2, const char* p3, WrapIPJ p4, WrapVV p5, int32_t p6, double p7, double p8, double p9, const char* p10, const char* p11, double p12, WrapVV p13, WrapVV p14, WrapVV p15, WrapDB p16, double p17, double p18):

        try:


            StandardView_CHIMERA(get_p_geo(), &p1.handle, p2, p3, &p4.handle, &p5.handle, &p6, &p7, &p8, &p9, p10, p11, &p12, &p13.handle, &p14.handle, &p15.handle, &p16.handle, &p17, &p18)
            return (p17, p18)
        finally:
            pass

    @classmethod
    def tri_plot2(cls, WrapMVIEW p1, const char* p2, double p3, double p4, double p5, double p6, WrapVV p7, WrapVV p8, WrapVV p9, WrapVV p10, const char* p11, WrapVV p12, WrapVV p13, WrapVV p14, const char* p15, const char* p16, const char* p17, double p18, double p19, double p20, double p21, double p22, double p23, int32_t p24, int32_t p25, int32_t p26, int32_t p27, int32_t p28, int32_t p29, int32_t p30, double p31, double p32):

        try:


            TriPlot2_CHIMERA(get_p_geo(), &p1.handle, p2, &p3, &p4, &p5, &p6, &p7.handle, &p8.handle, &p9.handle, &p10.handle, p11, &p12.handle, &p13.handle, &p14.handle, p15, p16, p17, &p18, &p19, &p20, &p21, &p22, &p23, &p24, &p25, &p26, &p27, &p28, &p29, &p30, &p31, &p32)
            
        finally:
            pass

    @classmethod
    def fixed_symbol_tri_plot(cls, WrapMVIEW p1, const char* p2, double p3, double p4, double p5, WrapVV p6, WrapVV p7, WrapVV p8, WrapVV p9, int32_t p10, const char* p11, int32_t p12, double p13, double p14, int32_t p15, int32_t p16, WrapDB p17, WrapVV p18, WrapVV p19, const char* p20, const char* p21, const char* p22, int32_t p23, double p24, double p25, const char* p26):

        try:


            FixedSymbolTriPlot_CHIMERA(get_p_geo(), &p1.handle, p2, &p3, &p4, &p5, &p6.handle, &p7.handle, &p8.handle, &p9.handle, &p10, p11, &p12, &p13, &p14, &p15, &p16, &p17.handle, &p18.handle, &p19.handle, p20, p21, p22, &p23, &p24, &p25, p26)
            
        finally:
            pass

    @classmethod
    def zone_coloured_tri_plot(cls, WrapMVIEW p1, const char* p2, double p3, double p4, double p5, WrapVV p6, WrapVV p7, WrapVV p8, WrapVV p9, int32_t p10, WrapVV p11, const char* p12, const char* p13, int32_t p14, double p15, double p16, int32_t p17, int32_t p18, int32_t p19, WrapDB p20, WrapVV p21, WrapVV p22, const char* p23, const char* p24, const char* p25, int32_t p26, double p27, double p28, const char* p29):

        try:


            ZoneColouredTriPlot_CHIMERA(get_p_geo(), &p1.handle, p2, &p3, &p4, &p5, &p6.handle, &p7.handle, &p8.handle, &p9.handle, &p10, &p11.handle, p12, p13, &p14, &p15, &p16, &p17, &p18, &p19, &p20.handle, &p21.handle, &p22.handle, p23, p24, p25, &p26, &p27, &p28, p29)
            
        finally:
            pass

    @classmethod
    def string_classified_tri_plot(cls, WrapMVIEW p1, const char* p2, double p3, double p4, double p5, WrapVV p6, WrapVV p7, WrapVV p8, WrapVV p9, int32_t p10, WrapVV p11, const char* p12, double p13, WrapDB p14, WrapVV p15, WrapVV p16, const char* p17, const char* p18, const char* p19, int32_t p20, double p21, double p22, const char* p23):

        try:


            StringClassifiedTriPlot_CHIMERA(get_p_geo(), &p1.handle, p2, &p3, &p4, &p5, &p6.handle, &p7.handle, &p8.handle, &p9.handle, &p10, &p11.handle, p12, &p13, &p14.handle, &p15.handle, &p16.handle, p17, p18, p19, &p20, &p21, &p22, p23)
            
        finally:
            pass

    pass



cdef class WrapCOM:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_COM(get_p_geo(), &self.handle)




    @classmethod
    def create(cls, const char* p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            _return_val = WrapCOM(Create_COM(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6, &p7))
            return _return_val
        finally:
            pass

    @classmethod
    def create_no_terminate(cls, const char* p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            _return_val = WrapCOM(CreateNoTerminate_COM(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6, &p7))
            return _return_val
        finally:
            pass




    def read_line_no_terminate(self, const char* p2):
        cdef int32_t p3 = 4*16384
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*16384)

            strcpy(cp2, p2)

            _return_val = IiReadLineNoTerminate_COM(get_p_geo(), &self.handle, cp2, &p3)
            return (_return_val, cp2)
        finally:
            if cp2: free(cp2)



    def read_chars_no_terminate(self, const char* p2):
        cdef int32_t p3 = 4*16384
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*16384)

            strcpy(cp2, p2)

            _return_val = iReadCharsNoTerminate_COM(get_p_geo(), &self.handle, cp2, &p3)
            return (_return_val, cp2)
        finally:
            if cp2: free(cp2)



    def read_line(self, const char* p2):
        cdef int32_t p3 = 4*16384
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*16384)

            strcpy(cp2, p2)

            IReadLine_COM(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def write_chars_no_terminate(self, const char* p2):

        try:


            _return_val = iWriteCharsNoTerminate_COM(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def purge_comm(self):

        try:


            PurgeComm_COM(get_p_geo(), &self.handle)
            
        finally:
            pass


    def read_chars(self, const char* p2):
        cdef int32_t p3 = 4*16384
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*16384)

            strcpy(cp2, p2)

            ReadChars_COM(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def read_em61_lines_wa(self, int32_t p2, WrapWA p3):

        try:


            ReadEM61LinesWA_COM(get_p_geo(), &self.handle, &p2, &p3.handle)
            
        finally:
            pass


    def read_file2_wa(self, WrapWA p2):

        try:


            ReadFile2WA_COM(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def read_lines_wa(self, int32_t p2, WrapWA p3):

        try:


            ReadLinesWA_COM(get_p_geo(), &self.handle, &p2, &p3.handle)
            
        finally:
            pass


    def set_time_out(self, int32_t p2):

        try:


            SetTimeOut_COM(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def write_chars(self, const char* p2):

        try:


            WriteChars_COM(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def write_line(self, const char* p2):

        try:


            WriteLine_COM(get_p_geo(), &self.handle, p2)
            
        finally:
            pass

    pass



cdef class WrapCSYMB:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_CSYMB(get_p_geo(), &self.handle)





    def set_angle(self, double p2):

        try:


            _SetAngle_CSYMB(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_base(self, double p2):

        try:


            _SetBase_CSYMB(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_dynamic_col(self, int32_t p2):

        try:


            _SetDynamicCol_CSYMB(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_fixed(self, int32_t p2):

        try:


            _SetFixed_CSYMB(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_number(self, int32_t p2):

        try:


            _SetNumber_CSYMB(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_scale(self, double p2):

        try:


            _SetScale_CSYMB(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def add_data(self, WrapVV p2, WrapVV p3, WrapVV p4):

        try:


            AddData_CSYMB(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass

    @classmethod
    def create(cls, const char* p1):

        try:


            _return_val = WrapCSYMB(Create_CSYMB(get_p_geo(), p1))
            return _return_val
        finally:
            pass




    def get_itr(self, WrapITR p2):

        try:


            GetITR_CSYMB(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_font(self, const char* p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            SetFont_CSYMB(get_p_geo(), &self.handle, p2, &p3, &p4, &p5)
            
        finally:
            pass


    def set_static_col(self, int32_t p2, int32_t p3):

        try:


            SetStaticCol_CSYMB(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass

    pass



cdef class WrapDGW:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            App_Destroy_DGW(get_p_geo(), &self.handle)




    @classmethod
    def create(cls, const char* p1):

        try:


            _return_val = WrapDGW(App_Create_DGW(get_p_geo(), p1))
            return _return_val
        finally:
            pass




    def get_info_meta(self, int32_t p2, int32_t p3, WrapMETA p4, int32_t p5, int32_t p6):

        try:


            App_GetInfoMETA_DGW(get_p_geo(), &self.handle, &p2, &p3, &p4.handle, &p5, &p6)
            
        finally:
            pass


    def get_info_sys(self, int32_t p2, int32_t p3, const char* p4, const char* p5):

        try:


            App_GetInfoSYS_DGW(get_p_geo(), &self.handle, &p2, &p3, p4, p5)
            
        finally:
            pass


    def get_list(self, int32_t p2):

        try:


            _return_val = WrapLST(App_GetList_DGW(get_p_geo(), &self.handle, &p2))
            return _return_val
        finally:
            pass


    def gt_info(self, int32_t p2, int32_t p3, const char* p4):
        cdef int32_t p5 = 4*16384
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*16384)

            strcpy(cp4, p4)

            App_GtInfo_DGW(get_p_geo(), &self.handle, &p2, &p3, cp4, &p5)
            return cp4
        finally:
            if cp4: free(cp4)



    def run_dialogue(self):

        try:


            _return_val = App_iRunDialogue_DGW(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def set_info(self, int32_t p2, int32_t p3, const char* p4):

        try:


            App_SetInfo_DGW(get_p_geo(), &self.handle, &p2, &p3, p4)
            
        finally:
            pass


    def set_info_meta(self, int32_t p2, int32_t p3, WrapMETA p4, int32_t p5, int32_t p6):

        try:


            App_SetInfoMETA_DGW(get_p_geo(), &self.handle, &p2, &p3, &p4.handle, &p5, &p6)
            
        finally:
            pass


    def set_info_sys(self, int32_t p2, int32_t p3, const char* p4, const char* p5):

        try:


            App_SetInfoSYS_DGW(get_p_geo(), &self.handle, &p2, &p3, p4, p5)
            
        finally:
            pass


    def set_title(self, const char* p2):

        try:


            App_SetTitle_DGW(get_p_geo(), &self.handle, p2)
            
        finally:
            pass

    pass



cdef class WrapDH:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_DH(get_p_geo(), &self.handle)




# ArcGIS Target Functions



    @classmethod
    def is_esri(cls):

        try:


            _return_val = iIsESRI_DH(get_p_geo())
            return _return_val
        finally:
            pass


# Data processing/conversion methods




    def creat_chan_lst(self, WrapLST p2):

        try:


            CreatChanLST_DH(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def depth_data_lst(self, WrapLST p2):

        try:


            DepthDataLST_DH(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def from_to_data_lst(self, const char* p2, WrapLST p3):

        try:


            FromToDataLST_DH(get_p_geo(), &self.handle, p2, &p3.handle)
            
        finally:
            pass


    def get_geology_contacts(self, WrapLST p2, const char* p3, const char* p4, int32_t p5, double p6, WrapVV p7, WrapVV p8, WrapVV p9):

        try:


            GetGeologyContacts_DH(get_p_geo(), &self.handle, &p2.handle, p3, p4, &p5, &p6, &p7.handle, &p8.handle, &p9.handle)
            
        finally:
            pass


    def get_oriented_core_dip_dir(self, WrapLST p2, const char* p3, const char* p4, int32_t p5, const char* p6, const char* p7):

        try:


            GetOrientedCoreDipDir_DH(get_p_geo(), &self.handle, &p2.handle, p3, p4, &p5, p6, p7)
            
        finally:
            pass


    def get_unique_channel_items(self, const char* p2, int32_t p3, WrapVV p4):

        try:


            GetUniqueChannelItems_DH(get_p_geo(), &self.handle, p2, &p3, &p4.handle)
            
        finally:
            pass


    def get_unique_channel_items_from_collar(self, const char* p2, int32_t p3, WrapVV p4):

        try:


            GetUniqueChannelItemsFromCollar_DH(get_p_geo(), &self.handle, p2, &p3, &p4.handle)
            
        finally:
            pass


    def chan_type(self, const char* p2):

        try:


            _return_val = iChanType_DH(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def find_hole_intersection(self, int32_t p2, WrapIMG p3, double p4, double p5, double p6):

        try:


            _return_val = iFindHoleIntersection_DH(get_p_geo(), &self.handle, &p2, &p3.handle, &p4, &p5, &p6)
            return (_return_val, p4, p5, p6)
        finally:
            pass


    def get_chan_code_info(self, const char* p2, int32_t p3, const char* p4):
        cdef int32_t p5 = 4*64
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*64)

            strcpy(cp4, p4)

            IGetChanCodeInfo_DH(get_p_geo(), &self.handle, p2, &p3, cp4, &p5)
            return (p3, cp4)
        finally:
            if cp4: free(cp4)



    def grid_intersection(self, double p2, double p3, double p4, double p5, double p6, const char* p7, double p8, double p9, double p10):

        try:


            _return_val = iGridIntersection_DH(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, p7, &p8, &p9, &p10)
            return (_return_val, p8, p9, p10)
        finally:
            pass


    def litho_grid_3d(self, const char* p2, WrapTPAT p3, const char* p4, double p5, double p6, double p7, int32_t p8, WrapREG p9, int32_t p10):

        try:


            LithoGrid3D_DH(get_p_geo(), &self.handle, p2, &p3.handle, p4, &p5, &p6, &p7, &p8, &p9.handle, &p10)
            
        finally:
            pass


    def numeric_chan_lst(self, WrapLST p2):

        try:


            NumericChanLST_DH(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def numeric_from_to_data_lst(self, const char* p2, WrapLST p3):

        try:


            NumericFromToDataLST_DH(get_p_geo(), &self.handle, p2, &p3.handle)
            
        finally:
            pass


    def punch_grid_holes(self, WrapIMG p2, WrapVV p3, WrapVV p4, WrapVV p5, double p6):

        try:


            PunchGridHoles_DH(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle, &p5.handle, &p6)
            
        finally:
            pass


    def string_chan_lst(self, WrapLST p2):

        try:


            StringChanLST_DH(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def string_from_to_data_lst(self, const char* p2, WrapLST p3):

        try:


            StringFromToDataLST_DH(get_p_geo(), &self.handle, p2, &p3.handle)
            
        finally:
            pass


# Miscellaneous




    def h_assay_db(self, int32_t p2):

        try:


            _return_val = WrapDB(_hAssayDB_DH(get_p_geo(), &self.handle, &p2))
            return _return_val
        finally:
            pass


    def h_assay_symb(self, int32_t p2, int32_t p3):

        try:


            _return_val = _hAssaySymb_DH(get_p_geo(), &self.handle, &p2, &p3)
            return _return_val
        finally:
            pass


    def h_collar_db(self):

        try:


            _return_val = WrapDB(_hCollarDB_DH(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def h_collar_symb(self):

        try:


            _return_val = _hCollarSymb_DH(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def h_dip_az_survey_db(self):

        try:


            _return_val = WrapDB(_hDipAzSurveyDB_DH(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def h_dip_az_survey_symb(self, int32_t p2):

        try:


            _return_val = _hDipAzSurveySymb_DH(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def h_en_survey_db(self):

        try:


            _return_val = WrapDB(_hENSurveyDB_DH(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def h_en_survey_symb(self, int32_t p2):

        try:


            _return_val = _hENSurveySymb_DH(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def add_survey_table(self, int32_t p2):

        try:


            AddSurveyTable_DH(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def assay_hole_lst(self, int32_t p2, WrapLST p3):

        try:


            AssayHoleLST_DH(get_p_geo(), &self.handle, &p2, &p3.handle)
            
        finally:
            pass


    def assay_lst(self, WrapLST p2):

        try:


            AssayLST_DH(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def auto_select_holes(cls, int32_t p1):

        try:


            AutoSelectHoles_DH(get_p_geo(), &p1)
            
        finally:
            pass


    def clean(self):

        try:


            Clean_DH(get_p_geo(), &self.handle)
            
        finally:
            pass


    def composite_db(self, WrapDB p2, WrapDB p3, int32_t p4, int32_t p5, double p6, const char* p7, const char* p8, const char* p9, double p10, double p11, double p12, int32_t p13, const char* p14):

        try:


            CompositeDB_DH(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4, &p5, &p6, p7, p8, p9, &p10, &p11, &p12, &p13, p14)
            
        finally:
            pass


    def compute_hole_xyz(self, int32_t p2):

        try:


            ComputeHoleXYZ_DH(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def compute_sel_extent(self, double p2, double p3, double p4, double p5, double p6, double p7):

        try:


            ComputeSelExtent_DH(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            return (p2, p3, p4, p5, p6, p7)
        finally:
            pass


    def compute_xyz(self):

        try:


            ComputeXYZ_DH(get_p_geo(), &self.handle)
            
        finally:
            pass

    @classmethod
    def convert_old_line_names(cls, WrapDB p1, WrapLST p2):

        try:


            ConvertOldLineNames_DH(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def create(cls, const char* p1):

        try:


            _return_val = WrapDH(Create_DH(get_p_geo(), p1))
            return _return_val
        finally:
            pass


    def create_default_job(self, const char* p2, int32_t p3):

        try:


            CreateDefaultJob_DH(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass

    @classmethod
    def create_external(cls, const char* p1):

        try:


            _return_val = WrapDH(CreateExternal_DH(get_p_geo(), p1))
            return _return_val
        finally:
            pass

    @classmethod
    def current(cls):

        try:


            _return_val = WrapDH(Current_DH(get_p_geo()))
            return _return_val
        finally:
            pass

    @classmethod
    def datamine_to_csv(cls, const char* p1, const char* p2):

        try:


            DatamineToCSV_DH(get_p_geo(), p1, p2)
            
        finally:
            pass


    def delete_holes(self, WrapLST p2):

        try:


            DeleteHoles_DH(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass




    def export(self, const char* p2, int32_t p3):

        try:


            Export_DH(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass


    def export_geodatabase_lst(self, WrapLST p2, const char* p3, const char* p4, const char* p5, int32_t p7):
        cdef int32_t p6 = 4*1040
        cdef char* cp5 = NULL

        try:
            cp5 = <char*>malloc(4*1040)

            strcpy(cp5, p5)

            ExportGeodatabaseLST_DH(get_p_geo(), &self.handle, &p2.handle, p3, p4, cp5, &p6, &p7)
            return cp5
        finally:
            if cp5: free(cp5)



    def export_las(self, int32_t p2, int32_t p3, double p4, const char* p5):

        try:


            ExportLAS_DH(get_p_geo(), &self.handle, &p2, &p3, &p4, p5)
            
        finally:
            pass


    def export_lst(self, WrapLST p2, const char* p3, int32_t p4):

        try:


            ExportLST_DH(get_p_geo(), &self.handle, &p2.handle, p3, &p4)
            
        finally:
            pass


    def flush_select(self):

        try:


            FlushSelect_DH(get_p_geo(), &self.handle)
            
        finally:
            pass


    def get_databases_vv(self, WrapVV p2):

        try:


            GetDatabasesVV_DH(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_databases_sorted_vv(self, WrapVV p2):

        try:


            GetDatabasesSortedVV_DH(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_data_type(self, WrapDB p2, int32_t p3):

        try:


            GetDataType_DH(get_p_geo(), &self.handle, &p2.handle, &p3)
            return p3
        finally:
            pass


    def get_default_section(self, double p2, double p3, double p4, double p5, double p6):

        try:


            GetDefaultSection_DH(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6)
            return (p2, p3, p4, p5, p6)
        finally:
            pass


    def get_hole_group(self, int32_t p2, const char* p3):

        try:


            _return_val = GetHoleGroup_DH(get_p_geo(), &self.handle, &p2, p3)
            return _return_val
        finally:
            pass


    def get_hole_survey(self, int32_t p2, WrapVV p3, WrapVV p4, WrapVV p5, WrapVV p6):

        try:


            GetHoleSurvey_DH(get_p_geo(), &self.handle, &p2, &p3.handle, &p4.handle, &p5.handle, &p6.handle)
            
        finally:
            pass


    def get_ipj(self, WrapIPJ p2):

        try:


            GetIPJ_DH(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_map_names_vv(self, WrapVV p2):

        try:


            GetMapNamesVV_DH(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_map(self, int32_t p2):

        try:


            _return_val = WrapMAP(GetMap_DH(get_p_geo(), &self.handle, &p2))
            return _return_val
        finally:
            pass


    def get_num_maps(self):

        try:


            _return_val = GetNumMaps_DH(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_reg(self):

        try:


            _return_val = WrapREG(GetREG_DH(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def get_selected_holes_vv(self, WrapVV p2):

        try:


            GetSelectedHolesVV_DH(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def get_table_default_chan_lst(cls, WrapLST p1, int32_t p2):

        try:


            GetTableDefaultChanLST_DH(get_p_geo(), &p1.handle, &p2)
            
        finally:
            pass


    def hole_lst(self, WrapLST p2):

        try:


            HoleLST_DH(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def hole_lst2(self, WrapLST p2):

        try:


            HoleLST2_DH(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def add_hole(self, const char* p2):

        try:


            _return_val = iAddHole_DH(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def clean_will_delete_db(self):

        try:


            _return_val = iCleanWillDeleteDB_DH(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def compositing_tool_gui(self, WrapMAP p2, double p3, double p4, double p5):

        try:


            _return_val = iCompositingToolGUI_DH(get_p_geo(), &self.handle, &p2.handle, &p3, &p4, &p5)
            return _return_val
        finally:
            pass

    @classmethod
    def create_collar_table(cls, const char* p1, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*1040
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*1040)

            strcpy(cp3, p3)

            ICreateCollarTable_DH(get_p_geo(), p1, &p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)


    @classmethod
    def create_collar_table_dir(cls, const char* p1, const char* p2, int32_t p3, const char* p4):
        cdef int32_t p5 = 4*1040
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*1040)

            strcpy(cp4, p4)

            ICreateCollarTableDir_DH(get_p_geo(), p1, p2, &p3, cp4, &p5)
            return cp4
        finally:
            if cp4: free(cp4)



    def delete_will_delete_db(self, WrapLST p2):

        try:


            _return_val = iDeleteWillDeleteDB_DH(get_p_geo(), &self.handle, &p2.handle)
            return _return_val
        finally:
            pass


    def find_hole(self, const char* p2):

        try:


            _return_val = iFindHole_DH(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def get_collar_table_db(self, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            IGetCollarTableDB_DH(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def get_info(self, int32_t p2, const char* p3, const char* p4):
        cdef int32_t p5 = 4*1024
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*1024)

            strcpy(cp4, p4)

            IGetInfo_DH(get_p_geo(), &self.handle, &p2, p3, cp4, &p5)
            return cp4
        finally:
            if cp4: free(cp4)



    def get_project_name(self, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            IGetProjectName_DH(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def get_section_id(cls, double p1, double p2, double p3, const char* p4):
        cdef int32_t p5 = 4*1040
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*1040)

            strcpy(cp4, p4)

            IGetSectionID_DH(get_p_geo(), &p1, &p2, &p3, cp4, &p5)
            return cp4
        finally:
            if cp4: free(cp4)


    @classmethod
    def get_template_blob(cls, WrapDB p1, const char* p2, int32_t p3):

        try:


            _return_val = iGetTemplateBlob_DH(get_p_geo(), &p1.handle, p2, &p3)
            return (_return_val, p3)
        finally:
            pass

    @classmethod
    def get_template_info(cls, const char* p1, int32_t p2, const char* p3, const char* p5):
        cdef int32_t p4 = 4*1040
        cdef int32_t p6 = 4*1040
        cdef char* cp3 = NULL
        cdef char* cp5 = NULL

        try:
            cp3 = <char*>malloc(4*1040)
            cp5 = <char*>malloc(4*1040)

            strcpy(cp3, p3)
            strcpy(cp5, p5)

            IGetTemplateInfo_DH(get_p_geo(), p1, &p2, cp3, &p4, cp5, &p6)
            return (p2, cp3, cp5)
        finally:
            if cp3: free(cp3)
            if cp5: free(cp5)


    @classmethod
    def get_template_info_ex(cls, const char* p1, int32_t p2, const char* p3, const char* p5, WrapLST p7):
        cdef int32_t p4 = 4*1040
        cdef int32_t p6 = 4*1040
        cdef char* cp3 = NULL
        cdef char* cp5 = NULL

        try:
            cp3 = <char*>malloc(4*1040)
            cp5 = <char*>malloc(4*1040)

            strcpy(cp3, p3)
            strcpy(cp5, p5)

            IGetTemplateInfoEx_DH(get_p_geo(), p1, &p2, cp3, &p4, cp5, &p6, &p7.handle)
            return (p2, cp3, cp5)
        finally:
            if cp3: free(cp3)
            if cp5: free(cp5)



    def get_units(self, const char* p2, double p4):
        cdef int32_t p3 = 4*128
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*128)

            strcpy(cp2, p2)

            IGetUnits_DH(get_p_geo(), &self.handle, cp2, &p3, &p4)
            return (cp2, p4)
        finally:
            if cp2: free(cp2)


    @classmethod
    def have_current(cls):

        try:


            _return_val = iHaveCurrent_DH(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def have_current2(cls, const char* p1):
        cdef int32_t p2 = 4*1040
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*1040)

            strcpy(cp1, p1)

            _return_val = IiHaveCurrent2_DH(get_p_geo(), cp1, &p2)
            return (_return_val, cp1)
        finally:
            if cp1: free(cp1)



    def holes(self):

        try:


            _return_val = iHoles_DH(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def hole_select_from_list_gui(cls, WrapLST p1, WrapLST p2):

        try:


            _return_val = iHoleSelectFromListGUI_DH(get_p_geo(), &p1.handle, &p2.handle)
            return _return_val
        finally:
            pass


    def hole_selection_tool_gui(self):

        try:


            _return_val = iHoleSelectionToolGUI_DH(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def modify3d_gui(self, const char* p2, int32_t p3):

        try:


            _return_val = iModify3dGUI_DH(get_p_geo(), &self.handle, p2, &p3)
            return (_return_val, p3)
        finally:
            pass


    def edit_classification_table_file_gui(self, const char* p2, const char* p3, int32_t p5, int32_t p6):
        cdef int32_t p4 = 4*1040
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*1040)

            strcpy(cp3, p3)

            _return_val = iEditClassificationTableFileGUI_DH(get_p_geo(), &self.handle, p2, cp3, &p4, &p5, &p6)
            return (_return_val, cp3)
        finally:
            if cp3: free(cp3)



    def modify_crooked_section_holes_gui(self, const char* p2, int32_t p3):

        try:


            _return_val = iModifyCrookedSectionHolesGUI_DH(get_p_geo(), &self.handle, p2, &p3)
            return (_return_val, p3)
        finally:
            pass


    def modify_fence_gui(self, const char* p2, int32_t p3):

        try:


            _return_val = iModifyFenceGUI_DH(get_p_geo(), &self.handle, p2, &p3)
            return (_return_val, p3)
        finally:
            pass


    def modify_hole_traces_3dgui(self, const char* p2, int32_t p3):

        try:


            _return_val = iModifyHoleTraces3DGUI_DH(get_p_geo(), &self.handle, p2, &p3)
            return (_return_val, p3)
        finally:
            pass


    def modify_hole_traces_gui(self, const char* p2, int32_t p3):

        try:


            _return_val = iModifyHoleTracesGUI_DH(get_p_geo(), &self.handle, p2, &p3)
            return (_return_val, p3)
        finally:
            pass


    def modify_hole_traces_gui2(self, const char* p2, int32_t p3, int32_t p4):

        try:


            _return_val = iModifyHoleTracesGUI2_DH(get_p_geo(), &self.handle, p2, &p3, &p4)
            return (_return_val, p4)
        finally:
            pass


    def modify_plan_gui(self, const char* p2, int32_t p3):

        try:


            _return_val = iModifyPlanGUI_DH(get_p_geo(), &self.handle, p2, &p3)
            return (_return_val, p3)
        finally:
            pass


    def modify_plan_holes_gui(self, const char* p2, int32_t p3):

        try:


            _return_val = iModifyPlanHolesGUI_DH(get_p_geo(), &self.handle, p2, &p3)
            return (_return_val, p3)
        finally:
            pass

    @classmethod
    def modify_rock_codes_gui(cls, const char* p1):

        try:


            _return_val = iModifyRockCodesGUI_DH(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def modify_rock_codes_gui2(cls, WrapDB p1, const char* p2):

        try:


            _return_val = iModifyRockCodesGUI2_DH(get_p_geo(), &p1.handle, p2)
            return _return_val
        finally:
            pass


    def modify_section_gui(self, const char* p2, int32_t p3):

        try:


            _return_val = iModifySectionGUI_DH(get_p_geo(), &self.handle, p2, &p3)
            return (_return_val, p3)
        finally:
            pass


    def modify_section_holes_gui(self, const char* p2, int32_t p3):

        try:


            _return_val = iModifySectionHolesGUI_DH(get_p_geo(), &self.handle, p2, &p3)
            return (_return_val, p3)
        finally:
            pass


    def modify_stacked_section_gui(self, const char* p2, int32_t p3):

        try:


            _return_val = iModifyStackedSectionGUI_DH(get_p_geo(), &self.handle, p2, &p3)
            return (_return_val, p3)
        finally:
            pass


    def modify_strip_log_gui(self, const char* p2, int32_t p3):

        try:


            _return_val = iModifyStripLogGUI_DH(get_p_geo(), &self.handle, p2, &p3)
            return (_return_val, p3)
        finally:
            pass

    @classmethod
    def modify_structure_codes_gui(cls, const char* p1):

        try:


            _return_val = iModifyStructureCodesGUI_DH(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def modify_structure_codes_gui2(cls, WrapDB p1, const char* p2):

        try:


            _return_val = iModifyStructureCodesGUI2_DH(get_p_geo(), &p1.handle, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def import2(cls, const char* p1, WrapDB p2, int32_t p3, int32_t p4, const char* p5, int32_t p6, const char* p7):

        try:


            Import2_DH(get_p_geo(), p1, &p2.handle, &p3, &p4, p5, &p6, p7)
            
        finally:
            pass


    def import_las(self, const char* p2, const char* p3, double p4, int32_t p5, WrapWA p6):

        try:


            ImportLAS_DH(get_p_geo(), &self.handle, p2, p3, &p4, &p5, &p6.handle)
            
        finally:
            pass


    def num_assays(self):

        try:


            _return_val = iNumAssays_DH(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def num_selected_holes(self):

        try:


            _return_val = iNumSelectedHoles_DH(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def qa_dip_az_curvature_lst(self, WrapLST p2, double p3, WrapWA p4):

        try:


            _return_val = iQADipAzCurvatureLST_DH(get_p_geo(), &self.handle, &p2.handle, &p3, &p4.handle)
            return _return_val
        finally:
            pass


    def qa_dip_az_survey_lst(self, WrapLST p2, WrapWA p3):

        try:


            _return_val = iQADipAzSurveyLST_DH(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            return _return_val
        finally:
            pass


    def qa_east_north_curvature_lst(self, WrapLST p2, double p3, WrapWA p4):

        try:


            _return_val = iQAEastNorthCurvatureLST_DH(get_p_geo(), &self.handle, &p2.handle, &p3, &p4.handle)
            return _return_val
        finally:
            pass


    def qa_east_north_survey_lst(self, WrapLST p2, WrapWA p3):

        try:


            _return_val = iQAEastNorthSurveyLST_DH(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            return _return_val
        finally:
            pass


    def slice_selection_tool_gui(self, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11, double p12, double p13):

        try:


            _return_val = iSliceSelectionToolGUI_DH(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13)
            return (_return_val, p10, p11, p12, p13)
        finally:
            pass


    def update_survey_from_collar(self, int32_t p2):

        try:


            _return_val = iUpdateSurveyFromCollar_DH(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def load_data_parameters_ini(self, WrapDB p2, const char* p3):

        try:


            LoadDataParametersINI_DH(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass


    def load_plot_parameters(self, const char* p2, int32_t p3):

        try:


            LoadPlotParameters_DH(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass


    def load_select(self, const char* p2):

        try:


            LoadSelect_DH(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def mask_ply(self, WrapPLY p2, WrapIPJ p3, double p4, const char* p5, int32_t p6, int32_t p7):

        try:


            MaskPLY_DH(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4, p5, &p6, &p7)
            
        finally:
            pass

    @classmethod
    def open(cls, const char* p1):

        try:


            _return_val = WrapDH(Open_DH(get_p_geo(), p1))
            return _return_val
        finally:
            pass


    def open_job(self, const char* p2, int32_t p3):

        try:


            OpenJob_DH(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass


    def plot_hole_traces(self, WrapMAP p2, const char* p3):

        try:


            PlotHoleTraces_DH(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass


    def plot_hole_traces_3d(self, WrapMVIEW p2, const char* p3):

        try:


            PlotHoleTraces3D_DH(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass


    def plot_symbols_3d(self, WrapMVIEW p2, const char* p3):

        try:


            PlotSymbols3D_DH(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass


    def qa_collar(self, WrapWA p2):

        try:


            QACollar_DH(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def qa_collar_lst(self, WrapLST p2, WrapWA p3):

        try:


            QACollarLST_DH(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def qa_dip_az_curvature(self, WrapWA p2, double p3):

        try:


            QADipAzCurvature_DH(get_p_geo(), &self.handle, &p2.handle, &p3)
            
        finally:
            pass


    def qa_dip_az_curvature2(self, WrapWA p2, double p3, const char* p4):

        try:


            QADipAzCurvature2_DH(get_p_geo(), &self.handle, &p2.handle, &p3, p4)
            
        finally:
            pass


    def qa_dip_az_survey(self, WrapDB p2, WrapWA p3, int32_t p4, const char* p5):

        try:


            QADipAzSurvey_DH(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4, p5)
            
        finally:
            pass


    def qa_east_north_curvature(self, WrapWA p2, double p3):

        try:


            QAEastNorthCurvature_DH(get_p_geo(), &self.handle, &p2.handle, &p3)
            
        finally:
            pass


    def qa_east_north_curvature2(self, WrapWA p2, double p3, const char* p4):

        try:


            QAEastNorthCurvature2_DH(get_p_geo(), &self.handle, &p2.handle, &p3, p4)
            
        finally:
            pass


    def qa_east_north_survey(self, WrapDB p2, WrapWA p3, int32_t p4, const char* p5):

        try:


            QAEastNorthSurvey_DH(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4, p5)
            
        finally:
            pass


    def qa_from_to_data(self, WrapDB p2, WrapWA p3, int32_t p4, const char* p5):

        try:


            QAFromToData_DH(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4, p5)
            
        finally:
            pass


    def qa_point_data(self, WrapDB p2, WrapWA p3, int32_t p4, const char* p5):

        try:


            QAPointData_DH(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4, p5)
            
        finally:
            pass


    def qa_write_unregistered_holes(self, WrapDB p2, WrapWA p3):

        try:


            QAWriteUnregisteredHoles_DH(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def replot_holes(self, const char* p2, int32_t p3):

        try:


            ReplotHoles_DH(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass


    def plot_holes_on_section(self, const char* p2, int32_t p3, const char* p4):

        try:


            PlotHolesOnSection_DH(get_p_geo(), &self.handle, p2, &p3, p4)
            
        finally:
            pass


    def re_survey_east_north(self, const char* p2, WrapVV p3, WrapVV p4, WrapVV p5, WrapVV p6, double p7, double p8, double p9, double p10, double p11):

        try:


            ReSurveyEastNorth_DH(get_p_geo(), &self.handle, p2, &p3.handle, &p4.handle, &p5.handle, &p6.handle, &p7, &p8, &p9, &p10, &p11)
            return p11
        finally:
            pass


    def re_survey_pol_fit(self, const char* p2, WrapVV p3, WrapVV p4, WrapVV p5, double p6, double p7, double p8, double p9, double p10, double p11, int32_t p12, int32_t p13, WrapVV p14, WrapVV p15, WrapVV p16, WrapVV p17):

        try:


            ReSurveyPolFit_DH(get_p_geo(), &self.handle, p2, &p3.handle, &p4.handle, &p5.handle, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14.handle, &p15.handle, &p16.handle, &p17.handle)
            
        finally:
            pass


    def re_survey_rad_curve(self, const char* p2, WrapVV p3, WrapVV p4, WrapVV p5, double p6, double p7, double p8, double p9, double p10, double p11, int32_t p12, WrapVV p13, WrapVV p14, WrapVV p15, WrapVV p16):

        try:


            ReSurveyRadCurve_DH(get_p_geo(), &self.handle, p2, &p3.handle, &p4.handle, &p5.handle, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13.handle, &p14.handle, &p15.handle, &p16.handle)
            
        finally:
            pass


    def re_survey_straight(self, const char* p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, int32_t p11, WrapVV p12, WrapVV p13, WrapVV p14, WrapVV p15):

        try:


            ReSurveyStraight_DH(get_p_geo(), &self.handle, p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12.handle, &p13.handle, &p14.handle, &p15.handle)
            
        finally:
            pass


    def re_survey_straight_seg(self, const char* p2, WrapVV p3, WrapVV p4, WrapVV p5, double p6, double p7, double p8, double p9, double p10, double p11, int32_t p12, WrapVV p13, WrapVV p14, WrapVV p15, WrapVV p16):

        try:


            ReSurveyStraightSeg_DH(get_p_geo(), &self.handle, p2, &p3.handle, &p4.handle, &p5.handle, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13.handle, &p14.handle, &p15.handle, &p16.handle)
            
        finally:
            pass


    def save_data_parameters_ini(self, WrapDB p2, const char* p3):

        try:


            SaveDataParametersINI_DH(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass


    def save_job(self, const char* p2, int32_t p3):

        try:


            SaveJob_DH(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass


    def save_select(self, const char* p2):

        try:


            SaveSelect_DH(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def section_window_size_mm(self, double p2, double p3):

        try:


            SectionWindowSizeMM_DH(get_p_geo(), &self.handle, &p2, &p3)
            return (p2, p3)
        finally:
            pass


    def select_all_holes(self):

        try:


            SelectAllHoles_DH(get_p_geo(), &self.handle)
            
        finally:
            pass


    def select_holes(self, WrapVV p2, int32_t p3):

        try:


            SelectHoles_DH(get_p_geo(), &self.handle, &p2.handle, &p3)
            
        finally:
            pass


    def select_name(self, const char* p2, int32_t p3, int32_t p4):

        try:


            SelectName_DH(get_p_geo(), &self.handle, p2, &p3, &p4)
            
        finally:
            pass


    def select_ply(self, WrapPLY p2):

        try:


            SelectPLY_DH(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def select_ply2(self, WrapPLY p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            SelectPLY2_DH(get_p_geo(), &self.handle, &p2.handle, &p3, &p4, &p5)
            
        finally:
            pass


    def set_crooked_section_ipj(self, WrapIPJ p2):

        try:


            SetCrookedSectionIPJ_DH(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_current_view_name(self, const char* p2):

        try:


            SetCurrentViewName_DH(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def set_info(self, int32_t p2, const char* p3, const char* p4):

        try:


            SetInfo_DH(get_p_geo(), &self.handle, &p2, p3, p4)
            
        finally:
            pass


    def set_ipj(self, WrapIPJ p2):

        try:


            SetIPJ_DH(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_map(self, WrapMAP p2):

        try:


            SetMAP_DH(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_new_ipj(self, const char* p2):

        try:


            SetNewIPJ_DH(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def set_selected_holes_vv(self, WrapVV p2, int32_t p3):

        try:


            SetSelectedHolesVV_DH(get_p_geo(), &self.handle, &p2.handle, &p3)
            
        finally:
            pass

    @classmethod
    def set_template_blob(cls, WrapDB p1, const char* p2, int32_t p3):

        try:


            SetTemplateBlob_DH(get_p_geo(), &p1.handle, p2, &p3)
            
        finally:
            pass


    def significant_intersections_db(self, WrapDB p2, WrapDB p3, int32_t p4, const char* p5, double p6, double p7, double p8, double p9, double p10, double p11, double p12):

        try:


            SignificantIntersectionsDB_DH(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4, p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12)
            
        finally:
            pass


    def test_import_las(self, const char* p2, const char* p3, double p4, WrapWA p5, int32_t p6):

        try:


            TestImportLAS_DH(get_p_geo(), &self.handle, p2, p3, &p4, &p5.handle, &p6)
            return p6
        finally:
            pass


    def un_select_all_holes(self):

        try:


            UnSelectAllHoles_DH(get_p_geo(), &self.handle)
            
        finally:
            pass


    def un_selected_hole_lst(self, WrapLST p2):

        try:


            UnSelectedHoleLST_DH(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def update_collar_table(self):

        try:


            UpdateCollarTable_DH(get_p_geo(), &self.handle)
            
        finally:
            pass


    def update_hole_extent(self, int32_t p2):

        try:


            UpdateHoleExtent_DH(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def wholeplot(self, const char* p2, int32_t p3):

        try:


            Wholeplot_DH(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass


    def surface_intersections(self, WrapDB p2, const char* p3, int32_t p4):

        try:


            SurfaceIntersections_DH(get_p_geo(), &self.handle, &p2.handle, p3, &p4)
            
        finally:
            pass


    pass



cdef class WrapDMPPLY:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_DMPPLY(get_p_geo(), &self.handle)





    def clear(self):

        try:


            _Clear_DMPPLY(get_p_geo(), &self.handle)
            
        finally:
            pass


    def copy(self, WrapDMPPLY p2):

        try:


            Copy_DMPPLY(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def create(cls):

        try:


            _return_val = WrapDMPPLY(Create_DMPPLY(get_p_geo()))
            return _return_val
        finally:
            pass




    def get_azimuth(self, int32_t p2, double p3):

        try:


            GetAzimuth_DMPPLY(get_p_geo(), &self.handle, &p2, &p3)
            return p3
        finally:
            pass


    def get_extents(self, int32_t p2, double p3, double p4, double p5, double p6, double p7):

        try:


            GetExtents_DMPPLY(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            return (p3, p4, p5, p6, p7)
        finally:
            pass


    def get_joins(self, int32_t p2, WrapVV p3):

        try:


            GetJoins_DMPPLY(get_p_geo(), &self.handle, &p2, &p3.handle)
            
        finally:
            pass


    def get_normal_vectors(self, int32_t p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11):

        try:


            GetNormalVectors_DMPPLY(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11)
            return (p3, p4, p5, p6, p7, p8, p9, p10, p11)
        finally:
            pass


    def get_poly(self, int32_t p2, WrapVV p3, WrapVV p4, WrapVV p5):

        try:


            GetPoly_DMPPLY(get_p_geo(), &self.handle, &p2, &p3.handle, &p4.handle, &p5.handle)
            
        finally:
            pass


    def get_swing(self, int32_t p2, double p3):

        try:


            GetSwing_DMPPLY(get_p_geo(), &self.handle, &p2, &p3)
            return p3
        finally:
            pass


    def get_vertex(self, int32_t p2, int32_t p3, double p4, double p5, double p6):

        try:


            GetVertex_DMPPLY(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6)
            return (p4, p5, p6)
        finally:
            pass


    def num_joins(self):

        try:


            _return_val = iNumJoins_DMPPLY(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def num_polys(self):

        try:


            _return_val = iNumPolys_DMPPLY(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def num_vertices(self, int32_t p2):

        try:


            _return_val = iNumVertices_DMPPLY(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def load(self, const char* p2):

        try:


            Load_DMPPLY(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def move_vertex(self, int32_t p2, int32_t p3, double p4, double p5, double p6):

        try:


            MoveVertex_DMPPLY(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass


    def project_poly(self, int32_t p2, double p3, double p4, double p5, double p6, double p7, WrapVV p8, WrapVV p9, WrapVV p10):

        try:


            ProjectPoly_DMPPLY(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8.handle, &p9.handle, &p10.handle)
            
        finally:
            pass


    def re_project_poly(self, int32_t p2, double p3, double p4, double p5, double p6, WrapVV p7, WrapVV p8, WrapVV p9, WrapVV p10, WrapVV p11):

        try:


            ReProjectPoly_DMPPLY(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7.handle, &p8.handle, &p9.handle, &p10.handle, &p11.handle)
            
        finally:
            pass


    def save(self, const char* p2):

        try:


            Save_DMPPLY(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def set_poly(self, int32_t p2, WrapVV p3, WrapVV p4, WrapVV p5):

        try:


            SetPoly_DMPPLY(get_p_geo(), &self.handle, &p2, &p3.handle, &p4.handle, &p5.handle)
            
        finally:
            pass

    pass



cdef class WrapDOCU:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_DOCU(get_p_geo(), &self.handle)





    def copy(self, WrapDOCU p2):

        try:


            Copy_DOCU(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def create(cls):

        try:


            _return_val = WrapDOCU(Create_DOCU(get_p_geo()))
            return _return_val
        finally:
            pass

    @classmethod
    def create_s(cls, WrapBF p1):

        try:


            _return_val = WrapDOCU(CreateS_DOCU(get_p_geo(), &p1.handle))
            return _return_val
        finally:
            pass




    def get_file(self, const char* p2):

        try:


            GetFile_DOCU(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def get_file_meta(self, const char* p2):

        try:


            GetFileMeta_DOCU(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def get_meta(self, WrapMETA p2):

        try:


            GetMETA_DOCU(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def doc_name(self, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            IDocName_DOCU(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def file_name(self, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            IFileName_DOCU(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def have_meta(self):

        try:


            _return_val = iHaveMETA_DOCU(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def is_reference(self):

        try:


            _return_val = iIsReference_DOCU(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def open(self, int32_t p2):

        try:


            Open_DOCU(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def serial(self, WrapBF p2):

        try:


            Serial_DOCU(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_file(self, const char* p2, const char* p3, const char* p4):

        try:


            SetFile_DOCU(get_p_geo(), &self.handle, p2, p3, p4)
            
        finally:
            pass


    def set_file_meta(self, const char* p2, const char* p3, const char* p4):

        try:


            SetFileMeta_DOCU(get_p_geo(), &self.handle, p2, p3, p4)
            
        finally:
            pass


    def set_meta(self, WrapMETA p2):

        try:


            SetMETA_DOCU(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    pass



cdef class WrapDU:
    




    @classmethod
    def table_look1(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, const char* p5, const char* p6, int32_t p7, double p8, WrapTB p9):

        try:


            _TableLook1_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, p5, p6, &p7, &p8, &p9.handle)
            
        finally:
            pass

    @classmethod
    def table_look2(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, const char* p6, const char* p7, const char* p8, int32_t p9, double p10, WrapTB p11):

        try:


            _TableLook2_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, p6, p7, p8, &p9, &p10, &p11.handle)
            
        finally:
            pass

    @classmethod
    def table_look_i2(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, const char* p6, const char* p7, const char* p8, int32_t p9, double p10, WrapTB p11):

        try:


            _TableLookI2_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, p6, p7, p8, &p9, &p10, &p11.handle)
            
        finally:
            pass

    @classmethod
    def table_look_r2(cls, WrapDB p1, int32_t p2, double p3, int32_t p4, int32_t p5, const char* p6, const char* p7, const char* p8, int32_t p9, double p10, WrapTB p11):

        try:


            _TableLookR2_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, p6, p7, p8, &p9, &p10, &p11.handle)
            
        finally:
            pass

    @classmethod
    def ado_table_names(cls, const char* p1, WrapVV p2):

        try:


            ADOTableNames_DU(get_p_geo(), p1, &p2.handle)
            
        finally:
            pass

    @classmethod
    def an_sig(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4):

        try:


            AnSig_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4)
            
        finally:
            pass

    @classmethod
    def append(cls, WrapDB p1, WrapDB p2, int32_t p3):

        try:


            Append_DU(get_p_geo(), &p1.handle, &p2.handle, &p3)
            
        finally:
            pass

    @classmethod
    def avg_azimuth(cls, WrapDB p1, double p2, double p3):

        try:


            AvgAzimuth_DU(get_p_geo(), &p1.handle, &p2, &p3)
            return p3
        finally:
            pass

    @classmethod
    def base_data(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, WrapTB p6):

        try:


            BaseData_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6.handle)
            
        finally:
            pass

    @classmethod
    def base_data_ex(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, WrapTB p6, int32_t p7):

        try:


            BaseDataEx_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6.handle, &p7)
            
        finally:
            pass

    @classmethod
    def bound_line(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, WrapPLY p5):

        try:


            BoundLine_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5.handle)
            
        finally:
            pass

    @classmethod
    def bp_filt(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, double p5, double p6, int32_t p7):

        try:


            BPFilt_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass

    @classmethod
    def break_line(cls, WrapDB p1, int32_t p2, int32_t p3):

        try:


            BreakLine_DU(get_p_geo(), &p1.handle, &p2, &p3)
            
        finally:
            pass

    @classmethod
    def break_line2(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4):

        try:


            BreakLine2_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4)
            
        finally:
            pass

    @classmethod
    def break_line_to_groups(cls, WrapDB p1, int32_t p2, int32_t p3, const char* p4):

        try:


            BreakLineToGroups_DU(get_p_geo(), &p1.handle, &p2, &p3, p4)
            
        finally:
            pass

    @classmethod
    def break_line_to_groups2(cls, WrapDB p1, int32_t p2, int32_t p3, const char* p4, int32_t p5):

        try:


            BreakLineToGroups2_DU(get_p_geo(), &p1.handle, &p2, &p3, p4, &p5)
            
        finally:
            pass

    @classmethod
    def b_spline(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, double p5, double p6, double p7):

        try:


            BSpline_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass

    @classmethod
    def closest_point(cls, WrapDB p1, double p2, double p3, double p4, double p5, int32_t p6, double p7):

        try:


            ClosestPoint_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            return (p4, p5, p6, p7)
        finally:
            pass

    @classmethod
    def copy_line(cls, WrapDB p1, int32_t p2, int32_t p3):

        try:


            CopyLine_DU(get_p_geo(), &p1.handle, &p2, &p3)
            
        finally:
            pass

    @classmethod
    def copy_line_across(cls, WrapDB p1, int32_t p2, WrapDB p3, int32_t p4):

        try:


            CopyLineAcross_DU(get_p_geo(), &p1.handle, &p2, &p3.handle, &p4)
            
        finally:
            pass

    @classmethod
    def copy_line_chan_across(cls, WrapDB p1, int32_t p2, WrapVV p3, WrapDB p4, int32_t p5):

        try:


            CopyLineChanAcross_DU(get_p_geo(), &p1.handle, &p2, &p3.handle, &p4.handle, &p5)
            
        finally:
            pass

    @classmethod
    def copy_line_masked(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            CopyLineMasked_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def dao_table_names(cls, const char* p1, const char* p2, WrapVV p3):

        try:


            DAOTableNames_DU(get_p_geo(), p1, p2, &p3.handle)
            
        finally:
            pass

    @classmethod
    def decimate(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            Decimate_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def diff(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            Diff_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def distance(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            Distance_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def distance_3d(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            Distance3D_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass

    @classmethod
    def distline(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, double p5):

        try:


            Distline_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5)
            return p5
        finally:
            pass

    @classmethod
    def dup_chan_locks(cls, WrapDB p1, WrapDB p2):

        try:


            DupChanLocks_DU(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def dup_chans(cls, WrapDB p1, WrapDB p2):

        try:


            DupChans_DU(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def edit_duplicates(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, double p7):

        try:


            EditDuplicates_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass

    @classmethod
    def export(cls, WrapDB p1, int32_t p2, const char* p3, WrapVV p4, int32_t p5, const char* p6, int32_t p7, int32_t p8):

        try:


            Export_DU(get_p_geo(), &p1.handle, &p2, p3, &p4.handle, &p5, p6, &p7, &p8)
            
        finally:
            pass

    @classmethod
    def export2(cls, WrapDB p1, int32_t p2, const char* p3, WrapVV p4, int32_t p5, const char* p6, int32_t p7, int32_t p8, int32_t p9):

        try:


            Export2_DU(get_p_geo(), &p1.handle, &p2, p3, &p4.handle, &p5, p6, &p7, &p8, &p9)
            
        finally:
            pass

    @classmethod
    def export_amira(cls, WrapDB p1, WrapWA p2, const char* p3, const char* p4, const char* p5, const char* p6, const char* p7, const char* p8, const char* p9, const char* p10, const char* p11):

        try:


            ExportAMIRA_DU(get_p_geo(), &p1.handle, &p2.handle, p3, p4, p5, p6, p7, p8, p9, p10, p11)
            
        finally:
            pass

    @classmethod
    def export_aseg(cls, WrapDB p1, const char* p2, WrapVV p3, int32_t p4, const char* p5, const char* p6):

        try:


            ExportAseg_DU(get_p_geo(), &p1.handle, p2, &p3.handle, &p4, p5, p6)
            
        finally:
            pass

    @classmethod
    def export_aseg_proj(cls, WrapDB p1, const char* p2, WrapVV p3, int32_t p4, const char* p5, const char* p6, const char* p7, WrapIPJ p8):

        try:


            ExportAsegProj_DU(get_p_geo(), &p1.handle, p2, &p3.handle, &p4, p5, p6, p7, &p8.handle)
            
        finally:
            pass

    @classmethod
    def export_chan_crc(cls, WrapDB p1, int32_t p2, int32_t p3, const char* p4):

        try:


            ExportChanCRC_DU(get_p_geo(), &p1.handle, &p2, &p3, p4)
            return p3
        finally:
            pass

    @classmethod
    def export_csv(cls, WrapDB p1, const char* p2, WrapVV p3, int32_t p4, const char* p5, int32_t p6, int32_t p7):

        try:


            ExportCSV_DU(get_p_geo(), &p1.handle, p2, &p3.handle, &p4, p5, &p6, &p7)
            
        finally:
            pass

    @classmethod
    def export_database_crc(cls, WrapDB p1, int32_t p2, const char* p3):

        try:


            ExportDatabaseCRC_DU(get_p_geo(), &p1.handle, &p2, p3)
            return p2
        finally:
            pass

    @classmethod
    def export_gbn(cls, WrapDB p1, WrapVV p2, const char* p3):

        try:


            ExportGBN_DU(get_p_geo(), &p1.handle, &p2.handle, p3)
            
        finally:
            pass

    @classmethod
    def export_mdb(cls, WrapDB p1, const char* p2, WrapVV p3, int32_t p4, int32_t p5, const char* p6):

        try:


            ExportMDB_DU(get_p_geo(), &p1.handle, p2, &p3.handle, &p4, &p5, p6)
            
        finally:
            pass

    @classmethod
    def export_geodatabase(cls, WrapDB p1, const char* p2, const char* p3, WrapVV p4, int32_t p5, int32_t p6, int32_t p7, const char* p8):

        try:


            ExportGeodatabase_DU(get_p_geo(), &p1.handle, p2, p3, &p4.handle, &p5, &p6, &p7, p8)
            
        finally:
            pass

    @classmethod
    def get_existing_feature_classes_in_geodatabase(cls, WrapDB p1, const char* p2, WrapLST p3, WrapVV p4):

        try:


            _return_val = GetExistingFeatureClassesInGeodatabase_DU(get_p_geo(), &p1.handle, p2, &p3.handle, &p4.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def export_shp(cls, WrapDB p1, const char* p2, WrapVV p3, int32_t p4, int32_t p5, const char* p6, WrapLST p7):

        try:


            ExportSHP_DU(get_p_geo(), &p1.handle, p2, &p3.handle, &p4, &p5, p6, &p7.handle)
            
        finally:
            pass

    @classmethod
    def export_xyz(cls, WrapDB p1, const char* p2, const char* p3):

        try:


            ExportXYZ_DU(get_p_geo(), &p1.handle, p2, p3)
            
        finally:
            pass

    @classmethod
    def export_xyz2(cls, WrapDB p1, WrapWA p2, WrapRA p3):

        try:


            ExportXYZ2_DU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def fft(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            FFT_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def filter(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            Filter_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def gen_lev(cls, WrapDB p1, const char* p2, const char* p3, double p4, int32_t p5):

        try:


            GenLev_DU(get_p_geo(), &p1.handle, p2, p3, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def gen_lev_db(cls, WrapDB p1, const char* p2, double p3, int32_t p4):

        try:


            GenLevDB_DU(get_p_geo(), &p1.handle, p2, &p3, &p4)
            
        finally:
            pass

    @classmethod
    def gen_xyz_temp(cls, const char* p1, const char* p2):

        try:


            GenXYZTemp_DU(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def get_xyz_num_fields(cls, const char* p1, int32_t p2):

        try:


            GetXYZNumFields_DU(get_p_geo(), p1, &p2)
            return p2
        finally:
            pass

    @classmethod
    def get_chan_data_lst(cls, WrapDB p1, int32_t p2, int32_t p3, WrapLST p4):

        try:


            GetChanDataLST_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4.handle)
            
        finally:
            pass

    @classmethod
    def get_chan_data_vv(cls, WrapDB p1, int32_t p2, int32_t p3, WrapVV p4):

        try:


            GetChanDataVV_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4.handle)
            
        finally:
            pass

    @classmethod
    def gradient(cls, WrapDB p1, WrapDB p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8, int32_t p9, double p10, double p11):

        try:


            Gradient_DU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11)
            
        finally:
            pass

    @classmethod
    def grav_drift(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            GravDrift_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass

    @classmethod
    def grav_tide(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, double p7, int32_t p8):

        try:


            GravTide_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass

    @classmethod
    def grid_load(cls, WrapDB p1, WrapIMG p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6):

        try:


            GridLoad_DU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def grid_load_xyz(cls, WrapDB p1, WrapIMG p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8, int32_t p9, int32_t p10):

        try:


            GridLoadXYZ_DU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10)
            
        finally:
            pass

    @classmethod
    def head(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, WrapTB p5, double p6):

        try:


            Head_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5.handle, &p6)
            
        finally:
            pass

    @classmethod
    def import_bin3(cls, WrapDB p1, const char* p2, const char* p3, const char* p4, int32_t p6, double p7, WrapWA p8):
        cdef int32_t p5 = 4*16384
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*16384)

            strcpy(cp4, p4)

            IImportBIN3_DU(get_p_geo(), &p1.handle, p2, p3, cp4, &p5, &p6, &p7, &p8.handle)
            return cp4
        finally:
            if cp4: free(cp4)


    @classmethod
    def imp_cb_ply(cls, WrapDB p1, WrapPJ p2, const char* p3, int32_t p4, int32_t p5):

        try:


            ImpCBPly_DU(get_p_geo(), &p1.handle, &p2.handle, p3, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def import_ado(cls, WrapDB p1, const char* p2, const char* p3, const char* p4, const char* p5):

        try:


            ImportADO_DU(get_p_geo(), &p1.handle, p2, p3, p4, p5)
            
        finally:
            pass

    @classmethod
    def import_all_ado(cls, WrapDB p1, const char* p2, int32_t p3):

        try:


            ImportAllADO_DU(get_p_geo(), &p1.handle, p2, &p3)
            
        finally:
            pass

    @classmethod
    def import_all_dao(cls, WrapDB p1, const char* p2, const char* p3, int32_t p4):

        try:


            ImportAllDAO_DU(get_p_geo(), &p1.handle, p2, p3, &p4)
            
        finally:
            pass

    @classmethod
    def import_amira(cls, WrapDB p1, WrapRA p2, WrapWA p3):

        try:


            ImportAMIRA_DU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def import_aseg(cls, WrapDB p1, const char* p2, const char* p3, const char* p4, const char* p5, int32_t p6):

        try:


            ImportAseg_DU(get_p_geo(), &p1.handle, p2, p3, p4, p5, &p6)
            
        finally:
            pass

    @classmethod
    def import_aseg_proj(cls, WrapDB p1, const char* p2, const char* p3, const char* p4, const char* p5, int32_t p6, const char* p7, const char* p8, const char* p9):

        try:


            ImportAsegProj_DU(get_p_geo(), &p1.handle, p2, p3, p4, p5, &p6, p7, p8, p9)
            
        finally:
            pass

    @classmethod
    def import_bin(cls, WrapDB p1, const char* p2, const char* p3, const char* p4, int32_t p5, double p6):

        try:


            ImportBIN_DU(get_p_geo(), &p1.handle, p2, p3, p4, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def import_bin2(cls, WrapDB p1, const char* p2, const char* p3, const char* p4, int32_t p5, double p6, WrapWA p7):

        try:


            ImportBIN2_DU(get_p_geo(), &p1.handle, p2, p3, p4, &p5, &p6, &p7.handle)
            
        finally:
            pass

    @classmethod
    def import_bin4(cls, WrapDB p1, int32_t p2, const char* p3, const char* p4, const char* p5, int32_t p6, double p7, WrapWA p8):

        try:


            ImportBIN4_DU(get_p_geo(), &p1.handle, &p2, p3, p4, p5, &p6, &p7, &p8.handle)
            
        finally:
            pass

    @classmethod
    def import_daarc500_serial(cls, WrapDB p1, int32_t p2, const char* p3, int32_t p4, int32_t p5):

        try:


            ImportDAARC500Serial_DU(get_p_geo(), &p1.handle, &p2, p3, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def import_daarc500_serial_gps(cls, WrapDB p1, int32_t p2, const char* p3, int32_t p4):

        try:


            ImportDAARC500SerialGPS_DU(get_p_geo(), &p1.handle, &p2, p3, &p4)
            
        finally:
            pass

    @classmethod
    def import_dao(cls, WrapDB p1, const char* p2, const char* p3, const char* p4, const char* p5, const char* p6):

        try:


            ImportDAO_DU(get_p_geo(), &p1.handle, p2, p3, p4, p5, p6)
            
        finally:
            pass

    @classmethod
    def import_esri(cls, WrapDB p1, const char* p2, const char* p3, const char* p4):

        try:


            ImportESRI_DU(get_p_geo(), &p1.handle, p2, p3, p4)
            
        finally:
            pass

    @classmethod
    def import_gbn(cls, WrapDB p1, const char* p2):

        try:


            ImportGBN_DU(get_p_geo(), &p1.handle, p2)
            
        finally:
            pass

    @classmethod
    def import_oddf(cls, WrapDB p1, const char* p2):

        try:


            ImportODDF_DU(get_p_geo(), &p1.handle, p2)
            
        finally:
            pass

    @classmethod
    def import_pico(cls, WrapDB p1, const char* p2, const char* p3, int32_t p4):

        try:


            ImportPico_DU(get_p_geo(), &p1.handle, p2, p3, &p4)
            
        finally:
            pass

    @classmethod
    def import_ubc_mod_msh(cls, WrapDB p1, const char* p2, const char* p3, int32_t p4, double p5):

        try:


            ImportUBCModMsh_DU(get_p_geo(), &p1.handle, p2, p3, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def import_usgs_post(cls, WrapDB p1, const char* p2):

        try:


            ImportUSGSPost_DU(get_p_geo(), &p1.handle, p2)
            
        finally:
            pass

    @classmethod
    def import_xyz(cls, WrapDB p1, int32_t p2, const char* p3, const char* p4):

        try:


            ImportXYZ_DU(get_p_geo(), &p1.handle, &p2, p3, p4)
            
        finally:
            pass

    @classmethod
    def import_xyz2(cls, WrapDB p1, int32_t p2, const char* p3, const char* p4, WrapWA p5):

        try:


            ImportXYZ2_DU(get_p_geo(), &p1.handle, &p2, p3, p4, &p5.handle)
            
        finally:
            pass

    @classmethod
    def import_io_gas(cls, WrapDB p1, const char* p2, const char* p3):

        try:


            ImportIoGAS_DU(get_p_geo(), &p1.handle, p2, p3)
            
        finally:
            pass

    @classmethod
    def index_order(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4):

        try:


            IndexOrder_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4)
            
        finally:
            pass

    @classmethod
    def interp(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6):

        try:


            Interp_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def interp_gap(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8):

        try:


            InterpGap_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass

    @classmethod
    def intersect(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, double p5, const char* p6):

        try:


            Intersect_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, p6)
            
        finally:
            pass

    @classmethod
    def intersect_all(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, double p5, const char* p6):

        try:


            IntersectAll_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, p6)
            
        finally:
            pass

    @classmethod
    def intersect_gd_bto_tbl(cls, const char* p1, const char* p2):

        try:


            IntersectGDBtoTBL_DU(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def intersect_old(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, const char* p5, const char* p6):

        try:


            IntersectOld_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, p5, p6)
            
        finally:
            pass

    @classmethod
    def intersect_tb_lto_gdb(cls, const char* p1, const char* p2):

        try:


            IntersectTBLtoGDB_DU(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def lab_template(cls, const char* p1, const char* p2, int32_t p3, const char* p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8, int32_t p9):

        try:


            LabTemplate_DU(get_p_geo(), p1, p2, &p3, p4, &p5, &p6, &p7, &p8, &p9)
            
        finally:
            pass

    @classmethod
    def load_gravity(cls, WrapDB p1, WrapREG p2, int32_t p3, const char* p4):

        try:


            LoadGravity_DU(get_p_geo(), &p1.handle, &p2.handle, &p3, p4)
            
        finally:
            pass

    @classmethod
    def load_ltb(cls, WrapDB p1, int32_t p2, WrapLTB p3, int32_t p4):

        try:


            LoadLTB_DU(get_p_geo(), &p1.handle, &p2, &p3.handle, &p4)
            
        finally:
            pass

    @classmethod
    def make_fid(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4):

        try:


            MakeFid_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4)
            
        finally:
            pass

    @classmethod
    def mask(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4):

        try:


            Mask_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4)
            
        finally:
            pass

    @classmethod
    def math(cls, WrapDB p1, int32_t p2, WrapEXP p3):

        try:


            Math_DU(get_p_geo(), &p1.handle, &p2, &p3.handle)
            
        finally:
            pass

    @classmethod
    def merge_line(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            MergeLine_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def mod_fid_range(cls, WrapDB p1, int32_t p2, double p3, double p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            ModFidRange_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass

    @classmethod
    def move(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6):

        try:


            Move_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def nl_filt(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, double p6):

        try:


            NLFilt_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def normal(cls, WrapDB p1, int32_t p2, int32_t p3):

        try:


            Normal_DU(get_p_geo(), &p1.handle, &p2, &p3)
            
        finally:
            pass

    @classmethod
    def poly_fill(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, WrapPLY p6, int32_t p7):

        try:


            PolyFill_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6.handle, &p7)
            
        finally:
            pass

    @classmethod
    def poly_mask(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, WrapPLY p6, int32_t p7):

        try:


            PolyMask_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6.handle, &p7)
            
        finally:
            pass

    @classmethod
    def project_data(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, WrapPJ p7):

        try:


            ProjectData_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7.handle)
            
        finally:
            pass

    @classmethod
    def project_xyz(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8, WrapPJ p9):

        try:


            ProjectXYZ_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9.handle)
            
        finally:
            pass

    @classmethod
    def proj_points(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8, int32_t p9, int32_t p10, int32_t p11, int32_t p12, int32_t p13, int32_t p14, int32_t p15, int32_t p16, int32_t p17, int32_t p18, int32_t p19, int32_t p20):

        try:


            ProjPoints_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16, &p17, &p18, &p19, &p20)
            
        finally:
            pass

    @classmethod
    def qc_init_separation(cls, WrapDB p1, double p2, double p3):

        try:


            QCInitSeparation_DU(get_p_geo(), &p1.handle, &p2, &p3)
            
        finally:
            pass

    @classmethod
    def qc_survey_plan(cls, WrapDB p1, WrapWA p2, WrapPLY p3, double p4, double p5, double p6, double p7, int32_t p8, int32_t p9, double p10, double p11, double p12, double p13, int32_t p14, int32_t p15, int32_t p16, double p17, double p18):

        try:


            _return_val = QCSurveyPlan_DU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16, &p17, &p18)
            return _return_val
        finally:
            pass

    @classmethod
    def direction(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4):

        try:


            _return_val = rDirection_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4)
            return _return_val
        finally:
            pass

    @classmethod
    def re_fid(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, double p7, double p8, double p9):

        try:


            ReFid_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9)
            
        finally:
            pass

    @classmethod
    def re_fid_all_ch(cls, WrapDB p1, int32_t p2, int32_t p3):

        try:


            ReFidAllCh_DU(get_p_geo(), &p1.handle, &p2, &p3)
            
        finally:
            pass

    @classmethod
    def re_fid_ch(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4):

        try:


            ReFidCh_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4)
            
        finally:
            pass

    @classmethod
    def rotate(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, double p7, double p8, double p9):

        try:


            Rotate_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9)
            
        finally:
            pass

    @classmethod
    def sample_gd(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, WrapGD p6):

        try:


            SampleGD_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6.handle)
            
        finally:
            pass

    @classmethod
    def sample_img(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, WrapIMG p6):

        try:


            SampleIMG_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6.handle)
            
        finally:
            pass

    @classmethod
    def sample_img_line_lst(cls, WrapDB p1, WrapLST p2, int32_t p3, int32_t p4, int32_t p5, WrapIMG p6):

        try:


            SampleIMGLineLST_DU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5, &p6.handle)
            
        finally:
            pass

    @classmethod
    def scan_ado(cls, const char* p1, const char* p2, const char* p3):

        try:


            ScanADO_DU(get_p_geo(), p1, p2, p3)
            
        finally:
            pass

    @classmethod
    def scan_aseg(cls, const char* p1, const char* p2, const char* p3, const char* p4):

        try:


            ScanAseg_DU(get_p_geo(), p1, p2, p3, p4)
            
        finally:
            pass

    @classmethod
    def scan_dao(cls, const char* p1, const char* p2, const char* p3, const char* p4):

        try:


            ScanDAO_DU(get_p_geo(), p1, p2, p3, p4)
            
        finally:
            pass

    @classmethod
    def scan_pico(cls, const char* p1, const char* p2):

        try:


            ScanPico_DU(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def sort(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4):

        try:


            Sort_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4)
            
        finally:
            pass

    @classmethod
    def sort_index(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            SortIndex_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def sort_index2(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            SortIndex2_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass

    @classmethod
    def split_line(cls, WrapDB p1, int32_t p2, int32_t p3, double p4):

        try:


            SplitLine_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4)
            
        finally:
            pass

    @classmethod
    def split_line2(cls, WrapDB p1, int32_t p2, int32_t p3, double p4, int32_t p5):

        try:


            SplitLine2_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def split_line_xy(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, double p6, double p7, int32_t p8, int32_t p9, int32_t p10):

        try:


            SplitLineXY_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10)
            return p9
        finally:
            pass

    @classmethod
    def split_line_xy2(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, double p6, double p7, int32_t p8, int32_t p9, int32_t p10, int32_t p11):

        try:


            SplitLineXY2_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11)
            return p9
        finally:
            pass

    @classmethod
    def split_line_xy3(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, double p6, double p7, int32_t p8, int32_t p9, int32_t p10, int32_t p11, int32_t p12):

        try:


            SplitLineXY3_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12)
            return p9
        finally:
            pass

    @classmethod
    def split_line_by_direction(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, double p5, double p6, double p7, double p8, int32_t p9, int32_t p10, int32_t p11, int32_t p12, int32_t p13):

        try:


            SplitLineByDirection_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13)
            return p11
        finally:
            pass

    @classmethod
    def split_line_by_direction2(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, double p5, double p6, double p7, double p8, int32_t p9, int32_t p10, int32_t p11, int32_t p12, int32_t p13, int32_t p14):

        try:


            SplitLineByDirection2_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14)
            return p11
        finally:
            pass

    @classmethod
    def stat(cls, WrapDB p1, int32_t p2, int32_t p3, WrapST p4):

        try:


            Stat_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4.handle)
            
        finally:
            pass

    @classmethod
    def table_line_fid(cls, WrapDB p1, int32_t p2, int32_t p3, WrapTB p4, int32_t p5):

        try:


            TableLineFid_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4.handle, &p5)
            
        finally:
            pass

    @classmethod
    def table_selected_lines_fid(cls, WrapDB p1, int32_t p2, int32_t p3, WrapTB p4, int32_t p5):

        try:


            TableSelectedLinesFid_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4.handle, &p5)
            
        finally:
            pass

    @classmethod
    def time_constant(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8):

        try:


            TimeConstant_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass

    @classmethod
    def trend(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            Trend_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def update_intersect_db(cls, WrapDB p1, int32_t p2, int32_t p3, WrapDB p4):

        try:


            UpdateIntersectDB_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4.handle)
            
        finally:
            pass

    @classmethod
    def voxel_section(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, WrapVOX p5, const char* p6, double p7, double p8, int32_t p9):

        try:


            VoxelSection_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5.handle, p6, &p7, &p8, &p9)
            
        finally:
            pass

    @classmethod
    def write_wa(cls, WrapDB p1, int32_t p2, WrapLST p3, WrapWA p4):

        try:


            WriteWA_DU(get_p_geo(), &p1.handle, &p2, &p3.handle, &p4.handle)
            
        finally:
            pass

    @classmethod
    def xyz_line(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, double p6):

        try:


            XyzLine_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def xyz_line2(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, double p6, double p7):

        try:


            XyzLine2_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass

    @classmethod
    def xyz_line3(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, double p6, double p7, int32_t p8):

        try:


            XyzLine3_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass

    @classmethod
    def z_mask(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, double p5, double p6):

        try:


            ZMask_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def range_xy(cls, WrapDB p1, double p2, double p3, double p4, double p5):

        try:


            RangeXY_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5)
            return (p2, p3, p4, p5)
        finally:
            pass

    @classmethod
    def range_xyz(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, double p5, double p6, double p7, double p8, double p9, double p10, int32_t p11):

        try:


            RangeXYZ_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11)
            return (p5, p6, p7, p8, p9, p10, p11)
        finally:
            pass

    @classmethod
    def range_xyz_data(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, double p6, double p7, double p8, double p9, double p10, double p11, double p12, double p13, int32_t p14):

        try:


            RangeXYZData_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14)
            return (p6, p7, p8, p9, p10, p11, p12, p13, p14)
        finally:
            pass

    @classmethod
    def create_drillhole_parameter_weight_constraint_database(cls, WrapDB p1, int32_t p2, WrapREG p3, const char* p4):

        try:


            CreateDrillholeParameterWeightConstraintDatabase_DU(get_p_geo(), &p1.handle, &p2, &p3.handle, p4)
            
        finally:
            pass

    @classmethod
    def calculate_draped_survey_altitude(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, WrapIMG p5, int32_t p6, double p7, double p8, double p9, int32_t p10, double p11, double p12):

        try:


            CalculateDrapedSurveyAltitude_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5.handle, &p6, &p7, &p8, &p9, &p10, &p11, &p12)
            
        finally:
            pass

    @classmethod
    def calculate_draped_survey_altitude2(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, WrapIMG p5, int32_t p6, int32_t p7, double p8, double p9, double p10, double p11, int32_t p12, double p13, double p14):

        try:


            CalculateDrapedSurveyAltitude2_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5.handle, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14)
            
        finally:
            pass

    @classmethod
    def direct_grid_data_to_voxel(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, const char* p6, double p7, double p8, double p9, int32_t p10, int32_t p11, int32_t p12, double p13, double p14, double p15, int32_t p16):

        try:


            DirectGridDataToVoxel_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16)
            
        finally:
            pass

    @classmethod
    def direct_grid_item_counts_to_voxel(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, const char* p6, double p7, double p8, double p9, int32_t p10, int32_t p11, int32_t p12, double p13, double p14, double p15, int32_t p16):

        try:


            DirectGridItemCountsToVoxel_DU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16)
            
        finally:
            pass

    pass



cdef class WrapDXFI:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_DXFI(get_p_geo(), &self.handle)




    @classmethod
    def create(cls, const char* p1):

        try:


            _return_val = WrapDXFI(Create_DXFI(get_p_geo(), p1))
            return _return_val
        finally:
            pass



    @classmethod
    def dxf2_ply(cls, WrapPLY p1, WrapDXFI p2):

        try:


            DXF2PLY_DXFI(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass


    def dxf2_view_ex(self, WrapMVIEW p2, int32_t p3, int32_t p4, const char* p5, int32_t p6, int32_t p7):

        try:


            DXF2ViewEx_DXFI(get_p_geo(), &self.handle, &p2.handle, &p3, &p4, p5, &p6, &p7)
            
        finally:
            pass


    def get_range(self, double p2, double p3, double p4, double p5, double p6, double p7):

        try:


            GetRange_DXFI(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            return (p2, p3, p4, p5, p6, p7)
        finally:
            pass

    pass



cdef class WrapEDB:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            App_Destroy_EDB(get_p_geo(), &self.handle)




# Miscellaneous




    def apply_formula_internal(self, const char* p2):

        try:


            App_ApplyFormulaInternal_EDB(get_p_geo(), &self.handle, p2)
            
        finally:
            pass

    @classmethod
    def current(cls):

        try:


            _return_val = WrapEDB(App_Current_EDB(get_p_geo()))
            return _return_val
        finally:
            pass

    @classmethod
    def current_no_activate(cls):

        try:


            _return_val = WrapEDB(App_CurrentNoActivate_EDB(get_p_geo()))
            return _return_val
        finally:
            pass

    @classmethod
    def current_if_exists(cls):

        try:


            _return_val = WrapEDB(App_CurrentIfExists_EDB(get_p_geo()))
            return _return_val
        finally:
            pass


    def del_line0(self):

        try:


            App_DelLine0_EDB(get_p_geo(), &self.handle)
            
        finally:
            pass




    def destroy_view(self, int32_t p2):

        try:


            App_DestroyView_EDB(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def get_cur_chan_symb(self):

        try:


            _return_val = App_GetCurChanSymb_EDB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_cur_line_symb(self):

        try:


            _return_val = App_GetCurLineSymb_EDB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_displ_fid_range(self, int32_t p2, int32_t p3):

        try:


            App_GetDisplFidRange_EDB(get_p_geo(), &self.handle, &p2, &p3)
            return (p2, p3)
        finally:
            pass


    def get_cur_point(self, double p2, double p3, double p4):

        try:


            App_GetCurPoint_EDB(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return (p2, p3, p4)
        finally:
            pass


    def get_fid_range(self, double p2, double p3, int32_t p4):

        try:


            App_GetFidRange_EDB(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return (p2, p3, p4)
        finally:
            pass


    def get_next_line_symb(self):

        try:


            _return_val = App_GetNextLineSymb_EDB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_prev_line_symb(self):

        try:


            _return_val = App_GetPrevLineSymb_EDB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_profile_range_x(self, double p2, double p3, int32_t p4):

        try:


            App_GetProfileRangeX_EDB(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return (p2, p3, p4)
        finally:
            pass


    def get_profile_range_y(self, int32_t p2, int32_t p3, double p4, double p5, int32_t p6):

        try:


            App_GetProfileRangeY_EDB(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6)
            return (p4, p5, p6)
        finally:
            pass


    def get_profile_split(self, double p2, double p3):

        try:


            App_GetProfileSplit_EDB(get_p_geo(), &self.handle, &p2, &p3)
            return (p2, p3)
        finally:
            pass


    def get_profile_split5(self, double p2, double p3, double p4, double p5):

        try:


            App_GetProfileSplit5_EDB(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            return (p2, p3, p4, p5)
        finally:
            pass


    def get_profile_split_vv(self, WrapVV p2):

        try:


            App_GetProfileSplitVV_EDB(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_profile_vertical_grid_lines(self, int32_t p2, double p3):

        try:


            App_GetProfileVerticalGridLines_EDB(get_p_geo(), &self.handle, &p2, &p3)
            return (p2, p3)
        finally:
            pass


    def get_profile_window(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            App_GetProfileWindow_EDB(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return (p3, p4)
        finally:
            pass


    def goto_column(self, int32_t p2):

        try:


            App_GotoColumn_EDB(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def goto_elem(self, int32_t p2):

        try:


            App_GotoElem_EDB(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def goto_line(self, int32_t p2):

        try:


            App_GotoLine_EDB(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def histogram(self, WrapST p2, double p3, double p4, int32_t p5):

        try:


            App_Histogram_EDB(get_p_geo(), &self.handle, &p2.handle, &p3, &p4, &p5)
            
        finally:
            pass


    def all_chan_list(self, WrapVV p2):

        try:


            _return_val = App_iAllChanList_EDB(get_p_geo(), &self.handle, &p2.handle)
            return _return_val
        finally:
            pass


    def channels(self):

        try:


            _return_val = App_iChannels_EDB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def disp_chan_list(self, WrapVV p2):

        try:


            _return_val = App_iDispChanList_EDB(get_p_geo(), &self.handle, &p2.handle)
            return _return_val
        finally:
            pass


    def disp_chan_lst(self, WrapLST p2):

        try:


            _return_val = App_iDispChanLST_EDB(get_p_geo(), &self.handle, &p2.handle)
            return _return_val
        finally:
            pass


    def disp_class_chan_lst(self, WrapLST p2, const char* p3):

        try:


            _return_val = App_iDispClassChanLST_EDB(get_p_geo(), &self.handle, &p2.handle, p3)
            return _return_val
        finally:
            pass


    def find_channel_column(self, const char* p2):

        try:


            _return_val = App_iFindChannelColumn_EDB(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def find_nearest(self, double p2, double p3, double p4, WrapIPJ p5):

        try:


            _return_val = App_iFindNearest_EDB(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5.handle)
            return (_return_val, p2, p3, p4)
        finally:
            pass


    def get_cur_chan(self, const char* p2):
        cdef int32_t p3 = 4*64
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*64)

            strcpy(cp2, p2)

            App_IGetCurChan_EDB(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def get_cur_fid_string(self, const char* p2):
        cdef int32_t p3 = 4*64
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*64)

            strcpy(cp2, p2)

            App_IGetCurFidString_EDB(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def get_cur_line(self, const char* p2):
        cdef int32_t p3 = 4*64
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*64)

            strcpy(cp2, p2)

            App_IGetCurLine_EDB(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def get_cur_mark(self, double p2, double p3, double p4):

        try:


            _return_val = App_iGetCurMark_EDB(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return (_return_val, p2, p3, p4)
        finally:
            pass


    def get_current_selection(self, const char* p2, const char* p4, const char* p6, const char* p8):
        cdef int32_t p3 = 4*1040
        cdef int32_t p5 = 4*64
        cdef int32_t p7 = 4*64
        cdef int32_t p9 = 4*64
        cdef char* cp2 = NULL
        cdef char* cp4 = NULL
        cdef char* cp6 = NULL
        cdef char* cp8 = NULL

        try:
            cp2 = <char*>malloc(4*1040)
            cp4 = <char*>malloc(4*64)
            cp6 = <char*>malloc(4*64)
            cp8 = <char*>malloc(4*64)

            strcpy(cp2, p2)
            strcpy(cp4, p4)
            strcpy(cp6, p6)
            strcpy(cp8, p8)

            App_IGetCurrentSelection_EDB(get_p_geo(), &self.handle, cp2, &p3, cp4, &p5, cp6, &p7, cp8, &p9)
            return (cp2, cp4, cp6, cp8)
        finally:
            if cp2: free(cp2)
            if cp4: free(cp4)
            if cp6: free(cp6)
            if cp8: free(cp8)


    @classmethod
    def get_databases_lst(cls, WrapLST p1, int32_t p2):

        try:


            _return_val = App_iGetDatabasesLST_EDB(get_p_geo(), &p1.handle, &p2)
            return _return_val
        finally:
            pass


    def get_mark_chan_vv(self, WrapVV p2, int32_t p3):

        try:


            _return_val = App_iGetMarkChanVV_EDB(get_p_geo(), &self.handle, &p2.handle, &p3)
            return _return_val
        finally:
            pass


    def get_mark_chan_va(self, WrapVA p2, int32_t p3):

        try:


            _return_val = App_iGetMarkChanVA_EDB(get_p_geo(), &self.handle, &p2.handle, &p3)
            return _return_val
        finally:
            pass


    def get_name(self, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            App_IGetName_EDB(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def get_profile_parm(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            _return_val = App_iGetProfileParm_EDB(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return _return_val
        finally:
            pass


    def get_window_state(self):

        try:


            _return_val = App_iGetWindowState_EDB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def have_current(cls):

        try:


            _return_val = App_iHaveCurrent_EDB(get_p_geo())
            return _return_val
        finally:
            pass


    def is_locked(self):

        try:


            _return_val = App_iIsLocked_EDB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def loaded(cls, const char* p1):

        try:


            _return_val = App_iLoaded_EDB(get_p_geo(), p1)
            return _return_val
        finally:
            pass


    def profile_open(self, int32_t p2):

        try:


            _return_val = App_iProfileOpen_EDB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def read_only(self):

        try:


            _return_val = App_iReadOnly_EDB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_window_position(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            App_GetWindowPosition_EDB(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            return (p2, p3, p4, p5, p6, p7)
        finally:
            pass


    def set_window_position(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            App_SetWindowPosition_EDB(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass


    def show_profile_name(self, int32_t p2, const char* p3):

        try:


            _return_val = App_iShowProfileName_EDB(get_p_geo(), &self.handle, &p2, p3)
            return _return_val
        finally:
            pass


    def get_window_y_axis_direction(self, int32_t p2):

        try:


            _return_val = App_iGetWindowYAxisDirection_EDB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def window_profiles(self, int32_t p2):

        try:


            _return_val = App_iWindowProfiles_EDB(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def launch_histogram(self, const char* p2):

        try:


            LaunchHistogram_EDB(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def launch_scatter(self):

        try:


            LaunchScatter_EDB(get_p_geo(), &self.handle)
            
        finally:
            pass

    @classmethod
    def load(cls, const char* p1):

        try:


            _return_val = WrapEDB(App_Load_EDB(get_p_geo(), p1))
            return _return_val
        finally:
            pass

    @classmethod
    def load_no_activate(cls, const char* p1):

        try:


            _return_val = WrapEDB(App_LoadNoActivate_EDB(get_p_geo(), p1))
            return _return_val
        finally:
            pass


    def load_all_chans(self):

        try:


            App_LoadAllChans_EDB(get_p_geo(), &self.handle)
            
        finally:
            pass


    def load_chan(self, const char* p2):

        try:


            App_LoadChan_EDB(get_p_geo(), &self.handle, p2)
            
        finally:
            pass

    @classmethod
    def load_new(cls, const char* p1):

        try:


            _return_val = WrapEDB(App_LoadNew_EDB(get_p_geo(), p1))
            return _return_val
        finally:
            pass

    @classmethod
    def load_pass(cls, const char* p1, const char* p2, const char* p3):

        try:


            _return_val = WrapEDB(App_LoadPass_EDB(get_p_geo(), p1, p2, p3))
            return _return_val
        finally:
            pass

    @classmethod
    def load_with_view(cls, const char* p1, WrapEDB p2):

        try:


            _return_val = WrapEDB(App_LoadWithView_EDB(get_p_geo(), p1, &p2.handle))
            return _return_val
        finally:
            pass


    def lock(self):

        try:


            _return_val = WrapDB(App_Lock_EDB(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def make_current(self):

        try:


            App_MakeCurrent_EDB(get_p_geo(), &self.handle)
            
        finally:
            pass


    def remove_profile(self, int32_t p2, int32_t p3):

        try:


            App_RemoveProfile_EDB(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def get_cur_fid(self):

        try:


            _return_val = App_rGetCurFid_EDB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_profile_parm(self, int32_t p2, int32_t p3, int32_t p4):

        try:


            _return_val = App_rGetProfileParm_EDB(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return _return_val
        finally:
            pass


    def get_split(self):

        try:


            _return_val = App_rGetSplit_EDB(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def run_channel_maker(self, const char* p2):

        try:


            App_RunChannelMaker_EDB(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def run_channel_makers(self):

        try:


            App_RunChannelMakers_EDB(get_p_geo(), &self.handle)
            
        finally:
            pass


    def set_cur_line(self, const char* p2):

        try:


            App_SetCurLine_EDB(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def set_cur_line_no_message(self, const char* p2):

        try:


            App_SetCurLineNoMessage_EDB(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def set_cur_mark(self, double p2, double p3):

        try:


            App_SetCurMark_EDB(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_profile_parm_i(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            App_SetProfileParmI_EDB(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def set_profile_parm_r(self, int32_t p2, int32_t p3, int32_t p4, double p5):

        try:


            App_SetProfileParmR_EDB(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def set_profile_range_x(self, double p2, double p3, int32_t p4):

        try:


            App_SetProfileRangeX_EDB(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def set_profile_range_y(self, int32_t p2, int32_t p3, double p4, double p5, int32_t p6):

        try:


            App_SetProfileRangeY_EDB(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass


    def set_profile_split(self, double p2, double p3):

        try:


            App_SetProfileSplit_EDB(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_profile_split5(self, double p2, double p3, double p4, double p5):

        try:


            App_SetProfileSplit5_EDB(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def set_profile_split_vv(self, WrapVV p2):

        try:


            App_SetProfileSplitVV_EDB(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_split(self, double p2):

        try:


            App_SetSplit_EDB(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_window_state(self, int32_t p2):

        try:


            App_SetWindowState_EDB(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def show_profile(self, int32_t p2, int32_t p3):

        try:


            App_ShowProfile_EDB(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def statistics(self, WrapST p2):

        try:


            App_Statistics_EDB(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def un_load(cls, const char* p1):

        try:


            App_UnLoad_EDB(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def un_load_all(cls):

        try:


            App_UnLoadAll_EDB(get_p_geo())
            
        finally:
            pass


    def un_load_all_chans(self):

        try:


            App_UnLoadAllChans_EDB(get_p_geo(), &self.handle)
            
        finally:
            pass


    def un_load_chan(self, const char* p2):

        try:


            App_UnLoadChan_EDB(get_p_geo(), &self.handle, p2)
            
        finally:
            pass

    @classmethod
    def un_load_discard(cls, const char* p1):

        try:


            App_UnLoadDiscard_EDB(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def un_load_verify(cls, const char* p1, int32_t p2):

        try:


            App_UnLoadVerify_EDB(get_p_geo(), p1, &p2)
            
        finally:
            pass


    def un_lock(self):

        try:


            App_UnLock_EDB(get_p_geo(), &self.handle)
            
        finally:
            pass


# External Window



    @classmethod
    def load_control(cls, const char* p1, HWND p2):

        try:


            App_LoadControl_EDB(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def load_new_control(cls, const char* p1, HWND p2):

        try:


            App_LoadNewControl_EDB(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def load_pass_control(cls, const char* p1, const char* p2, const char* p3, HWND p4):

        try:


            App_LoadPassControl_EDB(get_p_geo(), p1, p2, p3, p4)
            
        finally:
            pass

    @classmethod
    def load_with_view_control(cls, const char* p1, WrapEDB p2, HWND p3):

        try:


            App_LoadWithViewControl_EDB(get_p_geo(), p1, &p2.handle, p3)
            
        finally:
            pass


    pass



cdef class WrapEDOC:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            App_Destroy_EDOC(get_p_geo(), &self.handle)




# GMSYS 3D Models



    @classmethod
    def create_new_gms_3d(cls, const char* p1, int32_t p2, int32_t p3, int32_t p4):

        try:


            _return_val = WrapEDOC(App_CreateNewGMS3D_EDOC(get_p_geo(), p1, &p2, &p3, &p4))
            return _return_val
        finally:
            pass


# Miscellaneous



    @classmethod
    def current(cls, int32_t p1):

        try:


            _return_val = WrapEDOC(App_Current_EDOC(get_p_geo(), &p1))
            return _return_val
        finally:
            pass

    @classmethod
    def current_no_activate(cls, int32_t p1):

        try:


            _return_val = WrapEDOC(App_CurrentNoActivate_EDOC(get_p_geo(), &p1))
            return _return_val
        finally:
            pass

    @classmethod
    def current_if_exists(cls, int32_t p1):

        try:


            _return_val = WrapEDOC(App_CurrentIfExists_EDOC(get_p_geo(), &p1))
            return _return_val
        finally:
            pass



    @classmethod
    def get_documents_lst(cls, WrapLST p1, int32_t p2, int32_t p3):

        try:


            _return_val = App_iGetDocumentsLST_EDOC(get_p_geo(), &p1.handle, &p2, &p3)
            return _return_val
        finally:
            pass


    def get_name(self, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            App_IGetName_EDOC(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def get_window_state(self):

        try:


            _return_val = App_iGetWindowState_EDOC(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def have_current(cls, int32_t p1):

        try:


            _return_val = App_iHaveCurrent_EDOC(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def loaded(cls, const char* p1, int32_t p2):

        try:


            _return_val = App_iLoaded_EDOC(get_p_geo(), p1, &p2)
            return _return_val
        finally:
            pass


    def get_window_position(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            App_GetWindowPosition_EDOC(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            return (p2, p3, p4, p5, p6, p7)
        finally:
            pass


    def set_window_position(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            App_SetWindowPosition_EDOC(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass


    def read_only(self):

        try:


            _return_val = App_iReadOnly_EDOC(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def load(cls, const char* p1, int32_t p2):

        try:


            _return_val = WrapEDOC(App_Load_EDOC(get_p_geo(), p1, &p2))
            return _return_val
        finally:
            pass

    @classmethod
    def load_no_activate(cls, const char* p1, int32_t p2):

        try:


            _return_val = WrapEDOC(App_LoadNoActivate_EDOC(get_p_geo(), p1, &p2))
            return _return_val
        finally:
            pass


    def make_current(self):

        try:


            App_MakeCurrent_EDOC(get_p_geo(), &self.handle)
            
        finally:
            pass


    def set_window_state(self, int32_t p2):

        try:


            App_SetWindowState_EDOC(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass

    @classmethod
    def sync(cls, const char* p1, int32_t p2):

        try:


            App_Sync_EDOC(get_p_geo(), p1, &p2)
            
        finally:
            pass


    def sync_open(self):

        try:


            App_SyncOpen_EDOC(get_p_geo(), &self.handle)
            
        finally:
            pass

    @classmethod
    def un_load(cls, const char* p1, int32_t p2):

        try:


            App_UnLoad_EDOC(get_p_geo(), p1, &p2)
            
        finally:
            pass

    @classmethod
    def un_load_all(cls, int32_t p1):

        try:


            App_UnLoadAll_EDOC(get_p_geo(), &p1)
            
        finally:
            pass

    @classmethod
    def un_load_discard(cls, const char* p1, int32_t p2):

        try:


            App_UnLoadDiscard_EDOC(get_p_geo(), p1, &p2)
            
        finally:
            pass

    @classmethod
    def un_load_verify(cls, const char* p1, int32_t p2, int32_t p3):

        try:


            App_UnLoadVerify_EDOC(get_p_geo(), p1, &p2, &p3)
            
        finally:
            pass


    pass



cdef class WrapEMAP:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            App_Destroy_EMAP(get_p_geo(), &self.handle)




# Drag-and-drop methods




    def drop_map_clip_data(self, int32_t p2):

        try:


            App_DropMapClipData_EMAP(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def drag_drop_enabled(self):

        try:


            _return_val = App_iDragDropEnabled_EMAP(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def set_drag_drop_enabled(self, int32_t p2):

        try:


            App_SetDragDropEnabled_EMAP(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


# Drawing




    def copy_to_clip(self):

        try:


            App_CopyToClip_EMAP(get_p_geo(), &self.handle)
            
        finally:
            pass


    def draw_line(self, double p2, double p3, double p4, double p5):

        try:


            App_DrawLine_EMAP(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def draw_rect(self, double p2, double p3, double p4, double p5):

        try:


            App_DrawRect_EMAP(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def draw_rect_3d(self, double p2, double p3, double p4, int32_t p5):

        try:


            App_DrawRect3D_EMAP(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def get_display_area(self, double p2, double p3, double p4, double p5):

        try:


            App_GetDisplayArea_EMAP(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            return (p2, p3, p4, p5)
        finally:
            pass


    def get_display_area_raw(self, double p2, double p3, double p4, double p5):

        try:


            App_GetDisplayAreaRaw_EMAP(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            return (p2, p3, p4, p5)
        finally:
            pass


    def get_map_layout_props(self, int32_t p2, double p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8, int32_t p9):

        try:


            App_GetMapLayoutProps_EMAP(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9)
            return (p2, p3, p4, p5, p6, p7, p8, p9)
        finally:
            pass


    def get_map_snap(self, double p2):

        try:


            App_GetMapSnap_EMAP(get_p_geo(), &self.handle, &p2)
            return p2
        finally:
            pass


    def get_window_state(self):

        try:


            _return_val = App_iGetWindowState_EMAP(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def set_display_area(self, double p2, double p3, double p4, double p5):

        try:


            App_SetDisplayArea_EMAP(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def set_map_layout_props(self, int32_t p2, double p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8, int32_t p9):

        try:


            App_SetMapLayoutProps_EMAP(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9)
            
        finally:
            pass


    def set_map_snap(self, double p2):

        try:


            App_SetMapSnap_EMAP(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_window_state(self, int32_t p2):

        try:


            App_SetWindowState_EMAP(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


# General




    def packed_files(self):

        try:


            _return_val = App_iPackedFiles_EMAP(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def activate_group(self, const char* p2):

        try:


            App_ActivateGroup_EMAP(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def activate_view(self, const char* p2):

        try:


            App_ActivateView_EMAP(get_p_geo(), &self.handle, p2)
            
        finally:
            pass

    @classmethod
    def current(cls):

        try:


            _return_val = WrapEMAP(App_Current_EMAP(get_p_geo()))
            return _return_val
        finally:
            pass

    @classmethod
    def current_no_activate(cls):

        try:


            _return_val = WrapEMAP(App_CurrentNoActivate_EMAP(get_p_geo()))
            return _return_val
        finally:
            pass

    @classmethod
    def current_if_exists(cls):

        try:


            _return_val = WrapEMAP(App_CurrentIfExists_EMAP(get_p_geo()))
            return _return_val
        finally:
            pass




    def destroy_view(self, int32_t p2):

        try:


            App_DestroyView_EMAP(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def font_lst(self, WrapLST p2, int32_t p3):

        try:


            App_FontLST_EMAP(get_p_geo(), &self.handle, &p2.handle, &p3)
            
        finally:
            pass


    def change_current_view(self, const char* p2):

        try:


            _return_val = App_iChangeCurrentView_EMAP(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def create_group_snapshot(self, WrapLST p2):

        try:


            _return_val = App_iCreateGroupSnapshot_EMAP(get_p_geo(), &self.handle, &p2.handle)
            return _return_val
        finally:
            pass


    def get_3d_view_name(self, const char* p2):
        cdef int32_t p3 = 4*128
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*128)

            strcpy(cp2, p2)

            App_IGet3DViewName_EMAP(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def get_current_group(self, const char* p2):
        cdef int32_t p3 = 4*2080
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*2080)

            strcpy(cp2, p2)

            App_IGetCurrentGroup_EMAP(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)



    def get_current_view(self, const char* p2):
        cdef int32_t p3 = 4*2080
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*2080)

            strcpy(cp2, p2)

            App_IGetCurrentView_EMAP(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def get_maps_lst(cls, WrapLST p1, int32_t p2):

        try:


            _return_val = App_iGetMapsLST_EMAP(get_p_geo(), &p1.handle, &p2)
            return _return_val
        finally:
            pass


    def get_name(self, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            App_IGetName_EMAP(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def have_current(cls):

        try:


            _return_val = App_iHaveCurrent_EMAP(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def i_get_specified_map_name(cls, const char* p1, const char* p2, const char* p3):
        cdef int32_t p4 = 4*1040
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*1040)

            strcpy(cp3, p3)

            _return_val = App_iIGetSpecifiedMapName_EMAP(get_p_geo(), p1, p2, cp3, &p4)
            return (_return_val, cp3)
        finally:
            if cp3: free(cp3)



    def is_grid(self):

        try:


            _return_val = App_iIsGrid_EMAP(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def reload_grid(cls, const char* p1):

        try:


            App_ReloadGrid_EMAP(get_p_geo(), p1)
            
        finally:
            pass


    def is_3d_view(self):

        try:


            _return_val = App_iIs3DView_EMAP(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_e_3dv(self):

        try:


            _return_val = WrapE3DV(App_GetE3DV_EMAP(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def is_locked(self):

        try:


            _return_val = App_iIsLocked_EMAP(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def loaded(cls, const char* p1):

        try:


            _return_val = App_iLoaded_EMAP(get_p_geo(), p1)
            return _return_val
        finally:
            pass


    def read_only(self):

        try:


            _return_val = App_iReadOnly_EMAP(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_window_position(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            App_GetWindowPosition_EMAP(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            return (p2, p3, p4, p5, p6, p7)
        finally:
            pass


    def set_window_position(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            App_SetWindowPosition_EMAP(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass


    def doubleize_group_snapshot(self, WrapLST p2):

        try:


            _return_val = App_iRealizeGroupSnapshot_EMAP(get_p_geo(), &self.handle, &p2.handle)
            return _return_val
        finally:
            pass


    def set_current_view(self, const char* p2):

        try:


            _return_val = App_iSetCurrentView_EMAP(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def get_view_ipj(self, const char* p2, WrapIPJ p3):

        try:


            App_GetViewIPJ_EMAP(get_p_geo(), &self.handle, p2, &p3.handle)
            
        finally:
            pass

    @classmethod
    def load(cls, const char* p1):

        try:


            _return_val = WrapEMAP(App_Load_EMAP(get_p_geo(), p1))
            return _return_val
        finally:
            pass

    @classmethod
    def load_no_activate(cls, const char* p1):

        try:


            _return_val = WrapEMAP(App_LoadNoActivate_EMAP(get_p_geo(), p1))
            return _return_val
        finally:
            pass

    @classmethod
    def load_with_view(cls, const char* p1, WrapEMAP p2):

        try:


            _return_val = WrapEMAP(App_LoadWithView_EMAP(get_p_geo(), p1, &p2.handle))
            return _return_val
        finally:
            pass


    def lock(self):

        try:


            _return_val = WrapMAP(App_Lock_EMAP(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def make_current(self):

        try:


            App_MakeCurrent_EMAP(get_p_geo(), &self.handle)
            
        finally:
            pass


    def print_(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8, int32_t p9, double p10, int32_t p11, int32_t p12, int32_t p13, const char* p14):

        try:


            App_Print_EMAP(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, p14)
            
        finally:
            pass


    def redraw(self):

        try:


            App_Redraw_EMAP(get_p_geo(), &self.handle)
            
        finally:
            pass


    def select_group(self, const char* p2):

        try:


            App_SelectGroup_EMAP(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def set_redraw_flag(self, int32_t p2):

        try:


            App_SetRedrawFlag_EMAP(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass

    @classmethod
    def un_load(cls, const char* p1):

        try:


            App_UnLoad_EMAP(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def un_load_all(cls):

        try:


            App_UnLoadAll_EMAP(get_p_geo())
            
        finally:
            pass

    @classmethod
    def un_load_verify(cls, const char* p1, int32_t p2):

        try:


            App_UnLoadVerify_EMAP(get_p_geo(), p1, &p2)
            
        finally:
            pass


    def un_lock(self):

        try:


            App_UnLock_EMAP(get_p_geo(), &self.handle)
            
        finally:
            pass


# Input




    def get_cur_point(self, double p2, double p3):

        try:


            App_GetCurPoint_EMAP(get_p_geo(), &self.handle, &p2, &p3)
            return (p2, p3)
        finally:
            pass


    def get_cur_point_mm(self, double p2, double p3):

        try:


            App_GetCurPointMM_EMAP(get_p_geo(), &self.handle, &p2, &p3)
            return (p2, p3)
        finally:
            pass


    def get_cursor(self, double p2, double p3):

        try:


            App_GetCursor_EMAP(get_p_geo(), &self.handle, &p2, &p3)
            return (p2, p3)
        finally:
            pass


    def get_cursor_mm(self, double p2, double p3):

        try:


            App_GetCursorMM_EMAP(get_p_geo(), &self.handle, &p2, &p3)
            return (p2, p3)
        finally:
            pass


    def digitize(self, WrapWA p2, WrapIMG p3, int32_t p4, const char* p5, const char* p6, const char* p7, int32_t p8):

        try:


            _return_val = App_iDigitize_EMAP(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4, p5, p6, p7, &p8)
            return _return_val
        finally:
            pass


    def digitize2(self, WrapVV p2, WrapVV p3, WrapVV p4, WrapIMG p5, const char* p6, int32_t p7):

        try:


            _return_val = App_iDigitize2_EMAP(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle, &p5.handle, p6, &p7)
            return _return_val
        finally:
            pass


    def digitize_peaks(self, WrapVV p2, WrapVV p3, WrapVV p4, WrapIMG p5, const char* p6, int32_t p7):

        try:


            _return_val = App_iDigitizePeaks_EMAP(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle, &p5.handle, p6, &p7)
            return _return_val
        finally:
            pass


    def digitize_polygon(self, WrapVV p2, WrapVV p3, WrapVV p4, WrapIMG p5, const char* p6, int32_t p7, int32_t p8):

        try:


            _return_val = App_iDigitizePolygon_EMAP(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle, &p5.handle, p6, &p7, &p8)
            return _return_val
        finally:
            pass


    def get_box(self, const char* p2, double p3, double p4, double p5, double p6):

        try:


            _return_val = App_iGetBox_EMAP(get_p_geo(), &self.handle, p2, &p3, &p4, &p5, &p6)
            return (_return_val, p3, p4, p5, p6)
        finally:
            pass


    def get_box2(self, const char* p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10):

        try:


            _return_val = App_iGetBox2_EMAP(get_p_geo(), &self.handle, p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10)
            return (_return_val, p3, p4, p5, p6, p7, p8, p9, p10)
        finally:
            pass


    def get_grid(self, const char* p2, int32_t p3, int32_t p4, double p5, double p6, double p7, double p8, double p9):

        try:


            _return_val = App_iGetGrid_EMAP(get_p_geo(), &self.handle, p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9)
            return (_return_val, p5, p6, p7, p8, p9)
        finally:
            pass


    def get_line(self, const char* p2, double p3, double p4, double p5, double p6):

        try:


            _return_val = App_iGetLine_EMAP(get_p_geo(), &self.handle, p2, &p3, &p4, &p5, &p6)
            return (_return_val, p3, p4, p5, p6)
        finally:
            pass


    def get_line_ex(self, const char* p2, double p3, double p4, double p5, double p6):

        try:


            _return_val = App_iGetLineEx_EMAP(get_p_geo(), &self.handle, p2, &p3, &p4, &p5, &p6)
            return (_return_val, p3, p4, p5, p6)
        finally:
            pass


    def get_line_xyz(self, const char* p2, double p3, double p4, double p5, double p6, double p7, double p8):

        try:


            _return_val = App_iGetLineXYZ_EMAP(get_p_geo(), &self.handle, p2, &p3, &p4, &p5, &p6, &p7, &p8)
            return (_return_val, p3, p4, p5, p6, p7, p8)
        finally:
            pass


    def get_point(self, const char* p2, double p3, double p4):

        try:


            _return_val = App_iGetPoint_EMAP(get_p_geo(), &self.handle, p2, &p3, &p4)
            return (_return_val, p3, p4)
        finally:
            pass


    def get_point_ex(self, const char* p2, double p3, double p4):

        try:


            _return_val = App_iGetPointEx_EMAP(get_p_geo(), &self.handle, p2, &p3, &p4)
            return (_return_val, p3, p4)
        finally:
            pass


    def get_point_3d(self, const char* p2, double p3, double p4, double p5):

        try:


            _return_val = App_iGetPoint3D_EMAP(get_p_geo(), &self.handle, p2, &p3, &p4, &p5)
            return (_return_val, p3, p4, p5)
        finally:
            pass


    def get_poly_line(self, const char* p2, WrapVV p3, WrapVV p4):

        try:


            _return_val = App_iGetPolyLine_EMAP(get_p_geo(), &self.handle, p2, &p3.handle, &p4.handle)
            return _return_val
        finally:
            pass


    def get_poly_line_xyz(self, const char* p2, WrapVV p3, WrapVV p4, WrapVV p5):

        try:


            _return_val = App_iGetPolyLineXYZ_EMAP(get_p_geo(), &self.handle, p2, &p3.handle, &p4.handle, &p5.handle)
            return _return_val
        finally:
            pass


    def get_rect(self, const char* p2, double p3, double p4, double p5, double p6):

        try:


            _return_val = App_iGetRect_EMAP(get_p_geo(), &self.handle, p2, &p3, &p4, &p5, &p6)
            return (_return_val, p3, p4, p5, p6)
        finally:
            pass


    def track_point(self, int32_t p2, double p3, double p4):

        try:


            _return_val = App_iTrackPoint_EMAP(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return (_return_val, p3, p4)
        finally:
            pass


# Map Viewport Mode Methods




    def get_aoi_area(self, double p2, double p3, double p4, double p5):

        try:


            App_GetAOIArea_EMAP(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            return (p2, p3, p4, p5)
        finally:
            pass


    def set_aoi_area(self, double p2, double p3, double p4, double p5):

        try:


            App_SetAOIArea_EMAP(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def set_viewport_mode(self, int32_t p2):

        try:


            App_SetViewportMode_EMAP(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


# Tracking Methods




    def get_selected_vertices(self, WrapVV p2, WrapVV p3):

        try:


            App_GetSelectedVertices_EMAP(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


# Virtual



    @classmethod
    def create_virtual(cls, const char* p1):

        try:


            _return_val = WrapEMAP(App_CreateVirtual_EMAP(get_p_geo(), p1))
            return _return_val
        finally:
            pass


# External Window



    @classmethod
    def load_control(cls, const char* p1, HWND p2):

        try:


            App_LoadControl_EMAP(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def load_with_view_control(cls, const char* p1, WrapEMAP p2, HWND p3):

        try:


            App_LoadWithViewControl_EMAP(get_p_geo(), p1, &p2.handle, p3)
            
        finally:
            pass


    pass



cdef class WrapEMAPTEMPLATE:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            App_Destroy_EMAPTEMPLATE(get_p_geo(), &self.handle)




# Drag-and-drop methods




    def drag_drop_enabled(self):

        try:


            _return_val = App_iDragDropEnabled_EMAPTEMPLATE(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def set_drag_drop_enabled(self, int32_t p2):

        try:


            App_SetDragDropEnabled_EMAPTEMPLATE(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


# General



    @classmethod
    def current(cls):

        try:


            _return_val = WrapEMAPTEMPLATE(App_Current_EMAPTEMPLATE(get_p_geo()))
            return _return_val
        finally:
            pass

    @classmethod
    def current_no_activate(cls):

        try:


            _return_val = WrapEMAPTEMPLATE(App_CurrentNoActivate_EMAPTEMPLATE(get_p_geo()))
            return _return_val
        finally:
            pass

    @classmethod
    def current_if_exists(cls):

        try:


            _return_val = WrapEMAPTEMPLATE(App_CurrentIfExists_EMAPTEMPLATE(get_p_geo()))
            return _return_val
        finally:
            pass



    @classmethod
    def get_map_templates_lst(cls, WrapLST p1, int32_t p2):

        try:


            _return_val = App_iGetMapTemplatesLST_EMAPTEMPLATE(get_p_geo(), &p1.handle, &p2)
            return _return_val
        finally:
            pass


    def get_name(self, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            App_IGetName_EMAPTEMPLATE(get_p_geo(), &self.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def have_current(cls):

        try:


            _return_val = App_iHaveCurrent_EMAPTEMPLATE(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def i_get_specified_map_name(cls, const char* p1, const char* p2, const char* p3):
        cdef int32_t p4 = 4*1040
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*1040)

            strcpy(cp3, p3)

            _return_val = App_iIGetSpecifiedMapName_EMAPTEMPLATE(get_p_geo(), p1, p2, cp3, &p4)
            return (_return_val, cp3)
        finally:
            if cp3: free(cp3)



    def is_locked(self):

        try:


            _return_val = App_iIsLocked_EMAPTEMPLATE(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def loaded(cls, const char* p1):

        try:


            _return_val = App_iLoaded_EMAPTEMPLATE(get_p_geo(), p1)
            return _return_val
        finally:
            pass


    def get_window_position(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            App_GetWindowPosition_EMAPTEMPLATE(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            return (p2, p3, p4, p5, p6, p7)
        finally:
            pass


    def set_window_position(self, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            App_SetWindowPosition_EMAPTEMPLATE(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass


    def read_only(self):

        try:


            _return_val = App_iReadOnly_EMAPTEMPLATE(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def load(cls, const char* p1):

        try:


            _return_val = WrapEMAPTEMPLATE(App_Load_EMAPTEMPLATE(get_p_geo(), p1))
            return _return_val
        finally:
            pass

    @classmethod
    def load_no_activate(cls, const char* p1):

        try:


            _return_val = WrapEMAPTEMPLATE(App_LoadNoActivate_EMAPTEMPLATE(get_p_geo(), p1))
            return _return_val
        finally:
            pass


    def lock(self):

        try:


            _return_val = WrapMAPTEMPLATE(App_Lock_EMAPTEMPLATE(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def make_current(self):

        try:


            App_MakeCurrent_EMAPTEMPLATE(get_p_geo(), &self.handle)
            
        finally:
            pass

    @classmethod
    def un_load(cls, const char* p1):

        try:


            App_UnLoad_EMAPTEMPLATE(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def un_load_all(cls):

        try:


            App_UnLoadAll_EMAPTEMPLATE(get_p_geo())
            
        finally:
            pass

    @classmethod
    def un_load_verify(cls, const char* p1, int32_t p2):

        try:


            App_UnLoadVerify_EMAPTEMPLATE(get_p_geo(), p1, &p2)
            
        finally:
            pass


    def un_lock(self):

        try:


            App_UnLock_EMAPTEMPLATE(get_p_geo(), &self.handle)
            
        finally:
            pass


# Input




    def get_box(self, const char* p2, double p3, double p4, double p5, double p6):

        try:


            _return_val = App_iGetBox_EMAPTEMPLATE(get_p_geo(), &self.handle, p2, &p3, &p4, &p5, &p6)
            return (_return_val, p3, p4, p5, p6)
        finally:
            pass


    def get_line(self, const char* p2, double p3, double p4, double p5, double p6):

        try:


            _return_val = App_iGetLine_EMAPTEMPLATE(get_p_geo(), &self.handle, p2, &p3, &p4, &p5, &p6)
            return (_return_val, p3, p4, p5, p6)
        finally:
            pass


    def get_point(self, const char* p2, double p3, double p4):

        try:


            _return_val = App_iGetPoint_EMAPTEMPLATE(get_p_geo(), &self.handle, p2, &p3, &p4)
            return (_return_val, p3, p4)
        finally:
            pass


    def get_rect(self, const char* p2, double p3, double p4, double p5, double p6):

        try:


            _return_val = App_iGetRect_EMAPTEMPLATE(get_p_geo(), &self.handle, p2, &p3, &p4, &p5, &p6)
            return (_return_val, p3, p4, p5, p6)
        finally:
            pass


    def track_point(self, int32_t p2, double p3, double p4):

        try:


            _return_val = App_iTrackPoint_EMAPTEMPLATE(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return (_return_val, p3, p4)
        finally:
            pass


# Selection Methods




    def get_item_selection(self, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            _return_val = App_iGetItemSelection_EMAPTEMPLATE(get_p_geo(), &self.handle, cp2, &p3)
            return (_return_val, cp2)
        finally:
            if cp2: free(cp2)



    def set_item_selection(self, const char* p2):

        try:


            App_SetItemSelection_EMAPTEMPLATE(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


# View Window




    def get_display_area(self, double p2, double p3, double p4, double p5):

        try:


            App_GetDisplayArea_EMAPTEMPLATE(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            return (p2, p3, p4, p5)
        finally:
            pass


    def get_template_layout_props(self, int32_t p2, double p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8, int32_t p9):

        try:


            App_GetTemplateLayoutProps_EMAPTEMPLATE(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9)
            return (p2, p3, p4, p5, p6, p7, p8, p9)
        finally:
            pass


    def get_window_state(self):

        try:


            _return_val = App_iGetWindowState_EMAPTEMPLATE(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def set_display_area(self, double p2, double p3, double p4, double p5):

        try:


            App_SetDisplayArea_EMAPTEMPLATE(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def set_template_layout_props(self, int32_t p2, double p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8, int32_t p9):

        try:


            App_SetTemplateLayoutProps_EMAPTEMPLATE(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9)
            
        finally:
            pass


    def set_window_state(self, int32_t p2):

        try:


            App_SetWindowState_EMAPTEMPLATE(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


# Virtual



    @classmethod
    def create_virtual(cls, const char* p1):

        try:


            _return_val = WrapEMAPTEMPLATE(App_CreateVirtual_EMAPTEMPLATE(get_p_geo(), p1))
            return _return_val
        finally:
            pass


    pass



cdef class WrapEUL3:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destr_SYS(get_p_geo(), &self.handle)





    def destr(self):

        try:


            _Destr_EUL3(get_p_geo(), &self.handle)
            
        finally:
            pass

    @classmethod
    def creat(cls, WrapIMG p1, WrapIMG p2, WrapIMG p3, WrapIMG p4, int32_t p5, double p6, double p7, double p8, int32_t p9, double p10, double p11):

        try:


            _return_val = WrapEUL3(Creat_EUL3(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5, &p6, &p7, &p8, &p9, &p10, &p11))
            return _return_val
        finally:
            pass


    def get_result(self, WrapVV p2, int32_t p3):

        try:


            GetResult_EUL3(get_p_geo(), &self.handle, &p2.handle, &p3)
            
        finally:
            pass


    def write(self, const char* p2):

        try:


            Write_EUL3(get_p_geo(), &self.handle, p2)
            
        finally:
            pass

    @classmethod
    def ex_euler_derive(cls, WrapVV p1, double p2, WrapVV p3, int32_t p4, WrapVV p5, WrapVV p6, int32_t p7):

        try:


            _return_val = ExEulerDerive_EUL3(get_p_geo(), &p1.handle, &p2, &p3.handle, &p4, &p5.handle, &p6.handle, &p7)
            return _return_val
        finally:
            pass

    @classmethod
    def ex_euler_calc(cls, int32_t p1, double p2, int32_t p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, int32_t p11, WrapVV p12, WrapVV p13, WrapVV p14, WrapVV p15, int32_t p16, WrapVV p17, WrapVV p18, WrapVV p19, WrapVV p20):

        try:


            _return_val = ExEulerCalc_EUL3(get_p_geo(), &p1, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12.handle, &p13.handle, &p14.handle, &p15.handle, &p16, &p17.handle, &p18.handle, &p19.handle, &p20.handle)
            return _return_val
        finally:
            pass

    pass



cdef class WrapEXP:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_EXP(get_p_geo(), &self.handle)




    @classmethod
    def create(cls, WrapDB p1, const char* p2, int32_t p3):

        try:


            _return_val = WrapEXP(Create_EXP(get_p_geo(), &p1.handle, p2, &p3))
            return _return_val
        finally:
            pass

    @classmethod
    def create_file(cls, WrapDB p1, const char* p2):

        try:


            _return_val = WrapEXP(CreateFile_EXP(get_p_geo(), &p1.handle, p2))
            return _return_val
        finally:
            pass



    pass



cdef class WrapFFT:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_FFT(get_p_geo(), &self.handle)





    def app_dens(self, double p2, double p3):

        try:


            AppDens_FFT(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def app_susc(self, double p2):

        try:


            AppSusc_FFT(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def band_pass(self, double p2, double p3, int32_t p4):

        try:


            BandPass_FFT(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def b_worth(self, double p2, double p3, int32_t p4):

        try:


            BWorth_FFT(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def rc_filter(self, double p2, int32_t p3):

        try:


            RCFilter_FFT(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def contin(self, double p2):

        try:


            Contin_FFT(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def cos_roll(self, double p2, double p3, double p4, int32_t p5):

        try:


            CosRoll_FFT(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def create(cls, WrapVV p1, double p2, int32_t p3):

        try:


            _return_val = WrapFFT(Create_FFT(get_p_geo(), &p1.handle, &p2, &p3))
            return _return_val
        finally:
            pass

    @classmethod
    def create_ex(cls, WrapVV p1, double p2, int32_t p3, double p4):

        try:


            _return_val = WrapFFT(CreateEx_FFT(get_p_geo(), &p1.handle, &p2, &p3, &p4))
            return _return_val
        finally:
            pass

    @classmethod
    def create_ref(cls, WrapVV p1, double p2, int32_t p3):

        try:


            _return_val = WrapFFT(CreateRef_FFT(get_p_geo(), &p1.handle, &p2, &p3))
            return _return_val
        finally:
            pass

    @classmethod
    def create_ref_ex(cls, WrapVV p1, double p2, int32_t p3, double p4, double p5):

        try:


            _return_val = WrapFFT(CreateRefEx_FFT(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5))
            return _return_val
        finally:
            pass




    def gaus(self, double p2, int32_t p3):

        try:


            Gaus_FFT(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def get_vv(self, WrapVV p2, WrapVV p3):

        try:


            GetVV_FFT(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def h_drv(self, double p2):

        try:


            HDrv_FFT(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def high_pass(self, double p2, double p3):

        try:


            HighPass_FFT(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def h_int(self):

        try:


            HInt_FFT(get_p_geo(), &self.handle)
            
        finally:
            pass


    def inverse(self, WrapVV p2, WrapVV p3):

        try:


            Inverse_FFT(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def low_pass(self, double p2):

        try:


            LowPass_FFT(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def red_pol(self, double p2, double p3, double p4, double p5):

        try:


            RedPol_FFT(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def nyquist(self):

        try:


            _return_val = rNyquist_FFT(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def samp_incr(self):

        try:


            _return_val = rSampIncr_FFT(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def wave_incr(self):

        try:


            _return_val = rWaveIncr_FFT(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def set_vv(self, WrapVV p2, WrapVV p3):

        try:


            SetVV_FFT(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def spectrum(self, WrapVV p2):

        try:


            Spectrum_FFT(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def v_drv(self, double p2):

        try:


            VDrv_FFT(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def v_int(self):

        try:


            VInt_FFT(get_p_geo(), &self.handle)
            
        finally:
            pass


    def write_spectrum(self, WrapVV p2, const char* p3):

        try:


            WriteSpectrum_FFT(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass

    pass



cdef class WrapFFT2:
    




    @classmethod
    def fft2_in(cls, WrapIMG p1, const char* p2, const char* p3):

        try:


            Fft2In_FFT2(get_p_geo(), &p1.handle, p2, p3)
            
        finally:
            pass

    @classmethod
    def filter_pg(cls, WrapPG p1, const char* p2, WrapTR p3, double p4, double p5, double p6):

        try:


            FilterPG_FFT2(get_p_geo(), &p1.handle, p2, &p3.handle, &p4, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def flt(cls, WrapIMG p1, const char* p2, const char* p3):

        try:


            Flt_FFT2(get_p_geo(), &p1.handle, p2, p3)
            
        finally:
            pass

    @classmethod
    def flt_inv(cls, WrapIMG p1, const char* p2, const char* p3):

        try:


            FltInv_FFT2(get_p_geo(), &p1.handle, p2, p3)
            
        finally:
            pass

    @classmethod
    def pow_spc(cls, WrapIMG p1, const char* p2):

        try:


            PowSpc_FFT2(get_p_geo(), &p1.handle, p2)
            
        finally:
            pass

    @classmethod
    def rad_spc(cls, WrapIMG p1, const char* p2):

        try:


            RadSpc_FFT2(get_p_geo(), &p1.handle, p2)
            
        finally:
            pass

    @classmethod
    def rad_spc1(cls, WrapIMG p1, WrapVV p2):

        try:


            RadSpc1_FFT2(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def rad_spc2(cls, WrapIMG p1, WrapIMG p2, WrapVV p3, WrapVV p4, int32_t p5):

        try:


            RadSpc2_FFT2(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5)
            
        finally:
            pass

    @classmethod
    def td_xd_y(cls, WrapIMG p1, WrapIMG p2, const char* p3, int32_t p4):

        try:


            TdXdY_FFT2(get_p_geo(), &p1.handle, &p2.handle, p3, &p4)
            
        finally:
            pass

    @classmethod
    def trans_pg(cls, WrapPG p1, int32_t p2):

        try:


            TransPG_FFT2(get_p_geo(), &p1.handle, &p2)
            
        finally:
            pass

    pass



cdef class WrapFLT:
    




    @classmethod
    def create(cls, const char* p1):

        try:


            _return_val = Create_FLT(get_p_geo(), p1)
            return _return_val
        finally:
            pass



    @classmethod
    def load(cls, const char* p1):

        try:


            _return_val = Load_FLT(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    pass



cdef class WrapGD:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_GD(get_p_geo(), &self.handle)




    @classmethod
    def create(cls, const char* p1, int32_t p2):

        try:


            _return_val = WrapGD(Create_GD(get_p_geo(), p1, &p2))
            return _return_val
        finally:
            pass



    pass



cdef class WrapGER:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_GER(get_p_geo(), &self.handle)




    @classmethod
    def create(cls, const char* p1):

        try:


            _return_val = WrapGER(Create_GER(get_p_geo(), p1))
            return _return_val
        finally:
            pass




    def get(self, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*16384
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*16384)

            strcpy(cp3, p3)

            _return_val = IiGet_GER(get_p_geo(), &self.handle, &p2, cp3, &p4)
            return (_return_val, cp3)
        finally:
            if cp3: free(cp3)



    def set_int(self, const char* p2, int32_t p3):

        try:


            SetInt_GER(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass


    def set_double(self, const char* p2, double p3):

        try:


            SetReal_GER(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass


    def set_string(self, const char* p2, const char* p3):

        try:


            SetString_GER(get_p_geo(), &self.handle, p2, p3)
            
        finally:
            pass

    pass



cdef class WrapGMSYS:
    




    @classmethod
    def launch(cls, const char* p1):

        try:


            Launch_GMSYS(get_p_geo(), p1)
            
        finally:
            pass

    pass



cdef class WrapGU:
    




    @classmethod
    def dipole_mag(cls, const char* p1, double p2, double p3, int32_t p4, int32_t p5, double p6, double p7):

        try:


            DipoleMag_GU(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass

    @classmethod
    def em_half_space_inv(cls, double p1, double p2, int32_t p3, double p4, double p5, WrapVV p6, WrapVV p7, WrapVV p8, WrapVV p9, int32_t p10, int32_t p11, double p12):

        try:


            EMHalfSpaceInv_GU(get_p_geo(), &p1, &p2, &p3, &p4, &p5, &p6.handle, &p7.handle, &p8.handle, &p9.handle, &p10, &p11, &p12)
            
        finally:
            pass

    @classmethod
    def em_half_space_vv(cls, double p1, double p2, int32_t p3, WrapVV p4, WrapVV p5, WrapVV p6, WrapVV p7):

        try:


            EMHalfSpaceVV_GU(get_p_geo(), &p1, &p2, &p3, &p4.handle, &p5.handle, &p6.handle, &p7.handle)
            
        finally:
            pass

    @classmethod
    def geometrics2_db(cls, WrapDB p1, WrapRA p2, WrapWA p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, double p8, double p9, double p10, double p11):

        try:


            Geometrics2DB_GU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11)
            
        finally:
            pass

    @classmethod
    def geometrics2_tbl(cls, WrapRA p1, WrapWA p2, WrapWA p3):

        try:


            Geometrics2TBL_GU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def geometrics_qc(cls, WrapWA p1, const char* p2, WrapVV p3, double p4, double p5, double p6, WrapVV p7, WrapVV p8):

        try:


            GeometricsQC_GU(get_p_geo(), &p1.handle, p2, &p3.handle, &p4, &p5, &p6, &p7.handle, &p8.handle)
            
        finally:
            pass

    @classmethod
    def geonics3138_dump2_db(cls, WrapDB p1, WrapRA p2, WrapRA p3, WrapWA p4, double p5, double p6):

        try:


            Geonics3138Dump2DB_GU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def geonics61_dump2_db(cls, WrapDB p1, WrapRA p2, WrapWA p3, double p4, double p5):

        try:


            Geonics61Dump2DB_GU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def geonics_dat2_db(cls, WrapDB p1, WrapRA p2, WrapWA p3, double p4, double p5):

        try:


            GeonicsDAT2DB_GU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def gr_curv_cor(cls, WrapVV p1, WrapVV p2, WrapVV p3):

        try:


            GrCurvCor_GU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def gr_curv_cor_ex(cls, WrapVV p1, WrapVV p2, WrapVV p3, double p4):

        try:


            GrCurvCorEx_GU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4)
            
        finally:
            pass

    @classmethod
    def gr_demvv(cls, WrapIMG p1, WrapVV p2, WrapVV p3, WrapVV p4):

        try:


            GrDEMVV_GU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass

    @classmethod
    def gr_test(cls, double p1, double p2, double p3, WrapVV p4, WrapVV p5, WrapVV p6, WrapVV p7, WrapVV p8, WrapVV p9):

        try:


            GrTest_GU(get_p_geo(), &p1, &p2, &p3, &p4.handle, &p5.handle, &p6.handle, &p7.handle, &p8.handle, &p9.handle)
            
        finally:
            pass

    @classmethod
    def gravity_still_reading_correction(cls, WrapDB p1, int32_t p2, int32_t p3, int32_t p4, const char* p5, int32_t p6):

        try:


            GravityStillReadingCorrection_GU(get_p_geo(), &p1.handle, &p2, &p3, &p4, p5, &p6)
            
        finally:
            pass

    @classmethod
    def em_layer(cls, double p1, double p2, double p3, int32_t p4, int32_t p5, WrapVV p6, WrapVV p7, double p8, double p9):

        try:


            _return_val = iEMLayer_GU(get_p_geo(), &p1, &p2, &p3, &p4, &p5, &p6.handle, &p7.handle, &p8, &p9)
            return (_return_val, p8, p9)
        finally:
            pass

    @classmethod
    def em_plate(cls, double p1, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, int32_t p10, WrapVV p11, int32_t p12, double p13, double p14, double p15, WrapVV p16, WrapVV p17, WrapVV p18, WrapVV p19, WrapVV p20, WrapVV p21):

        try:


            _return_val = iEMPlate_GU(get_p_geo(), &p1, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11.handle, &p12, &p13, &p14, &p15, &p16.handle, &p17.handle, &p18.handle, &p19.handle, &p20.handle, &p21.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def gen_ux_detect_symbols_group_name(cls, const char* p1, const char* p2, const char* p3):
        cdef int32_t p4 = 4*1040
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*1040)

            strcpy(cp3, p3)

            IGenUXDetectSymbolsGroupName_GU(get_p_geo(), p1, p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)


    @classmethod
    def import_daarc500_ethernet(cls, const char* p1, const char* p2, int32_t p3):

        try:


            ImportDAARC500Ethernet_GU(get_p_geo(), p1, p2, &p3)
            return p3
        finally:
            pass

    @classmethod
    def import_daarc500_serial(cls, const char* p1, int32_t p2, const char* p3, int32_t p4):

        try:


            ImportDAARC500Serial_GU(get_p_geo(), p1, &p2, p3, &p4)
            return p4
        finally:
            pass

    @classmethod
    def import_p190(cls, WrapDB p1, const char* p2, const char* p3, WrapWA p4):

        try:


            ImportP190_GU(get_p_geo(), &p1.handle, p2, p3, &p4.handle)
            
        finally:
            pass

    @classmethod
    def lag_daarc500_gps(cls, WrapVV p1, WrapVV p2, WrapVV p3):

        try:


            LagDAARC500GPS_GU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def maxwell_plate_corners(cls, double p1, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11, double p12, double p13, double p14, double p15, double p16, double p17, double p18, double p19, double p20):

        try:


            MaxwellPlateCorners_GU(get_p_geo(), &p1, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15, &p16, &p17, &p18, &p19, &p20)
            return (p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20)
        finally:
            pass

    @classmethod
    def scan_daarc500_ethernet(cls, const char* p1, int32_t p2, int32_t p3):

        try:


            ScanDAARC500Ethernet_GU(get_p_geo(), p1, &p2, &p3)
            return (p2, p3)
        finally:
            pass

    @classmethod
    def scan_daarc500_serial(cls, const char* p1, WrapVV p2, WrapVV p3):

        try:


            ScanDAARC500Serial_GU(get_p_geo(), p1, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def vv_euler(cls, WrapVV p1, WrapVV p2, WrapIMG p3, WrapIMG p4, WrapIMG p5, WrapIMG p6, WrapVV p7, WrapVV p8, WrapVV p9, WrapVV p10, WrapVV p11, WrapVV p12, int32_t p13, double p14, double p15, int32_t p16):

        try:


            VVEuler_GU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5.handle, &p6.handle, &p7.handle, &p8.handle, &p9.handle, &p10.handle, &p11.handle, &p12.handle, &p13, &p14, &p15, &p16)
            
        finally:
            pass

    @classmethod
    def vv_euler2(cls, WrapVV p1, WrapVV p2, WrapIMG p3, WrapIMG p4, WrapIMG p5, WrapIMG p6, WrapVV p7, WrapVV p8, WrapVV p9, WrapVV p10, WrapVV p11, WrapVV p12, WrapVV p13, double p14, double p15, int32_t p16):

        try:


            VVEuler2_GU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5.handle, &p6.handle, &p7.handle, &p8.handle, &p9.handle, &p10.handle, &p11.handle, &p12.handle, &p13.handle, &p14, &p15, &p16)
            
        finally:
            pass

    pass



cdef class WrapGUI:
    




    @classmethod
    def create_wnd_from_hwnd(cls, HWND p1):

        try:


            _return_val = App_CreateWNDFromHWND_GUI(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def fft2_spec_filter(cls, const char* p1, const char* p2):

        try:


            App_Fft2SpecFilter_GUI(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def get_parent_wnd(cls):

        try:


            _return_val = App_GetParentWND_GUI(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def get_printer_lst(cls, WrapLST p1):

        try:


            App_GetPrinterLST_GUI(get_p_geo(), &p1.handle)
            
        finally:
            pass

    @classmethod
    def get_window_state(cls):

        try:


            _return_val = App_iGetWindowState_GUI(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def set_window_state(cls, int32_t p1):

        try:


            App_SetWindowState_GUI(get_p_geo(), &p1)
            
        finally:
            pass

    @classmethod
    def get_window_position(cls, int32_t p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            App_GetWindowPosition_GUI(get_p_geo(), &p1, &p2, &p3, &p4, &p5)
            return (p1, p2, p3, p4, p5)
        finally:
            pass

    @classmethod
    def set_window_position(cls, int32_t p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            App_SetWindowPosition_GUI(get_p_geo(), &p1, &p2, &p3, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def get_client_window_area(cls, int32_t p1, int32_t p2, int32_t p3, int32_t p4):

        try:


            App_GetClientWindowArea_GUI(get_p_geo(), &p1, &p2, &p3, &p4)
            return (p1, p2, p3, p4)
        finally:
            pass

    @classmethod
    def grid_stat_hist(cls, const char* p1):

        try:


            App_GridStatHist_GUI(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def voxel_stat_hist(cls, const char* p1):

        try:


            App_VoxelStatHist_GUI(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def color_form(cls, int32_t p1, int32_t p2):

        try:


            _return_val = App_iColorForm_GUI(get_p_geo(), &p1, &p2)
            return (_return_val, p1)
        finally:
            pass

    @classmethod
    def color_transform(cls, WrapITR p1, WrapST p2):

        try:


            _return_val = App_iColorTransform_GUI(get_p_geo(), &p1.handle, &p2.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def coord_sys_wizard(cls, WrapIPJ p1, int32_t p2, int32_t p3, const char* p4, const char* p5):

        try:


            _return_val = App_iCoordSysWizard_GUI(get_p_geo(), &p1.handle, &p2, &p3, p4, p5)
            return _return_val
        finally:
            pass

    @classmethod
    def coord_sys_wizard_licensed(cls, WrapIPJ p1, int32_t p2, int32_t p3, const char* p4, const char* p5):

        try:


            _return_val = App_iCoordSysWizardLicensed_GUI(get_p_geo(), &p1.handle, &p2, &p3, p4, p5)
            return _return_val
        finally:
            pass

    @classmethod
    def coord_sys_wizard_grid(cls, WrapIPJ p1, WrapIPJ p2, int32_t p3, int32_t p4, const char* p5, const char* p6, int32_t p7, int32_t p8, double p9, double p10, double p11, double p12, double p13):

        try:


            _return_val = App_iCoordSysWizardGrid_GUI(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, p5, p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13)
            return (_return_val, p9, p10, p11, p12, p13)
        finally:
            pass

    @classmethod
    def database_type(cls, const char* p1, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            _return_val = App_iDatabaseType_GUI(get_p_geo(), p1, cp2, &p3)
            return (_return_val, cp2)
        finally:
            if cp2: free(cp2)


    @classmethod
    def datamine_type(cls, const char* p1, int32_t p2):

        try:


            _return_val = App_iDatamineType_GUI(get_p_geo(), p1, &p2)
            return (_return_val, p2)
        finally:
            pass

    @classmethod
    def export_xyz_template_editor(cls, WrapDB p1, const char* p2, int32_t p3):

        try:


            _return_val = App_iExportXYZTemplateEditor_GUI(get_p_geo(), &p1.handle, p2, &p3)
            return _return_val
        finally:
            pass

    @classmethod
    def export_xyz_template_editor_ex(cls, WrapEDB p1, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            _return_val = App_iExportXYZTemplateEditorEx_GUI(get_p_geo(), &p1.handle, cp2, &p3)
            return (_return_val, cp2)
        finally:
            if cp2: free(cp2)


    @classmethod
    def file_filter_index(cls, const char* p1):

        try:


            _return_val = iFileFilterIndex_GUI(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def gcs_datum_warning_shp(cls, const char* p1, WrapIPJ p2):

        try:


            _return_val = iGCSDatumWarningSHP_GUI(get_p_geo(), p1, &p2.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def gcs_datum_warning_shpdb_ex(cls, WrapLST p1, WrapLST p2, WrapLST p3, WrapDB p4):

        try:


            _return_val = iGCSDatumWarningSHPDBEx_GUI(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def gcs_datum_warning_shp_ex(cls, WrapLST p1, WrapLST p2, WrapLST p3, WrapMVIEW p4):

        try:


            _return_val = iGCSDatumWarningSHPEx_GUI(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def get_area_of_interest(cls, double p1, double p2, double p3, double p4, WrapPLY p5, WrapIPJ p6):

        try:


            _return_val = App_iGetAreaOfInterest_GUI(get_p_geo(), &p1, &p2, &p3, &p4, &p5.handle, &p6.handle)
            return (_return_val, p1, p2, p3, p4)
        finally:
            pass

    @classmethod
    def get_area_of_interest_3d(cls, double p1, double p2, double p3, double p4, double p5, double p6, WrapPLY p7, WrapIPJ p8):

        try:


            _return_val = App_iGetAreaOfInterest3D_GUI(get_p_geo(), &p1, &p2, &p3, &p4, &p5, &p6, &p7.handle, &p8.handle)
            return (_return_val, p1, p2, p3, p4, p5, p6)
        finally:
            pass

    @classmethod
    def get_dat_defaults(cls, int32_t p1, int32_t p2, const char* p3, const char* p5):
        cdef int32_t p4 = 4*1040
        cdef int32_t p6 = 4*1040
        cdef char* cp3 = NULL
        cdef char* cp5 = NULL

        try:
            cp3 = <char*>malloc(4*1040)
            cp5 = <char*>malloc(4*1040)

            strcpy(cp3, p3)
            strcpy(cp5, p5)

            IGetDATDefaults_GUI(get_p_geo(), &p1, &p2, cp3, &p4, cp5, &p6)
            return (cp3, cp5)
        finally:
            if cp3: free(cp3)
            if cp5: free(cp5)


    @classmethod
    def get_file_filter(cls, int32_t p1, const char* p2, const char* p4, const char* p6, int32_t p8):
        cdef int32_t p3 = 4*64
        cdef int32_t p5 = 4*64
        cdef int32_t p7 = 4*64
        cdef char* cp2 = NULL
        cdef char* cp4 = NULL
        cdef char* cp6 = NULL

        try:
            cp2 = <char*>malloc(4*64)
            cp4 = <char*>malloc(4*64)
            cp6 = <char*>malloc(4*64)

            strcpy(cp2, p2)
            strcpy(cp4, p4)
            strcpy(cp6, p6)

            IGetFileFilter_GUI(get_p_geo(), &p1, cp2, &p3, cp4, &p5, cp6, &p7, &p8)
            return (cp2, cp4, cp6, p8)
        finally:
            if cp2: free(cp2)
            if cp4: free(cp4)
            if cp6: free(cp6)


    @classmethod
    def get_gs_directory(cls, int32_t p1, const char* p2):
        cdef int32_t p3 = 4*1040
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*1040)

            strcpy(cp2, p2)

            IGetGSDirectory_GUI(get_p_geo(), &p1, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def browse_dir(cls, const char* p1, const char* p2, const char* p3):
        cdef int32_t p4 = 4*1040
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*1040)

            strcpy(cp3, p3)

            _return_val = App_IiBrowseDir_GUI(get_p_geo(), p1, p2, cp3, &p4)
            return (_return_val, cp3)
        finally:
            if cp3: free(cp3)


    @classmethod
    def color_transform_ex(cls, WrapITR p1, WrapST p2, int32_t p3, int32_t p4, const char* p5):
        cdef int32_t p6 = 4*1040
        cdef char* cp5 = NULL

        try:
            cp5 = <char*>malloc(4*1040)

            strcpy(cp5, p5)

            _return_val = App_IiColorTransformEx_GUI(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, cp5, &p6)
            return (_return_val, cp5)
        finally:
            if cp5: free(cp5)


    @classmethod
    def cumulative_percent(cls, const char* p1, WrapITR p3):
        cdef int32_t p2 = 4*1040
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*1040)

            strcpy(cp1, p1)

            _return_val = App_IiCumulativePercent_GUI(get_p_geo(), cp1, &p2, &p3.handle)
            return (_return_val, cp1)
        finally:
            if cp1: free(cp1)


    @classmethod
    def dat_file_form(cls, const char* p1, const char* p2, const char* p3, int32_t p5, int32_t p6, int32_t p7):
        cdef int32_t p4 = 4*16384
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*16384)

            strcpy(cp3, p3)

            _return_val = App_IiDatFileForm_GUI(get_p_geo(), p1, p2, cp3, &p4, &p5, &p6, &p7)
            return (_return_val, cp3)
        finally:
            if cp3: free(cp3)


    @classmethod
    def gen_file_form(cls, const char* p1, WrapVV p2, int32_t p3, const char* p4, const char* p5, int32_t p7, int32_t p8):
        cdef int32_t p6 = 4*16384
        cdef char* cp5 = NULL

        try:
            cp5 = <char*>malloc(4*16384)

            strcpy(cp5, p5)

            _return_val = App_IiGenFileForm_GUI(get_p_geo(), p1, &p2.handle, &p3, p4, cp5, &p6, &p7, &p8)
            return (_return_val, cp5)
        finally:
            if cp5: free(cp5)


    @classmethod
    def custom_file_form(cls, const char* p1, const char* p2, const char* p3, const char* p4, int32_t p6, int32_t p7):
        cdef int32_t p5 = 4*16384
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*16384)

            strcpy(cp4, p4)

            _return_val = App_IiCustomFileForm_GUI(get_p_geo(), p1, p2, p3, cp4, &p5, &p6, &p7)
            return (_return_val, cp4)
        finally:
            if cp4: free(cp4)


    @classmethod
    def import_drill_database_ado2(cls, const char* p1, const char* p2, const char* p4, int32_t p6, WrapREG p7):
        cdef int32_t p3 = 4*1040
        cdef int32_t p5 = 4*1040
        cdef char* cp2 = NULL
        cdef char* cp4 = NULL

        try:
            cp2 = <char*>malloc(4*1040)
            cp4 = <char*>malloc(4*1040)

            strcpy(cp2, p2)
            strcpy(cp4, p4)

            _return_val = App_IiImportDrillDatabaseADO2_GUI(get_p_geo(), p1, cp2, &p3, cp4, &p5, &p6, &p7.handle)
            return (_return_val, cp2, cp4, p6)
        finally:
            if cp2: free(cp2)
            if cp4: free(cp4)


    @classmethod
    def import_drill_database_esri(cls, const char* p1, const char* p2, const char* p4, int32_t p6, int32_t p7, WrapREG p8):
        cdef int32_t p3 = 4*1040
        cdef int32_t p5 = 4*1040
        cdef char* cp2 = NULL
        cdef char* cp4 = NULL

        try:
            cp2 = <char*>malloc(4*1040)
            cp4 = <char*>malloc(4*1040)

            strcpy(cp2, p2)
            strcpy(cp4, p4)

            _return_val = App_IiImportDrillDatabaseESRI_GUI(get_p_geo(), p1, cp2, &p3, cp4, &p5, &p6, &p7, &p8.handle)
            return (_return_val, cp2, cp4, p6)
        finally:
            if cp2: free(cp2)
            if cp4: free(cp4)


    @classmethod
    def import_drill_database_odbc(cls, const char* p1, const char* p3, const char* p5, int32_t p7, WrapREG p8):
        cdef int32_t p2 = 4*16384
        cdef int32_t p4 = 4*1040
        cdef int32_t p6 = 4*1040
        cdef char* cp1 = NULL
        cdef char* cp3 = NULL
        cdef char* cp5 = NULL

        try:
            cp1 = <char*>malloc(4*16384)
            cp3 = <char*>malloc(4*1040)
            cp5 = <char*>malloc(4*1040)

            strcpy(cp1, p1)
            strcpy(cp3, p3)
            strcpy(cp5, p5)

            _return_val = App_IiImportDrillDatabaseODBC_GUI(get_p_geo(), cp1, &p2, cp3, &p4, cp5, &p6, &p7, &p8.handle)
            return (_return_val, cp1, cp3, cp5, p7)
        finally:
            if cp1: free(cp1)
            if cp3: free(cp3)
            if cp5: free(cp5)


    @classmethod
    def import_drill_database_odbc_maxwell(cls, const char* p1, const char* p3, const char* p5, int32_t p7, WrapREG p8):
        cdef int32_t p2 = 4*16384
        cdef int32_t p4 = 4*1040
        cdef int32_t p6 = 4*1040
        cdef char* cp1 = NULL
        cdef char* cp3 = NULL
        cdef char* cp5 = NULL

        try:
            cp1 = <char*>malloc(4*16384)
            cp3 = <char*>malloc(4*1040)
            cp5 = <char*>malloc(4*1040)

            strcpy(cp1, p1)
            strcpy(cp3, p3)
            strcpy(cp5, p5)

            _return_val = App_IiImportDrillDatabaseODBCMaxwell_GUI(get_p_geo(), cp1, &p2, cp3, &p4, cp5, &p6, &p7, &p8.handle)
            return (_return_val, cp1, cp3, cp5, p7)
        finally:
            if cp1: free(cp1)
            if cp3: free(cp3)
            if cp5: free(cp5)


    @classmethod
    def import_ascii_wizard(cls, const char* p1, const char* p2):

        try:


            _return_val = App_iImportAsciiWizard_GUI(get_p_geo(), p1, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def import_chem_database(cls, const char* p1, const char* p2, const char* p3, int32_t p5):
        cdef int32_t p4 = 4*1040
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*1040)

            strcpy(cp3, p3)

            _return_val = App_iImportChemDatabase_GUI(get_p_geo(), p1, p2, cp3, &p4, &p5)
            return (_return_val, cp3)
        finally:
            if cp3: free(cp3)


    @classmethod
    def import_chem_database_ado(cls, const char* p1, const char* p2, const char* p3, int32_t p5):
        cdef int32_t p4 = 4*1040
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*1040)

            strcpy(cp3, p3)

            _return_val = App_iImportChemDatabaseADO_GUI(get_p_geo(), p1, p2, cp3, &p4, &p5)
            return (_return_val, cp3)
        finally:
            if cp3: free(cp3)


    @classmethod
    def import_database(cls, const char* p1, const char* p2, const char* p3):
        cdef int32_t p4 = 4*1040
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*1040)

            strcpy(cp3, p3)

            _return_val = App_iImportDatabase_GUI(get_p_geo(), p1, p2, cp3, &p4)
            return (_return_val, cp3)
        finally:
            if cp3: free(cp3)


    @classmethod
    def import_database_ado(cls, const char* p1, const char* p2, const char* p3):
        cdef int32_t p4 = 4*1040
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*1040)

            strcpy(cp3, p3)

            _return_val = App_iImportDatabaseADO_GUI(get_p_geo(), p1, p2, cp3, &p4)
            return (_return_val, cp3)
        finally:
            if cp3: free(cp3)


    @classmethod
    def import_database_sql(cls, const char* p1, const char* p2, const char* p3, const char* p4):
        cdef int32_t p5 = 4*1040
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*1040)

            strcpy(cp4, p4)

            _return_val = App_iImportDatabaseSQL_GUI(get_p_geo(), p1, p2, p3, cp4, &p5)
            return (_return_val, cp4)
        finally:
            if cp4: free(cp4)


    @classmethod
    def import_database_sqlado(cls, const char* p1, const char* p2, const char* p3, const char* p4):
        cdef int32_t p5 = 4*1040
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*1040)

            strcpy(cp4, p4)

            _return_val = App_iImportDatabaseSQLADO_GUI(get_p_geo(), p1, p2, p3, cp4, &p5)
            return (_return_val, cp4)
        finally:
            if cp4: free(cp4)


    @classmethod
    def import_drill_database_ado(cls, const char* p1, const char* p2, const char* p3, int32_t p5, WrapREG p6):
        cdef int32_t p4 = 4*1040
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*1040)

            strcpy(cp3, p3)

            _return_val = App_iImportDrillDatabaseADO_GUI(get_p_geo(), p1, p2, cp3, &p4, &p5, &p6.handle)
            return (_return_val, cp3, p5)
        finally:
            if cp3: free(cp3)


    @classmethod
    def import_template_sql(cls, const char* p1, const char* p2, const char* p3, const char* p4):

        try:


            _return_val = App_iImportTemplateSQL_GUI(get_p_geo(), p1, p2, p3, p4)
            return _return_val
        finally:
            pass

    @classmethod
    def import_template_sqlado(cls, const char* p1, const char* p2, const char* p3, const char* p4):

        try:


            _return_val = App_iImportTemplateSQLADO_GUI(get_p_geo(), p1, p2, p3, p4)
            return _return_val
        finally:
            pass

    @classmethod
    def import_xyz_template_editor(cls, WrapDB p1, const char* p2, int32_t p3, const char* p4):

        try:


            _return_val = App_iImportXYZTemplateEditor_GUI(get_p_geo(), &p1.handle, p2, &p3, p4)
            return _return_val
        finally:
            pass

    @classmethod
    def odbc_file_connect(cls, const char* p1, const char* p2, int32_t p4, const char* p5):
        cdef int32_t p3 = 4*16384
        cdef int32_t p6 = 4*1040
        cdef char* cp2 = NULL
        cdef char* cp5 = NULL

        try:
            cp2 = <char*>malloc(4*16384)
            cp5 = <char*>malloc(4*1040)

            strcpy(cp2, p2)
            strcpy(cp5, p5)

            _return_val = App_IiODBCFileConnect_GUI(get_p_geo(), p1, cp2, &p3, &p4, cp5, &p6)
            return (_return_val, cp2, cp5)
        finally:
            if cp2: free(cp2)
            if cp5: free(cp5)


    @classmethod
    def symbol_form(cls, const char* p1, int32_t p3, int32_t p4, int32_t p5, double p6, double p7, int32_t p8, int32_t p9):
        cdef int32_t p2 = 4*1040
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*1040)

            strcpy(cp1, p1)

            _return_val = App_IiSymbolForm_GUI(get_p_geo(), cp1, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9)
            return (_return_val, cp1, p3, p4, p5, p6, p7, p8, p9)
        finally:
            if cp1: free(cp1)


    @classmethod
    def meta_data_tool(cls, WrapMETA p1, int32_t p2, int32_t p3):

        try:


            _return_val = App_iMetaDataTool_GUI(get_p_geo(), &p1.handle, &p2, &p3)
            return _return_val
        finally:
            pass

    @classmethod
    def import_chem_wizard(cls, const char* p1, const char* p2, int32_t p3):

        try:


            App_ImportChemWizard_GUI(get_p_geo(), p1, p2, &p3)
            
        finally:
            pass

    @classmethod
    def import_drill_wizard(cls, const char* p1, const char* p2, const char* p3, int32_t p4, int32_t p5, WrapREG p6):

        try:


            App_ImportDrillWizard_GUI(get_p_geo(), p1, p2, p3, &p4, &p5, &p6.handle)
            return p5
        finally:
            pass

    @classmethod
    def internet_trust(cls):

        try:


            App_InternetTrust_GUI(get_p_geo())
            
        finally:
            pass

    @classmethod
    def pattern_form(cls, int32_t p1, double p2, int32_t p3, double p4, int32_t p5, int32_t p6):

        try:


            _return_val = App_iPatternForm_GUI(get_p_geo(), &p1, &p2, &p3, &p4, &p5, &p6)
            return (_return_val, p1, p2, p3, p4, p5, p6)
        finally:
            pass

    @classmethod
    def line_pattern_form(cls, int32_t p1, double p2, double p3, int32_t p4):

        try:


            _return_val = App_iLinePatternForm_GUI(get_p_geo(), &p1, &p2, &p3, &p4)
            return (_return_val, p1, p2, p3, p4)
        finally:
            pass

    @classmethod
    def two_panel_selection(cls, WrapLST p1, WrapLST p2, const char* p3):

        try:


            _return_val = App_iTwoPanelSelection_GUI(get_p_geo(), &p1.handle, &p2.handle, p3)
            return _return_val
        finally:
            pass

    @classmethod
    def two_panel_selection2(cls, WrapLST p1, WrapLST p2, const char* p3):

        try:


            _return_val = App_iTwoPanelSelection2_GUI(get_p_geo(), &p1.handle, &p2.handle, p3)
            return _return_val
        finally:
            pass

    @classmethod
    def two_panel_selection_ex(cls, WrapLST p1, WrapLST p2, int32_t p3, int32_t p4, const char* p5):

        try:


            _return_val = App_iTwoPanelSelectionEx_GUI(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, p5)
            return _return_val
        finally:
            pass

    @classmethod
    def two_panel_selection_ex2(cls, WrapLST p1, WrapLST p2, int32_t p3, int32_t p4, const char* p5, const char* p6):

        try:


            _return_val = App_iTwoPanelSelectionEx2_GUI(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, p5, p6)
            return _return_val
        finally:
            pass

    @classmethod
    def launch_single_geo_dotnetx_tool(cls, const char* p1, const char* p2, WrapMETA p3):

        try:


            App_LaunchSingleGeoDOTNETXTool_GUI(get_p_geo(), p1, p2, &p3.handle)
            
        finally:
            pass

    @classmethod
    def launch_geo_dotnetx_tool(cls, const char* p1, const char* p2, WrapMETA p3):

        try:


            App_LaunchGeoDOTNETXTool_GUI(get_p_geo(), p1, p2, &p3.handle)
            
        finally:
            pass

    @classmethod
    def launch_geo_x_tool(cls, const char* p1, const char* p2, WrapMETA p3):

        try:


            App_LaunchGeoXTool_GUI(get_p_geo(), p1, p2, &p3.handle)
            
        finally:
            pass

    @classmethod
    def launch_single_geo_dotnetx_tool_ex(cls, const char* p1, const char* p2, WrapMETA p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            App_LaunchSingleGeoDOTNETXToolEx_GUI(get_p_geo(), p1, p2, &p3.handle, &p4, &p5, &p6, &p7)
            
        finally:
            pass

    @classmethod
    def launch_geo_dotnetx_tool_ex(cls, const char* p1, const char* p2, WrapMETA p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            App_LaunchGeoDOTNETXToolEx_GUI(get_p_geo(), p1, p2, &p3.handle, &p4, &p5, &p6, &p7)
            
        finally:
            pass

    @classmethod
    def launch_geo_x_tool_ex(cls, const char* p1, const char* p2, WrapMETA p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            App_LaunchGeoXToolEx_GUI(get_p_geo(), p1, p2, &p3.handle, &p4, &p5, &p6, &p7)
            
        finally:
            pass

    @classmethod
    def meta_data_viewer(cls, WrapMETA p1, int32_t p2, int32_t p3):

        try:


            App_MetaDataViewer_GUI(get_p_geo(), &p1.handle, &p2, &p3)
            
        finally:
            pass

    @classmethod
    def print_file(cls, const char* p1):

        try:


            App_PrintFile_GUI(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def render_pattern(cls, HDC p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, double p7, int32_t p8, double p9, int32_t p10, int32_t p11, int32_t p12, int32_t p13, int32_t p14):

        try:


            App_RenderPattern_GUI(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14)
            
        finally:
            pass

    @classmethod
    def render_line_pattern(cls, HDC p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, double p7, double p8, int32_t p9, int32_t p10, int32_t p11, int32_t p12):

        try:


            App_RenderLinePattern_GUI(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12)
            
        finally:
            pass

    @classmethod
    def set_parent_wnd(cls, int32_t p1):

        try:


            App_SetParentWND_GUI(get_p_geo(), &p1)
            
        finally:
            pass

    @classmethod
    def set_printer(cls, const char* p1):

        try:


            App_SetPrinter_GUI(get_p_geo(), p1)
            
        finally:
            pass

    @classmethod
    def set_prog_always_on(cls, int32_t p1):

        try:


            App_SetProgAlwaysOn_GUI(get_p_geo(), &p1)
            
        finally:
            pass

    @classmethod
    def show_direct_hist(cls, double p1, double p2, double p3, double p4, double p5, int32_t p6, WrapVV p7):

        try:


            App_ShowDirectHist_GUI(get_p_geo(), &p1, &p2, &p3, &p4, &p5, &p6, &p7.handle)
            
        finally:
            pass

    @classmethod
    def show_hist(cls, WrapST p1):

        try:


            App_ShowHist_GUI(get_p_geo(), &p1.handle)
            
        finally:
            pass

    @classmethod
    def simple_map_dialog(cls, WrapMAP p1, const char* p2, const char* p3):

        try:


            App_SimpleMapDialog_GUI(get_p_geo(), &p1.handle, p2, p3)
            
        finally:
            pass

    @classmethod
    def thematic_voxel_info(cls, WrapVOX p1):

        try:


            App_ThematicVoxelInfo_GUI(get_p_geo(), &p1.handle)
            
        finally:
            pass

    @classmethod
    def show_3d_viewer_dialog(cls, const char* p1, const char* p2):

        try:


            App_Show3DViewerDialog_GUI(get_p_geo(), p1, p2)
            
        finally:
            pass

    pass



cdef class WrapHTTP:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_HTTP(get_p_geo(), &self.handle)




    @classmethod
    def create(cls, const char* p1, const char* p2, const char* p3, const char* p4):

        try:


            _return_val = WrapHTTP(Create_HTTP(get_p_geo(), p1, p2, p3, p4))
            return _return_val
        finally:
            pass




    def download(self, const char* p2, WrapBF p3, int32_t p4):

        try:


            Download_HTTP(get_p_geo(), &self.handle, p2, &p3.handle, &p4)
            
        finally:
            pass


    def silent_download(self, const char* p2, WrapBF p3, int32_t p4):

        try:


            SilentDownload_HTTP(get_p_geo(), &self.handle, p2, &p3.handle, &p4)
            
        finally:
            pass


    def get(self, const char* p2, const char* p3, WrapBF p4, WrapBF p5):

        try:


            Get_HTTP(get_p_geo(), &self.handle, p2, p3, &p4.handle, &p5.handle)
            
        finally:
            pass


    def post(self, const char* p2, const char* p3, WrapBF p4):

        try:


            Post_HTTP(get_p_geo(), &self.handle, p2, p3, &p4.handle)
            
        finally:
            pass


    def set_proxy_credentials(self, const char* p2, const char* p3):

        try:


            SetProxyCredentials_HTTP(get_p_geo(), &self.handle, p2, p3)
            
        finally:
            pass

    pass



cdef class WrapIEXP:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_IEXP(get_p_geo(), &self.handle)





    def add_grid(self, WrapIMG p2, const char* p3):

        try:


            AddGrid_IEXP(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass

    @classmethod
    def create(cls):

        try:


            _return_val = WrapIEXP(Create_IEXP(get_p_geo()))
            return _return_val
        finally:
            pass




    def do_formula(self, const char* p2, int32_t p3):

        try:


            DoFormula_IEXP(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass

    pass



cdef class WrapINTERNET:
    




    @classmethod
    def download_http(cls, const char* p1, const char* p2, int32_t p3):

        try:


            _return_val = iDownloadHTTP_INTERNET(get_p_geo(), p1, p2, &p3)
            return _return_val
        finally:
            pass

    @classmethod
    def send_mail(cls, const char* p1, const char* p2, const char* p3, const char* p4, const char* p5, const char* p6, const char* p7, const char* p8):

        try:


            SendMail_INTERNET(get_p_geo(), p1, p2, p3, p4, p5, p6, p7, p8)
            
        finally:
            pass

    pass



cdef class WrapIP:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_IP(get_p_geo(), &self.handle)




# Plot Jobs



    @classmethod
    def convert_ubcip2_d_to_grid(cls, const char* p1, WrapPG p2, WrapVV p3, WrapVV p4, double p5, double p6, double p7, double p8, int32_t p9):

        try:


            ConvertUBCIP2DToGrid_IP(get_p_geo(), p1, &p2.handle, &p3.handle, &p4.handle, &p5, &p6, &p7, &p8, &p9)
            
        finally:
            pass


    def create_default_job(self, const char* p2, int32_t p3):

        try:


            CreateDefaultJob_IP(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass


    def export_ubcip3(self, WrapDB p2, const char* p3, const char* p4, const char* p5, const char* p6, const char* p7, double p8):

        try:


            ExportUBCIP3_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4, p5, p6, p7, &p8)
            
        finally:
            pass

    @classmethod
    def export_ubcip_control(cls, const char* p1, int32_t p2, int32_t p3, double p4, const char* p5, const char* p6, const char* p7, const char* p8, const char* p9, const char* p10, const char* p11, const char* p12):

        try:


            ExportUBCIPControl_IP(get_p_geo(), p1, &p2, &p3, &p4, p5, p6, p7, p8, p9, p10, p11, p12)
            
        finally:
            pass

    @classmethod
    def export_ubcip_control_v5(cls, const char* p1, int32_t p2, double p3, const char* p4, const char* p5, int32_t p6, const char* p7, int32_t p8, const char* p9, int32_t p10, const char* p11, int32_t p12, const char* p13, int32_t p14, const char* p15, const char* p16):

        try:


            ExportUBCIPControlV5_IP(get_p_geo(), p1, &p2, &p3, p4, p5, &p6, p7, &p8, p9, &p10, p11, &p12, p13, &p14, p15, p16)
            
        finally:
            pass


    def export_ubc_res3(self, WrapDB p2, const char* p3, const char* p4, const char* p5, const char* p6, const char* p7, const char* p8, double p9):

        try:


            ExportUBCRes3_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4, p5, p6, p7, p8, &p9)
            
        finally:
            pass

    @classmethod
    def export_ubc_res_control(cls, const char* p1, int32_t p2, int32_t p3, double p4, const char* p5, const char* p6, const char* p7, const char* p8, double p9, const char* p10, const char* p11):

        try:


            ExportUBCResControl_IP(get_p_geo(), p1, &p2, &p3, &p4, p5, p6, p7, p8, &p9, p10, p11)
            
        finally:
            pass

    @classmethod
    def export_ubc_res_control_v5(cls, const char* p1, int32_t p2, double p3, const char* p4, const char* p5, int32_t p6, const char* p7, int32_t p8, const char* p9, int32_t p10, const char* p11, int32_t p12, const char* p13, const char* p14):

        try:


            ExportUBCResControlV5_IP(get_p_geo(), p1, &p2, &p3, p4, p5, &p6, p7, &p8, p9, &p10, p11, &p12, p13, p14)
            
        finally:
            pass


    def export_data_to_ubc_3d(self, WrapDB p2, WrapLST p3, int32_t p4, int32_t p5, const char* p6, const char* p7, const char* p8, int32_t p9, const char* p10, const char* p11):

        try:


            ExportDataToUBC3D_IP(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4, &p5, p6, p7, p8, &p9, p10, p11)
            
        finally:
            pass

    @classmethod
    def import_ubc2_dmod(cls, const char* p1, int32_t p2):

        try:


            _return_val = WrapPG(ImportUBC2DMOD_IP(get_p_geo(), p1, &p2))
            return _return_val
        finally:
            pass

    @classmethod
    def import_ubc2_dmsh(cls, const char* p1, double p2, double p3, WrapVV p4, WrapVV p5):

        try:


            ImportUBC2DMSH_IP(get_p_geo(), p1, &p2, &p3, &p4.handle, &p5.handle)
            return (p2, p3)
        finally:
            pass

    @classmethod
    def import_ubc2_d_topo(cls, const char* p1, double p2, WrapVV p3, WrapVV p4):

        try:


            ImportUBC2DTopo_IP(get_p_geo(), p1, &p2, &p3.handle, &p4.handle)
            return p2
        finally:
            pass


    def open_job(self, const char* p2, int32_t p3):

        try:


            OpenJob_IP(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass


    def save_job(self, const char* p2, int32_t p3):

        try:


            SaveJob_IP(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass

    @classmethod
    def trim_ubc2_d_model(cls, WrapPG p1, int32_t p2, int32_t p3, int32_t p4, WrapVV p5, WrapVV p6, double p7):

        try:


            _return_val = WrapPG(TrimUBC2DModel_IP(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5.handle, &p6.handle, &p7))
            return (_return_val, p7)
        finally:
            pass


    def write_distant_electrodes(self, WrapDB p2):

        try:


            WriteDistantElectrodes_IP(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def write_distant_electrodes_lst(self, WrapDB p2, WrapLST p3):

        try:


            WriteDistantElectrodesLST_IP(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


# Miscellaneous




    def average_duplicates_qc(self, WrapDB p2, const char* p3, const char* p4, int32_t p5):

        try:


            AverageDuplicatesQC_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4, &p5)
            
        finally:
            pass

    @classmethod
    def create(cls):

        try:


            _return_val = WrapIP(Create_IP(get_p_geo()))
            return _return_val
        finally:
            pass




    def export_i2_x(self, WrapDB p2, const char* p3, const char* p4, const char* p5, const char* p6, const char* p7, const char* p8, const char* p9, const char* p10, const char* p11, const char* p12):

        try:


            ExportI2X_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)
            
        finally:
            pass


    def export_ipdata(self, WrapDB p2, const char* p3, const char* p4):

        try:


            ExportIPDATA_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4)
            
        finally:
            pass


    def export_ipdata_dir(self, WrapDB p2, const char* p3, const char* p4, const char* p5):

        try:


            ExportIPDATADir_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4, p5)
            
        finally:
            pass


    def export_ipred(self, WrapDB p2, const char* p3, const char* p4, const char* p5, int32_t p6, const char* p7, double p8, double p9, int32_t p10):

        try:


            ExportIPRED_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4, p5, &p6, p7, &p8, &p9, &p10)
            
        finally:
            pass


    def export_ipred_dir(self, WrapDB p2, const char* p3, const char* p4, const char* p5, int32_t p6, const char* p7, double p8, double p9, int32_t p10, const char* p11):

        try:


            ExportIPREDDir_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4, p5, &p6, p7, &p8, &p9, &p10, p11)
            
        finally:
            pass


    def export_line_ipdata(self, WrapDB p2, const char* p3, const char* p4, const char* p5):

        try:


            ExportLineIPDATA_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4, p5)
            
        finally:
            pass


    def export_sgdf(self, WrapDB p2, const char* p3, const char* p4, const char* p5):

        try:


            ExportSGDF_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4, p5)
            
        finally:
            pass


    def get_n_value_lst(self, WrapDB p2, WrapLST p3):

        try:


            GetNValueLST_IP(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def get_topo_line(self, WrapDB p2, const char* p3, double p4, double p5, double p6, WrapVV p7):

        try:


            GetTopoLine_IP(get_p_geo(), &self.handle, &p2.handle, p3, &p4, &p5, &p6, &p7.handle)
            
        finally:
            pass


    def get_chan_domain(self, WrapDB p2, const char* p3):

        try:


            _return_val = iGetChanDomain_IP(get_p_geo(), &self.handle, &p2.handle, p3)
            return _return_val
        finally:
            pass

    @classmethod
    def get_chan_label(cls, const char* p1, const char* p2, const char* p4):
        cdef int32_t p3 = 4*1024
        cdef int32_t p5 = 4*128
        cdef char* cp2 = NULL
        cdef char* cp4 = NULL

        try:
            cp2 = <char*>malloc(4*1024)
            cp4 = <char*>malloc(4*128)

            strcpy(cp2, p2)
            strcpy(cp4, p4)

            IGetChanLabel_IP(get_p_geo(), p1, cp2, &p3, cp4, &p5)
            return (cp2, cp4)
        finally:
            if cp2: free(cp2)
            if cp4: free(cp4)



    def get_channel_info(self, WrapDB p2, const char* p3, int32_t p4, double p5, int32_t p6, WrapVV p7):

        try:


            GetChannelInfo_IP(get_p_geo(), &self.handle, &p2.handle, p3, &p4, &p5, &p6, &p7.handle)
            return (p4, p5, p6)
        finally:
            pass


    def set_channel_info(self, WrapDB p2, const char* p3, int32_t p4, double p5, int32_t p6, WrapVV p7):

        try:


            SetChannelInfo_IP(get_p_geo(), &self.handle, &p2.handle, p3, &p4, &p5, &p6, &p7.handle)
            
        finally:
            pass


    def import_dump(self, int32_t p2, WrapDB p3, const char* p4):

        try:


            ImportDump_IP(get_p_geo(), &self.handle, &p2, &p3.handle, p4)
            
        finally:
            pass


    def import_grid(self, WrapDB p2, const char* p3, const char* p4):

        try:


            ImportGrid_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4)
            
        finally:
            pass


    def import_i2_x(self, WrapDB p2, const char* p3, const char* p4, const char* p5, const char* p6, const char* p7, const char* p8, const char* p9, const char* p10, const char* p11, const char* p12, int32_t p13):

        try:


            ImportI2X_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, &p13)
            
        finally:
            pass


    def import_i2_x_ex(self, WrapDB p2, const char* p3, const char* p4, const char* p5, const char* p6, const char* p7, const char* p8, const char* p9, const char* p10, const char* p11, const char* p12, const char* p13, const char* p14, int32_t p15):

        try:


            ImportI2XEx_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, &p15)
            
        finally:
            pass


    def import_instrumentation_gdd(self, WrapDB p2, const char* p3):

        try:


            ImportInstrumentationGDD_IP(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass


    def import_ipdata(self, WrapDB p2, const char* p3, const char* p4):

        try:


            ImportIPDATA_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4)
            
        finally:
            pass


    def import_ipdata2(self, WrapDB p2, const char* p3, const char* p4, const char* p5):

        try:


            ImportIPDATA2_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4, p5)
            
        finally:
            pass


    def import_ipred(self, WrapDB p2, const char* p3, const char* p4):

        try:


            ImportIPRED_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4)
            
        finally:
            pass


    def import_merge_ipred(self, WrapDB p2, const char* p3, const char* p4):

        try:


            ImportMergeIPRED_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4)
            
        finally:
            pass


    def import_sgdf(self, WrapDB p2, const char* p3):

        try:


            ImportSGDF_IP(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass


    def import_topo_csv(self, WrapDB p2, const char* p3):

        try:


            ImportTopoCSV_IP(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass


    def import_topo_grid(self, WrapDB p2, const char* p3):

        try:


            ImportTopoGrid_IP(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass


    def import_zonge_avg(self, WrapDB p2, const char* p3, double p4, int32_t p5, double p6):

        try:


            ImportZongeAVG_IP(get_p_geo(), &self.handle, &p2.handle, p3, &p4, &p5, &p6)
            
        finally:
            pass


    def import_zonge_fld(self, WrapDB p2, const char* p3, int32_t p4, double p5):

        try:


            ImportZongeFLD_IP(get_p_geo(), &self.handle, &p2.handle, p3, &p4, &p5)
            
        finally:
            pass


    def new_xy_database(self, WrapDB p2, WrapDB p3, WrapVV p4, const char* p5, double p6):

        try:


            NewXYDatabase_IP(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle, p5, &p6)
            
        finally:
            pass


    def pseudo_plot(self, WrapDB p2, const char* p3, const char* p4, const char* p5):

        try:


            PseudoPlot_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4, p5)
            
        finally:
            pass


    def pseudo_plot2(self, WrapDB p2, const char* p3, const char* p4, const char* p5, const char* p6):

        try:


            PseudoPlot2_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4, p5, p6)
            
        finally:
            pass


    def pseudo_plot2_dir(self, WrapDB p2, const char* p3, const char* p4, const char* p5, const char* p6, const char* p7):

        try:


            PseudoPlot2Dir_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4, p5, p6, p7)
            
        finally:
            pass


    def ps_stack(self, WrapDB p2, const char* p3, const char* p4, const char* p5):

        try:


            PSStack_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4, p5)
            
        finally:
            pass


    def ps_stack2(self, WrapDB p2, const char* p3, const char* p4, int32_t p5, const char* p6):

        try:


            PSStack2_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4, &p5, p6)
            
        finally:
            pass


    def ps_stack2_dir(self, WrapDB p2, const char* p3, const char* p4, int32_t p5, const char* p6, const char* p7):

        try:


            PSStack2Dir_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4, &p5, p6, p7)
            
        finally:
            pass


    def qc_chan_lst(self, WrapDB p2, WrapLST p3):

        try:


            QCChanLST_IP(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def recalculate(self, WrapDB p2):

        try:


            Recalculate_IP(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def recalculate_ex(self, WrapDB p2, int32_t p3):

        try:


            RecalculateEx_IP(get_p_geo(), &self.handle, &p2.handle, &p3)
            
        finally:
            pass


    def recalculate_z(self, WrapDB p2):

        try:


            RecalculateZ_IP(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_import_line(self, const char* p2):

        try:


            SetImportLine_IP(get_p_geo(), &self.handle, p2)
            
        finally:
            pass


    def set_import_mode(self, int32_t p2):

        try:


            SetImportMode_IP(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def window(self, WrapDB p2, const char* p3, const char* p4, const char* p5):

        try:


            Window_IP(get_p_geo(), &self.handle, &p2.handle, p3, p4, p5)
            
        finally:
            pass

    @classmethod
    def winnow_chan_list(cls, WrapLST p1):

        try:


            WinnowChanList_IP(get_p_geo(), &p1.handle)
            
        finally:
            pass

    @classmethod
    def winnow_chan_list2(cls, WrapLST p1, WrapDB p2):

        try:


            WinnowChanList2_IP(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass


    def is_valid_line(self, WrapDB p2, const char* p3):

        try:


            _return_val = isValidLine_IP(get_p_geo(), &self.handle, &p2.handle, p3)
            return _return_val
        finally:
            pass


    def line_array_type(self, WrapDB p2, const char* p3):

        try:


            _return_val = iLineArrayType_IP(get_p_geo(), &self.handle, &p2.handle, p3)
            return _return_val
        finally:
            pass


    def a_spacing(self, WrapDB p2, const char* p3):

        try:


            _return_val = rASpacing_IP(get_p_geo(), &self.handle, &p2.handle, p3)
            return _return_val
        finally:
            pass


    def pldp_convention(self):

        try:


            _return_val = iPLDPConvention_IP(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def get_electrode_locations_and_mask_values(self, WrapDB p2, const char* p3, int32_t p4, WrapVV p5, WrapVV p6, WrapVV p7, WrapVV p8):

        try:


            GetElectrodeLocationsAndMaskValues_IP(get_p_geo(), &self.handle, &p2.handle, p3, &p4, &p5.handle, &p6.handle, &p7.handle, &p8.handle)
            
        finally:
            pass


    def get_electrode_locations_and_mask_values2(self, WrapDB p2, const char* p3, int32_t p4, WrapVV p5, WrapVV p6, WrapVV p7, WrapVV p8, WrapVV p9):

        try:


            GetElectrodeLocationsAndMaskValues2_IP(get_p_geo(), &self.handle, &p2.handle, p3, &p4, &p5.handle, &p6.handle, &p7.handle, &p8.handle, &p9.handle)
            
        finally:
            pass


    def set_electrode_mask_values(self, WrapDB p2, const char* p3, int32_t p4, WrapVV p5, WrapVV p6, WrapVV p7, WrapVV p8):

        try:


            SetElectrodeMaskValues_IP(get_p_geo(), &self.handle, &p2.handle, p3, &p4, &p5.handle, &p6.handle, &p7.handle, &p8.handle)
            
        finally:
            pass


    def set_electrode_mask_values_single_qc_channel(self, WrapDB p2, const char* p3, int32_t p4, int32_t p5, WrapVV p6, WrapVV p7, WrapVV p8):

        try:


            SetElectrodeMaskValuesSingleQCChannel_IP(get_p_geo(), &self.handle, &p2.handle, p3, &p4, &p5, &p6.handle, &p7.handle, &p8.handle)
            
        finally:
            pass

    @classmethod
    def get_qc_channel(cls, WrapDB p1, int32_t p2, const char* p3):
        cdef int32_t p4 = 4*64
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*64)

            strcpy(cp3, p3)

            _return_val = GetQCChannel_IP(get_p_geo(), &p1.handle, &p2, cp3, &p4)
            return (_return_val, cp3)
        finally:
            if cp3: free(cp3)



    pass



cdef class WrapIPGUI:
    




    @classmethod
    def modify_job(cls, WrapIP p1, WrapDB p2, const char* p3, int32_t p4, int32_t p5):

        try:


            _return_val = iModifyJob_IPGUI(get_p_geo(), &p1.handle, &p2.handle, p3, &p4, &p5)
            return (_return_val, p5)
        finally:
            pass

    @classmethod
    def launch_ipqc_tool(cls, const char* p1, const char* p2, const char* p3):

        try:


            LaunchIPQCTool_IPGUI(get_p_geo(), p1, p2, p3)
            
        finally:
            pass

    @classmethod
    def launch_offset_ipqc_tool(cls, const char* p1, const char* p2, const char* p3):

        try:


            LaunchOffsetIPQCTool_IPGUI(get_p_geo(), p1, p2, p3)
            
        finally:
            pass

    @classmethod
    def ipqc_tool_exists(cls):

        try:


            _return_val = iIPQCToolExists_IPGUI(get_p_geo())
            return _return_val
        finally:
            pass

    pass



cdef class WrapKGRD:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_KGRD(get_p_geo(), &self.handle)





    def clear(self):

        try:


            _Clear_KGRD(get_p_geo(), &self.handle)
            
        finally:
            pass

    @classmethod
    def create(cls):

        try:


            _return_val = WrapKGRD(Create_KGRD(get_p_geo()))
            return _return_val
        finally:
            pass




    def load_parms(self, const char* p2):

        try:


            _return_val = iLoadParms_KGRD(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def run(self, const char* p2, WrapDAT p3, WrapDAT p4, WrapDAT p5, const char* p6, const char* p7, int32_t p8, int32_t p9, int32_t p10):

        try:


            _return_val = iRun_KGRD(get_p_geo(), &self.handle, p2, &p3.handle, &p4.handle, &p5.handle, p6, p7, &p8, &p9, &p10)
            return _return_val
        finally:
            pass

    @classmethod
    def run2(cls, WrapDB p1, const char* p2, const char* p3, const char* p4, const char* p5, const char* p6, const char* p7, const char* p8, const char* p9, int32_t p10):

        try:


            _return_val = iRun2_KGRD(get_p_geo(), &p1.handle, p2, p3, p4, p5, p6, p7, p8, p9, &p10)
            return _return_val
        finally:
            pass

    @classmethod
    def run3(cls, WrapDB p1, const char* p2, const char* p3, const char* p4, const char* p5, const char* p6, const char* p7, const char* p8, const char* p9, const char* p10, int32_t p11):

        try:


            _return_val = iRun3_KGRD(get_p_geo(), &p1.handle, p2, p3, p4, p5, p6, p7, p8, p9, p10, &p11)
            return _return_val
        finally:
            pass


    def save_parms(self, const char* p2):

        try:


            _return_val = iSaveParms_KGRD(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass

    pass



cdef class WrapLMSG:
    




    @classmethod
    def goto_point(cls, double p1, double p2, double p3, WrapIPJ p4):

        try:


            GotoPoint_LMSG(get_p_geo(), &p1, &p2, &p3, &p4.handle)
            
        finally:
            pass

    @classmethod
    def view_area(cls, double p1, double p2, double p3, double p4, WrapIPJ p5):

        try:


            ViewArea_LMSG(get_p_geo(), &p1, &p2, &p3, &p4, &p5.handle)
            
        finally:
            pass

    pass



cdef class WrapMISC:
    




    @classmethod
    def convert_cg3to_raw(cls, const char* p1, const char* p2, int32_t p3):

        try:


            ConvertCG3toRAW_MISC(get_p_geo(), p1, p2, &p3)
            
        finally:
            pass

    @classmethod
    def convert_cg5to_raw(cls, const char* p1, const char* p2, int32_t p3):

        try:


            ConvertCG5toRAW_MISC(get_p_geo(), p1, p2, &p3)
            
        finally:
            pass

    @classmethod
    def ukoa2_tbl(cls, const char* p1, const char* p2, const char* p3):

        try:


            Ukoa2Tbl_MISC(get_p_geo(), p1, p2, p3)
            
        finally:
            pass

    pass



cdef class WrapMSTK:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_MSTK(get_p_geo(), &self.handle)





    def add_stk(self):

        try:


            _return_val = WrapSTK(AddSTK_MSTK(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def chan_list_vv(self, WrapDB p2, WrapVV p3, WrapVV p4, WrapVV p5, WrapVV p6, WrapVV p7):

        try:


            ChanListVV_MSTK(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle, &p5.handle, &p6.handle, &p7.handle)
            
        finally:
            pass

    @classmethod
    def create(cls):

        try:


            _return_val = WrapMSTK(Create_MSTK(get_p_geo()))
            return _return_val
        finally:
            pass




    def draw_profile(self, WrapDB p2, int32_t p3, WrapMAP p4):

        try:


            DrawProfile_MSTK(get_p_geo(), &self.handle, &p2.handle, &p3, &p4.handle)
            
        finally:
            pass


    def set_y_axis_direction(self, int32_t p2):

        try:


            SetYAxisDirection_MSTK(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def find_stk2(self, const char* p2, int32_t p3, WrapVV p4):

        try:


            FindSTK2_MSTK(get_p_geo(), &self.handle, p2, &p3, &p4.handle)
            return p3
        finally:
            pass


    def get_stk(self, int32_t p2):

        try:


            _return_val = WrapSTK(GetSTK_MSTK(get_p_geo(), &self.handle, &p2))
            return _return_val
        finally:
            pass


    def delete(self, int32_t p2):

        try:


            IDelete_MSTK(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def find_stk(self, const char* p2, int32_t p3, const char* p4, const char* p6, const char* p8):
        cdef int32_t p5 = 4*16384
        cdef int32_t p7 = 4*16384
        cdef int32_t p9 = 4*16384
        cdef char* cp4 = NULL
        cdef char* cp6 = NULL
        cdef char* cp8 = NULL

        try:
            cp4 = <char*>malloc(4*16384)
            cp6 = <char*>malloc(4*16384)
            cp8 = <char*>malloc(4*16384)

            strcpy(cp4, p4)
            strcpy(cp6, p6)
            strcpy(cp8, p8)

            IFindSTK_MSTK(get_p_geo(), &self.handle, p2, &p3, cp4, &p5, cp6, &p7, cp8, &p9)
            return (p3, cp4, cp6, cp8)
        finally:
            if cp4: free(cp4)
            if cp6: free(cp6)
            if cp8: free(cp8)



    def get_num_stk(self):

        try:


            _return_val = iGetNumSTK_MSTK(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def read_ini(self, WrapRA p2):

        try:


            ReadINI_MSTK(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def save_profile(self, WrapWA p2):

        try:


            SaveProfile_MSTK(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    pass



cdef class WrapMULTIVOXSET:
    




    @classmethod
    def import_from_xyz(cls, const char* p1, WrapRA p2, int32_t p3, WrapIPJ p4):

        try:


            ImportFromXYZ_MULTIVOXSET(get_p_geo(), p1, &p2.handle, &p3, &p4.handle)
            
        finally:
            pass

    @classmethod
    def export_to_xyz(cls, const char* p1, const char* p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7):

        try:


            ExportToXYZ_MULTIVOXSET(get_p_geo(), p1, p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass

    @classmethod
    def export_to_binary(cls, const char* p1, const char* p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8):

        try:


            ExportToBinary_MULTIVOXSET(get_p_geo(), p1, p2, &p3, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass

    @classmethod
    def export_to_xml(cls, const char* p1, const char* p2):

        try:


            ExportToXML_MULTIVOXSET(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def check_equal_to_legacy_voxel(cls, const char* p1, const char* p2):

        try:


            CheckEqualToLegacyVoxel_MULTIVOXSET(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def import_from_ubc(cls, const char* p1, const char* p2, const char* p3, double p4, WrapIPJ p5):

        try:


            ImportFromUBC_MULTIVOXSET(get_p_geo(), p1, p2, p3, &p4, &p5.handle)
            
        finally:
            pass

    @classmethod
    def import_from_gocad(cls, const char* p1, const char* p2, const char* p3, WrapIPJ p4, int32_t p5):

        try:


            ImportFromGOCAD_MULTIVOXSET(get_p_geo(), p1, p2, p3, &p4.handle, &p5)
            
        finally:
            pass

    @classmethod
    def list_properties_gocad(cls, const char* p1, WrapLST p2):

        try:


            ListPropertiesGOCAD_MULTIVOXSET(get_p_geo(), p1, &p2.handle)
            
        finally:
            pass

    @classmethod
    def import_from_gdb(cls, const char* p1, WrapDB p2, int32_t p3):

        try:


            ImportFromGDB_MULTIVOXSET(get_p_geo(), p1, &p2.handle, &p3)
            
        finally:
            pass

    @classmethod
    def import_from_vector_gdb(cls, const char* p1, WrapDB p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, double p7, double p8):

        try:


            ImportFromVectorGDB_MULTIVOXSET(get_p_geo(), p1, &p2.handle, &p3, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass

    @classmethod
    def export_to_segy(cls, const char* p1, const char* p2, const char* p3, double p4):

        try:


            ExportToSEGY_MULTIVOXSET(get_p_geo(), p1, p2, p3, &p4)
            
        finally:
            pass

    @classmethod
    def export_to_gdb(cls, const char* p1, WrapDB p2, const char* p3, int32_t p4, int32_t p5, int32_t p6, int32_t p7, int32_t p8):

        try:


            ExportToGDB_MULTIVOXSET(get_p_geo(), p1, &p2.handle, p3, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass

    @classmethod
    def export_to_wa(cls, const char* p1, WrapWA p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, const char* p7):

        try:


            ExportToWA_MULTIVOXSET(get_p_geo(), p1, &p2.handle, &p3, &p4, &p5, &p6, p7)
            
        finally:
            pass

    @classmethod
    def convert_double_to_vector(cls, const char* p1, const char* p2, const char* p3, const char* p4, double p5, double p6, int32_t p7):

        try:


            ConvertDoubleToVector_MULTIVOXSET(get_p_geo(), p1, p2, p3, p4, &p5, &p6, &p7)
            
        finally:
            pass

    @classmethod
    def convert_vector_to_double(cls, const char* p1, const char* p2, const char* p3, const char* p4):

        try:


            ConvertVectorToDouble_MULTIVOXSET(get_p_geo(), p1, p2, p3, p4)
            
        finally:
            pass

    @classmethod
    def create_double_constant(cls, const char* p1, double p2, double p3, double p4, double p5, double p6, double p7, double p8, int32_t p9, int32_t p10, int32_t p11, WrapIPJ p12):

        try:


            CreateDoubleConstant_MULTIVOXSET(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12.handle)
            
        finally:
            pass

    @classmethod
    def create_thematic_constant(cls, const char* p1, int32_t p2, double p3, double p4, double p5, double p6, double p7, double p8, int32_t p9, int32_t p10, int32_t p11, WrapIPJ p12):

        try:


            CreateThematicConstant_MULTIVOXSET(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12.handle)
            
        finally:
            pass

    @classmethod
    def create_vector_constant(cls, const char* p1, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, int32_t p11, int32_t p12, int32_t p13, WrapIPJ p14):

        try:


            CreateVectorConstant_MULTIVOXSET(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14.handle)
            
        finally:
            pass

    @classmethod
    def create_double_constant_vv(cls, const char* p1, double p2, double p3, double p4, double p5, WrapVV p6, WrapVV p7, WrapVV p8, WrapIPJ p9):

        try:


            CreateDoubleConstantVV_MULTIVOXSET(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6.handle, &p7.handle, &p8.handle, &p9.handle)
            
        finally:
            pass

    @classmethod
    def create_thematic_constant_vv(cls, const char* p1, int32_t p2, double p3, double p4, double p5, WrapVV p6, WrapVV p7, WrapVV p8, WrapIPJ p9):

        try:


            CreateThematicConstantVV_MULTIVOXSET(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6.handle, &p7.handle, &p8.handle, &p9.handle)
            
        finally:
            pass

    @classmethod
    def create_vector_constant_vv(cls, const char* p1, double p2, double p3, double p4, double p5, double p6, double p7, WrapVV p8, WrapVV p9, WrapVV p10, WrapIPJ p11):

        try:


            CreateVectorConstantVV_MULTIVOXSET(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6, &p7, &p8.handle, &p9.handle, &p10.handle, &p11.handle)
            
        finally:
            pass

    @classmethod
    def export_to_voxel(cls, const char* p1, const char* p2, const char* p3, const char* p4):

        try:


            ExportToVoxel_MULTIVOXSET(get_p_geo(), p1, p2, p3, p4)
            
        finally:
            pass

    @classmethod
    def import_from_voxel(cls, const char* p1, const char* p2, const char* p3, const char* p4):
        cdef int32_t p5 = 4*1024
        cdef char* cp4 = NULL

        try:
            cp4 = <char*>malloc(4*1024)

            strcpy(cp4, p4)

            ImportFromVoxel_MULTIVOXSET(get_p_geo(), p1, p2, p3, cp4, &p5)
            return cp4
        finally:
            if cp4: free(cp4)


    @classmethod
    def import_from_datamine(cls, const char* p1, const char* p2, WrapIPJ p3, const char* p4):

        try:


            ImportFromDATAMINE_MULTIVOXSET(get_p_geo(), p1, p2, &p3.handle, p4)
            
        finally:
            pass

    @classmethod
    def compute_default_cell_size(cls, double p1, double p2, double p3, double p4, double p5, double p6):

        try:


            _return_val = rComputeDefaultCellSize_MULTIVOXSET(get_p_geo(), &p1, &p2, &p3, &p4, &p5, &p6)
            return _return_val
        finally:
            pass

    @classmethod
    def filter(cls, const char* p1, const char* p2, int32_t p3, const char* p4, int32_t p5, int32_t p6):

        try:


            Filter_MULTIVOXSET(get_p_geo(), p1, p2, &p3, p4, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def grid_direct_from_gdb(cls, const char* p1, double p2, double p3, double p4, int32_t p5, int32_t p6, int32_t p7, double p8, double p9, double p10, int32_t p11, WrapDB p12, int32_t p13, int32_t p14, int32_t p15, int32_t p16):

        try:


            GridDirectFromGDB_MULTIVOXSET(get_p_geo(), p1, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12.handle, &p13, &p14, &p15, &p16)
            
        finally:
            pass

    pass



cdef class WrapMVG:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_MVG(get_p_geo(), &self.handle)





    def axis_x(self, double p2, double p3, double p4, double p5, double p6, double p7):

        try:


            AxisX_MVG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass


    def axis_y(self, double p2, double p3, double p4, double p5, double p6, double p7):

        try:


            AxisY_MVG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7)
            
        finally:
            pass

    @classmethod
    def create(cls, WrapMAP p1, const char* p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10):

        try:


            _return_val = WrapMVG(Create_MVG(get_p_geo(), &p1.handle, p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10))
            return _return_val
        finally:
            pass




    def get_mview(self):

        try:


            _return_val = WrapMVIEW(GetMVIEW_MVG(get_p_geo(), &self.handle))
            return _return_val
        finally:
            pass


    def grid(self, double p2, double p3, double p4, double p5, double p6, double p7, int32_t p8):

        try:


            Grid_MVG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass


    def label_x(self, double p2, double p3, double p4, double p5, int32_t p6, int32_t p7, int32_t p8):

        try:


            LabelX_MVG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass


    def label_y(self, double p2, double p3, double p4, double p5, int32_t p6, int32_t p7, int32_t p8):

        try:


            LabelY_MVG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass


    def poly_line_va(self, int32_t p2, int32_t p3, WrapVV p4, WrapVA p5, WrapVV p6):

        try:


            PolyLineVA_MVG(get_p_geo(), &self.handle, &p2, &p3, &p4.handle, &p5.handle, &p6.handle)
            
        finally:
            pass


    def poly_line_vv(self, int32_t p2, int32_t p3, WrapVV p4, WrapVV p5):

        try:


            PolyLineVV_MVG(get_p_geo(), &self.handle, &p2, &p3, &p4.handle, &p5.handle)
            
        finally:
            pass


    def rescale_x_range(self, int32_t p2, double p3, double p4, double p5):

        try:


            RescaleXRange_MVG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass


    def rescale_y_range(self, int32_t p2, double p3, double p4, double p5):

        try:


            RescaleYRange_MVG(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass

    pass



cdef class WrapPDF3D:
    




    @classmethod
    def render(cls, WrapMVIEW p1, const char* p2, int32_t p3, int32_t p4):

        try:


            Render_PDF3D(get_p_geo(), &p1.handle, p2, &p3, &p4)
            
        finally:
            pass

    @classmethod
    def render_to_page(cls, WrapMVIEW p1, const char* p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            RenderToPage_PDF3D(get_p_geo(), &p1.handle, p2, &p3, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def export2_d(cls, const char* p1, const char* p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            Export2D_PDF3D(get_p_geo(), p1, p2, &p3, &p4, &p5)
            
        finally:
            pass

    pass



cdef class WrapPGEXP:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_PGEXP(get_p_geo(), &self.handle)





    def add_pager(self, WrapPG p2, const char* p3):

        try:


            AddPager_PGEXP(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass

    @classmethod
    def create(cls):

        try:


            _return_val = WrapPGEXP(Create_PGEXP(get_p_geo()))
            return _return_val
        finally:
            pass




    def do_formula(self, const char* p2, int32_t p3):

        try:


            DoFormula_PGEXP(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass

    pass



cdef class WrapPGU:
    




# General



    @classmethod
    def bool(cls, WrapPG p1, const char* p2):

        try:


            Bool_PGU(get_p_geo(), &p1.handle, p2)
            
        finally:
            pass

    @classmethod
    def direct_gridding_dat(cls, WrapPG p1, double p2, double p3, double p4, double p5, double p6, WrapDAT p7, int32_t p8):

        try:


            DirectGriddingDAT_PGU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7.handle, &p8)
            
        finally:
            pass

    @classmethod
    def direct_gridding_dat_3d(cls, WrapPG p1, double p2, double p3, double p4, double p5, double p6, double p7, double p8, WrapDAT p9, int32_t p10):

        try:


            DirectGriddingDAT3D_PGU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9.handle, &p10)
            
        finally:
            pass

    @classmethod
    def direct_gridding_db(cls, WrapPG p1, double p2, double p3, double p4, double p5, double p6, WrapDB p7, int32_t p8, int32_t p9, int32_t p10, int32_t p11):

        try:


            DirectGriddingDB_PGU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7.handle, &p8, &p9, &p10, &p11)
            
        finally:
            pass

    @classmethod
    def direct_gridding_db_3d(cls, WrapPG p1, double p2, double p3, double p4, double p5, double p6, double p7, double p8, WrapDB p9, int32_t p10, int32_t p11, int32_t p12, int32_t p13, int32_t p14):

        try:


            DirectGriddingDB3D_PGU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9.handle, &p10, &p11, &p12, &p13, &p14)
            
        finally:
            pass

    @classmethod
    def direct_gridding_vv(cls, WrapPG p1, double p2, double p3, double p4, double p5, double p6, WrapVV p7, WrapVV p8, WrapVV p9, int32_t p10):

        try:


            DirectGriddingVV_PGU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7.handle, &p8.handle, &p9.handle, &p10)
            
        finally:
            pass

    @classmethod
    def expand(cls, WrapPG p1, WrapPG p2, double p3, int32_t p4, int32_t p5, int32_t p6):

        try:


            Expand_PGU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def fill(cls, WrapPG p1, int32_t p2, double p3, int32_t p4, int32_t p5, int32_t p6, double p7, double p8, int32_t p9, int32_t p10, const char* p11):

        try:


            Fill_PGU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, p11)
            
        finally:
            pass

    @classmethod
    def fill_value(cls, WrapPG p1, double p2):

        try:


            FillValue_PGU(get_p_geo(), &p1.handle, &p2)
            
        finally:
            pass

    @classmethod
    def filt_sym(cls, WrapPG p1, int32_t p2, int32_t p3, const char* p4, int32_t p5, WrapVV p6):

        try:


            FiltSym_PGU(get_p_geo(), &p1.handle, &p2, &p3, p4, &p5, &p6.handle)
            
        finally:
            pass

    @classmethod
    def filt_sym5(cls, WrapPG p1, int32_t p2, int32_t p3, const char* p4, WrapVV p5):

        try:


            FiltSym5_PGU(get_p_geo(), &p1.handle, &p2, &p3, p4, &p5.handle)
            
        finally:
            pass

    @classmethod
    def grid_peak(cls, const char* p1, int32_t p2, WrapVV p3, WrapVV p4, WrapVV p5):

        try:


            GridPeak_PGU(get_p_geo(), p1, &p2, &p3.handle, &p4.handle, &p5.handle)
            
        finally:
            pass

    @classmethod
    def dw_gridding_dat(cls, WrapPG p1, WrapDAT p2, WrapREG p3):

        try:


            IDWGriddingDAT_PGU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def dw_gridding_dat_3d(cls, WrapPG p1, WrapDAT p2, WrapREG p3):

        try:


            IDWGriddingDAT3D_PGU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def dw_gridding_db(cls, WrapPG p1, WrapDB p2, int32_t p3, int32_t p4, int32_t p5, WrapREG p6):

        try:


            IDWGriddingDB_PGU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5, &p6.handle)
            
        finally:
            pass

    @classmethod
    def dw_gridding_db_3d(cls, WrapPG p1, WrapDB p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6, WrapREG p7):

        try:


            IDWGriddingDB3D_PGU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5, &p6, &p7.handle)
            
        finally:
            pass

    @classmethod
    def dw_gridding_vv(cls, WrapPG p1, WrapVV p2, WrapVV p3, WrapVV p4, WrapREG p5):

        try:


            IDWGriddingVV_PGU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5.handle)
            
        finally:
            pass

    @classmethod
    def numeric_to_thematic(cls, WrapPG p1, WrapVV p2, WrapPG p3):

        try:


            NumericToThematic_PGU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def peakedness(cls, const char* p1, int32_t p2, WrapVV p3, WrapVV p4, WrapVV p5):

        try:


            Peakedness_PGU(get_p_geo(), p1, &p2, &p3.handle, &p4.handle, &p5.handle)
            
        finally:
            pass

    @classmethod
    def peakedness_grid(cls, const char* p1, const char* p2, int32_t p3, double p4):

        try:


            PeakednessGrid_PGU(get_p_geo(), p1, p2, &p3, &p4)
            
        finally:
            pass

    @classmethod
    def ref_file(cls, WrapPG p1, const char* p2):

        try:


            RefFile_PGU(get_p_geo(), &p1.handle, p2)
            
        finally:
            pass

    @classmethod
    def save_file(cls, WrapPG p1, double p2, double p3, double p4, double p5, double p6, WrapTR p7, WrapIPJ p8, const char* p9):

        try:


            SaveFile_PGU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7.handle, &p8.handle, p9)
            
        finally:
            pass

    @classmethod
    def thematic_to_numeric(cls, WrapPG p1, WrapVV p2, WrapPG p3):

        try:


            ThematicToNumeric_PGU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def trend(cls, WrapPG p1, WrapPG p2, WrapTR p3, int32_t p4, int32_t p5, double p6, double p7, double p8, double p9):

        try:


            Trend_PGU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5, &p6, &p7, &p8, &p9)
            
        finally:
            pass


# Math Operations



    @classmethod
    def add_scalar(cls, WrapPG p1, double p2):

        try:


            AddScalar_PGU(get_p_geo(), &p1.handle, &p2)
            
        finally:
            pass

    @classmethod
    def multiply_scalar(cls, WrapPG p1, double p2):

        try:


            MultiplyScalar_PGU(get_p_geo(), &p1.handle, &p2)
            
        finally:
            pass


# Matrix Operation



    @classmethod
    def correlation_matrix(cls, WrapPG p1, WrapPG p2):

        try:


            CorrelationMatrix_PGU(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def correlation_matrix2(cls, WrapPG p1, int32_t p2, WrapPG p3):

        try:


            CorrelationMatrix2_PGU(get_p_geo(), &p1.handle, &p2, &p3.handle)
            
        finally:
            pass

    @classmethod
    def invert_matrix(cls, WrapPG p1, WrapPG p2):

        try:


            InvertMatrix_PGU(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def jacobi(cls, WrapPG p1, WrapVV p2, WrapPG p3):

        try:


            Jacobi_PGU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def lu_back_sub(cls, WrapPG p1, WrapVV p2, WrapVV p3, WrapVV p4):

        try:


            LUBackSub_PGU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass

    @classmethod
    def lu_decomp(cls, WrapPG p1, WrapPG p2, WrapVV p3):

        try:


            LUDecomp_PGU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def matrix_mult(cls, WrapPG p1, int32_t p2, WrapPG p3, int32_t p4, WrapPG p5):

        try:


            MatrixMult_PGU(get_p_geo(), &p1.handle, &p2, &p3.handle, &p4, &p5.handle)
            
        finally:
            pass

    @classmethod
    def matrix_vector_mult(cls, WrapPG p1, WrapVV p2, WrapVV p3):

        try:


            MatrixVectorMult_PGU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def sv_decompose(cls, WrapPG p1, WrapPG p2, WrapVV p3, WrapPG p4):

        try:


            SVDecompose_PGU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass

    @classmethod
    def sv_recompose(cls, WrapPG p1, WrapVV p2, WrapPG p3, double p4, WrapPG p5):

        try:


            SVRecompose_PGU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5.handle)
            
        finally:
            pass


# Principal Component Analysis



    @classmethod
    def pc_communality(cls, WrapPG p1, WrapVV p2):

        try:


            PCCommunality_PGU(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def pc_loadings(cls, WrapPG p1, WrapPG p2):

        try:


            PCLoadings_PGU(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def pc_loadings2(cls, WrapPG p1, WrapPG p2):

        try:


            PCLoadings2_PGU(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def pc_scores(cls, WrapPG p1, WrapPG p2, WrapPG p3):

        try:


            PCScores_PGU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def pc_standardize(cls, WrapPG p1, WrapVV p2, WrapVV p3, int32_t p4):

        try:


            PCStandardize_PGU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4)
            
        finally:
            pass

    @classmethod
    def pc_standardize2(cls, WrapPG p1, WrapVV p2, WrapVV p3, WrapVV p4, int32_t p5):

        try:


            PCStandardize2_PGU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5)
            
        finally:
            pass

    @classmethod
    def pc_transform(cls, WrapPG p1, WrapVV p2, WrapVV p3, WrapVV p4, int32_t p5):

        try:


            PCTransform_PGU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5)
            
        finally:
            pass

    @classmethod
    def pc_varimax(cls, WrapPG p1, WrapPG p2):

        try:


            PCVarimax_PGU(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass


# Specialized Operations



    @classmethod
    def maximum_terrain_steepness(cls, WrapPG p1, int32_t p2):

        try:


            _return_val = rMaximumTerrainSteepness_PGU(get_p_geo(), &p1.handle, &p2)
            return _return_val
        finally:
            pass


    pass



cdef class WrapPRAGA3:
    




    @classmethod
    def launch(cls):

        try:


            _return_val = iLaunch_PRAGA3(get_p_geo())
            return _return_val
        finally:
            pass

    pass



cdef class WrapPROJ:
    




# Drag-and-drop methods



    @classmethod
    def drop_map_clip_data(cls, int32_t p1):

        try:


            App_DropMapClipData_PROJ(get_p_geo(), &p1)
            
        finally:
            pass


# Miscellaneous



    @classmethod
    def add_document(cls, const char* p1, const char* p2, int32_t p3):

        try:


            _return_val = App_iAddDocument_PROJ(get_p_geo(), p1, p2, &p3)
            return _return_val
        finally:
            pass

    @classmethod
    def add_document_without_opening(cls, const char* p1, const char* p2):

        try:


            _return_val = App_iAddDocumentWithoutOpening_PROJ(get_p_geo(), p1, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def get_command_environment(cls):

        try:


            _return_val = App_iGetCommandEnvironment_PROJ(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def list_documents(cls, WrapVV p1, const char* p2):

        try:


            _return_val = App_iListDocuments_PROJ(get_p_geo(), &p1.handle, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def list_loaded_documents(cls, WrapVV p1, const char* p2):

        try:


            _return_val = App_iListLoadedDocuments_PROJ(get_p_geo(), &p1.handle, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def current_document(cls, const char* p1, const char* p3):
        cdef int32_t p2 = 4*1040
        cdef int32_t p4 = 4*64
        cdef char* cp1 = NULL
        cdef char* cp3 = NULL

        try:
            cp1 = <char*>malloc(4*1040)
            cp3 = <char*>malloc(4*64)

            strcpy(cp1, p1)
            strcpy(cp3, p3)

            App_ICurrentDocument_PROJ(get_p_geo(), cp1, &p2, cp3, &p4)
            return (cp1, cp3)
        finally:
            if cp1: free(cp1)
            if cp3: free(cp3)


    @classmethod
    def current_document_of_type(cls, const char* p1, const char* p3):
        cdef int32_t p2 = 4*1040
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*1040)

            strcpy(cp1, p1)

            App_ICurrentDocumentOfType_PROJ(get_p_geo(), cp1, &p2, p3)
            return cp1
        finally:
            if cp1: free(cp1)


    @classmethod
    def list_tools(cls, WrapLST p1, int32_t p2):

        try:


            _return_val = App_iListTools_PROJ(get_p_geo(), &p1.handle, &p2)
            return _return_val
        finally:
            pass

    @classmethod
    def remove_document(cls, const char* p1):

        try:


            _return_val = App_iRemoveDocument_PROJ(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def remove_tool(cls, const char* p1):

        try:


            _return_val = App_iRemoveTool_PROJ(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def save_close_documents(cls, const char* p1):

        try:


            _return_val = App_iSaveCloseDocuments_PROJ(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def get_name(cls, const char* p1):
        cdef int32_t p2 = 4*128
        cdef char* cp1 = NULL

        try:
            cp1 = <char*>malloc(4*128)

            strcpy(cp1, p1)

            App_IGetName_PROJ(get_p_geo(), cp1, &p2)
            return cp1
        finally:
            if cp1: free(cp1)



    pass



cdef class WrapRGRD:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_RGRD(get_p_geo(), &self.handle)





    def clear(self):

        try:


            _Clear_RGRD(get_p_geo(), &self.handle)
            
        finally:
            pass

    @classmethod
    def create(cls):

        try:


            _return_val = WrapRGRD(Create_RGRD(get_p_geo()))
            return _return_val
        finally:
            pass

    @classmethod
    def create_img(cls, WrapVV p1, WrapVV p2, WrapVV p3, WrapIPJ p4, const char* p5, const char* p6):

        try:


            _return_val = WrapIMG(CreateIMG_RGRD(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, p5, p6))
            return _return_val
        finally:
            pass




    def default(self, const char* p2, WrapDAT p3):

        try:


            _return_val = iDefault_RGRD(get_p_geo(), &self.handle, p2, &p3.handle)
            return _return_val
        finally:
            pass


    def load_parms(self, const char* p2):

        try:


            _return_val = iLoadParms_RGRD(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def run(self, WrapDAT p2, WrapDAT p3):

        try:


            _return_val = iRun_RGRD(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def run2(cls, WrapDB p1, const char* p2, const char* p3, const char* p4, const char* p5, const char* p6):

        try:


            _return_val = iRun2_RGRD(get_p_geo(), &p1.handle, p2, p3, p4, p5, p6)
            return _return_val
        finally:
            pass


    def save_parms(self, const char* p2):

        try:


            _return_val = iSaveParms_RGRD(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def run_vv(cls, WrapVV p1, WrapVV p2, WrapVV p3, WrapIPJ p4, const char* p5, const char* p6):

        try:


            RunVV_RGRD(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, p5, p6)
            
        finally:
            pass

    pass



cdef class WrapSEMPLOT:
    




    @classmethod
    def apply_filter_to_mask(cls, WrapDB p1, const char* p2, const char* p3, const char* p4, const char* p5, int32_t p6):

        try:


            ApplyFilterToMask_SEMPLOT(get_p_geo(), &p1.handle, p2, p3, p4, p5, &p6)
            
        finally:
            pass

    @classmethod
    def convert_dummies(cls, WrapDB p1, int32_t p2):

        try:


            ConvertDummies_SEMPLOT(get_p_geo(), &p1.handle, &p2)
            
        finally:
            pass

    @classmethod
    def create_groups(cls, WrapDB p1, const char* p2):

        try:


            CreateGroups_SEMPLOT(get_p_geo(), &p1.handle, p2)
            
        finally:
            pass

    @classmethod
    def default_groups(cls, WrapDB p1):

        try:


            DefaultGroups_SEMPLOT(get_p_geo(), &p1.handle)
            
        finally:
            pass

    @classmethod
    def edit_map_plot_parameters(cls, WrapDB p1, const char* p2, const char* p3, WrapMAP p4, const char* p5):

        try:


            EditMapPlotParameters_SEMPLOT(get_p_geo(), &p1.handle, p2, p3, &p4.handle, p5)
            
        finally:
            pass

    @classmethod
    def edit_plot_components(cls, WrapDB p1, const char* p2):

        try:


            EditPlotComponents_SEMPLOT(get_p_geo(), &p1.handle, p2)
            
        finally:
            pass

    @classmethod
    def edit_plot_parameters(cls, WrapDB p1, const char* p2):

        try:


            EditPlotParameters_SEMPLOT(get_p_geo(), &p1.handle, p2)
            
        finally:
            pass

    @classmethod
    def export_overlay(cls, const char* p1, const char* p2, WrapMVIEW p3, const char* p4, int32_t p5, const char* p6, const char* p7, const char* p8, const char* p9, const char* p10, const char* p11, int32_t p12):

        try:


            ExportOverlay_SEMPLOT(get_p_geo(), p1, p2, &p3.handle, p4, &p5, p6, p7, p8, p9, p10, p11, &p12)
            
        finally:
            pass

    @classmethod
    def export_view(cls, WrapDB p1, WrapLST p2, WrapDB p3, int32_t p4, const char* p5, const char* p6, const char* p7):

        try:


            ExportView_SEMPLOT(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, p5, p6, p7)
            
        finally:
            pass

    @classmethod
    def export_view2(cls, WrapDB p1, WrapLST p2, WrapDB p3, int32_t p4, const char* p5, const char* p6, const char* p7, int32_t p8):

        try:


            ExportView2_SEMPLOT(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, p5, p6, p7, &p8)
            
        finally:
            pass

    @classmethod
    def filter_lst(cls, WrapLST p1):

        try:


            FilterLST_SEMPLOT(get_p_geo(), &p1.handle)
            
        finally:
            pass

    @classmethod
    def filter_mineral_pos_data(cls, WrapDB p1, const char* p2, const char* p3, const char* p4, int32_t p5):

        try:


            FilterMineralPosData_SEMPLOT(get_p_geo(), &p1.handle, p2, p3, p4, &p5)
            
        finally:
            pass

    @classmethod
    def get_associated_lst(cls, WrapDB p1, int32_t p2, WrapLST p3):

        try:


            GetAssociatedLST_SEMPLOT(get_p_geo(), &p1.handle, &p2, &p3.handle)
            
        finally:
            pass

    @classmethod
    def get_current_mineral_lst(cls, WrapDB p1, const char* p2, WrapLST p3):

        try:


            GetCurrentMineralLST_SEMPLOT(get_p_geo(), &p1.handle, p2, &p3.handle)
            
        finally:
            pass

    @classmethod
    def get_current_position_lst(cls, WrapDB p1, WrapLST p2):

        try:


            GetCurrentPositionLST_SEMPLOT(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def get_full_mineral_lst(cls, WrapLST p1):

        try:


            GetFullMineralLST_SEMPLOT(get_p_geo(), &p1.handle)
            
        finally:
            pass

    @classmethod
    def get_full_position_lst(cls, WrapLST p1):

        try:


            GetFullPositionLST_SEMPLOT(get_p_geo(), &p1.handle)
            
        finally:
            pass

    @classmethod
    def get_grouping_lst(cls, WrapDB p1, WrapLST p2):

        try:


            GetGroupingLST_SEMPLOT(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def create_ascii_template(cls, const char* p1, const char* p2):

        try:


            _return_val = iCreateASCIITemplate_SEMPLOT(get_p_geo(), p1, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def create_database_template(cls, const char* p1, const char* p2):

        try:


            _return_val = iCreateDatabaseTemplate_SEMPLOT(get_p_geo(), p1, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def edit_filter(cls, WrapDB p1, const char* p2, const char* p3, const char* p4, const char* p5):

        try:


            _return_val = iEditFilter_SEMPLOT(get_p_geo(), &p1.handle, p2, p3, p4, p5)
            return _return_val
        finally:
            pass

    @classmethod
    def get_mineral_channel_name(cls, WrapDB p1, const char* p2):
        cdef int32_t p3 = 4*64
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*64)

            strcpy(cp2, p2)

            IGetMineralChannelName_SEMPLOT(get_p_geo(), &p1.handle, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def import_ascii_wizard(cls, const char* p1, const char* p2, const char* p3):
        cdef int32_t p4 = 4*64
        cdef char* cp3 = NULL

        try:
            cp3 = <char*>malloc(4*64)

            strcpy(cp3, p3)

            IImportAsciiWizard_SEMPLOT(get_p_geo(), p1, p2, cp3, &p4)
            return cp3
        finally:
            if cp3: free(cp3)


    @classmethod
    def import_database_odbc(cls, const char* p1, const char* p3):
        cdef int32_t p2 = 4*16384
        cdef int32_t p4 = 4*1040
        cdef char* cp1 = NULL
        cdef char* cp3 = NULL

        try:
            cp1 = <char*>malloc(4*16384)
            cp3 = <char*>malloc(4*1040)

            strcpy(cp1, p1)
            strcpy(cp3, p3)

            IImportDatabaseODBC_SEMPLOT(get_p_geo(), cp1, &p2, cp3, &p4)
            return (cp1, cp3)
        finally:
            if cp1: free(cp1)
            if cp3: free(cp3)


    @classmethod
    def import_bin(cls, WrapDB p1, const char* p2, const char* p3, const char* p4, int32_t p5, double p6):

        try:


            ImportBIN_SEMPLOT(get_p_geo(), &p1.handle, p2, p3, p4, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def import_database_ado(cls, const char* p1, const char* p2):

        try:


            ImportDatabaseADO_SEMPLOT(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def init_group_symbols_used(cls, WrapDB p1):

        try:


            InitGroupSymbolsUsed_SEMPLOT(get_p_geo(), &p1.handle)
            
        finally:
            pass

    @classmethod
    def template_type(cls, const char* p1):

        try:


            _return_val = iTemplateType_SEMPLOT(get_p_geo(), p1)
            return _return_val
        finally:
            pass

    @classmethod
    def view_type(cls, WrapMAP p1, const char* p2):

        try:


            _return_val = iViewType_SEMPLOT(get_p_geo(), &p1.handle, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def mineral_id(cls, WrapDB p1, double p2, int32_t p3, int32_t p4):

        try:


            MineralID_SEMPLOT(get_p_geo(), &p1.handle, &p2, &p3, &p4)
            
        finally:
            pass

    @classmethod
    def new_filter(cls, const char* p1, const char* p2):

        try:


            NewFilter_SEMPLOT(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def new_template(cls, const char* p1, int32_t p2, const char* p3):

        try:


            NewTemplate_SEMPLOT(get_p_geo(), p1, &p2, p3)
            
        finally:
            pass

    @classmethod
    def overlay_lst(cls, WrapLST p1, int32_t p2, int32_t p3):

        try:


            OverlayLST_SEMPLOT(get_p_geo(), &p1.handle, &p2, &p3)
            
        finally:
            pass

    @classmethod
    def plot(cls, WrapDB p1, const char* p2, const char* p3, const char* p4, const char* p5, int32_t p6, int32_t p7):

        try:


            Plot_SEMPLOT(get_p_geo(), &p1.handle, p2, p3, p4, p5, &p6, &p7)
            
        finally:
            pass

    @classmethod
    def plot_symbol_legend(cls, WrapDB p1, WrapMVIEW p2, double p3, double p4, double p5, double p6):

        try:


            PlotSymbolLegend_SEMPLOT(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def prop_symb(cls, WrapDB p1, WrapMAP p2, const char* p3, const char* p4, const char* p5, const char* p6, int32_t p7, int32_t p8, double p9, double p10, int32_t p11, int32_t p12, int32_t p13, int32_t p14, int32_t p15):

        try:


            PropSymb_SEMPLOT(get_p_geo(), &p1.handle, &p2.handle, p3, p4, p5, p6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15)
            
        finally:
            pass

    @classmethod
    def replot(cls, WrapDB p1, const char* p2, const char* p3, WrapMAP p4, const char* p5):

        try:


            Replot_SEMPLOT(get_p_geo(), &p1.handle, p2, p3, &p4.handle, p5)
            
        finally:
            pass

    @classmethod
    def re_plot_symbol_legend(cls, WrapDB p1, WrapMVIEW p2):

        try:


            RePlotSymbolLegend_SEMPLOT(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def reset_groups(cls, WrapDB p1, const char* p2):

        try:


            ResetGroups_SEMPLOT(get_p_geo(), &p1.handle, p2)
            
        finally:
            pass

    @classmethod
    def reset_used_channel(cls, WrapDB p1):

        try:


            ResetUsedChannel_SEMPLOT(get_p_geo(), &p1.handle)
            
        finally:
            pass

    @classmethod
    def select_poly(cls, WrapDB p1, WrapMVIEW p2, const char* p3, const char* p4, WrapPLY p5, int32_t p6):

        try:


            SelectPoly_SEMPLOT(get_p_geo(), &p1.handle, &p2.handle, p3, p4, &p5.handle, &p6)
            
        finally:
            pass

    @classmethod
    def set_channel_order(cls, WrapDB p1, WrapLST p2):

        try:


            SetChannelOrder_SEMPLOT(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def set_channel_units(cls, WrapDB p1):

        try:


            SetChannelUnits_SEMPLOT(get_p_geo(), &p1.handle)
            
        finally:
            pass

    @classmethod
    def set_itr(cls, WrapDB p1, int32_t p2, WrapITR p3):

        try:


            SetITR_SEMPLOT(get_p_geo(), &p1.handle, &p2, &p3.handle)
            
        finally:
            pass

    @classmethod
    def set_mask(cls, WrapDB p1, const char* p2, const char* p3, const char* p4, int32_t p5, int32_t p6):

        try:


            SetMask_SEMPLOT(get_p_geo(), &p1.handle, p2, p3, p4, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def sort_data(cls, WrapDB p1, int32_t p2, int32_t p3):

        try:


            SortData_SEMPLOT(get_p_geo(), &p1.handle, &p2, &p3)
            
        finally:
            pass

    @classmethod
    def template_lst(cls, WrapLST p1, int32_t p2):

        try:


            TemplateLST_SEMPLOT(get_p_geo(), &p1.handle, &p2)
            
        finally:
            pass

    @classmethod
    def tile_windows(cls):

        try:


            TileWindows_SEMPLOT(get_p_geo())
            
        finally:
            pass

    @classmethod
    def total_oxides(cls, WrapDB p1, const char* p2):

        try:


            TotalOxides_SEMPLOT(get_p_geo(), &p1.handle, p2)
            
        finally:
            pass

    pass



cdef class WrapSHP:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_SHP(get_p_geo(), &self.handle)





    def append_item(self):

        try:


            AppendItem_SHP(get_p_geo(), &self.handle)
            
        finally:
            pass

    @classmethod
    def create(cls, const char* p1, int32_t p2):

        try:


            _return_val = WrapSHP(Create_SHP(get_p_geo(), p1, &p2))
            return _return_val
        finally:
            pass




    def add_int_field(self, const char* p2):

        try:


            _return_val = iAddIntField_SHP(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def add_double_field(self, const char* p2, int32_t p3):

        try:


            _return_val = iAddRealField_SHP(get_p_geo(), &self.handle, p2, &p3)
            return _return_val
        finally:
            pass


    def add_string_field(self, const char* p2, int32_t p3):

        try:


            _return_val = iAddStringField_SHP(get_p_geo(), &self.handle, p2, &p3)
            return _return_val
        finally:
            pass


    def find_field(self, const char* p2):

        try:


            _return_val = iFindField_SHP(get_p_geo(), &self.handle, p2)
            return _return_val
        finally:
            pass


    def max_id_num(self):

        try:


            _return_val = iMaxIDNum_SHP(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def num_fields(self):

        try:


            _return_val = iNumFields_SHP(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def num_records(self):

        try:


            _return_val = iNumRecords_SHP(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def type(self):

        try:


            _return_val = iType_SHP(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def open(cls, const char* p1):

        try:


            _return_val = WrapSHP(Open_SHP(get_p_geo(), p1))
            return _return_val
        finally:
            pass


    def set_arc(self, WrapVV p2, WrapVV p3):

        try:


            SetArc_SHP(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def set_arc_z(self, WrapVV p2, WrapVV p3, WrapVV p4):

        try:


            SetArcZ_SHP(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass


    def set_int(self, int32_t p2, int32_t p3):

        try:


            SetInt_SHP(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_ipj(self, WrapIPJ p2):

        try:


            SetIPJ_SHP(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_point(self, double p2, double p3):

        try:


            SetPoint_SHP(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_point_z(self, double p2, double p3, double p4):

        try:


            SetPointZ_SHP(get_p_geo(), &self.handle, &p2, &p3, &p4)
            
        finally:
            pass


    def set_polygon(self, WrapVV p2, WrapVV p3, int32_t p4):

        try:


            SetPolygon_SHP(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4)
            
        finally:
            pass


    def set_polygon_z(self, WrapVV p2, WrapVV p3, WrapVV p4, int32_t p5):

        try:


            SetPolygonZ_SHP(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle, &p5)
            
        finally:
            pass


    def set_double(self, int32_t p2, double p3):

        try:


            SetReal_SHP(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_string(self, int32_t p2, const char* p3):

        try:


            SetString_SHP(get_p_geo(), &self.handle, &p2, p3)
            
        finally:
            pass


    def write_item(self):

        try:


            WriteItem_SHP(get_p_geo(), &self.handle)
            
        finally:
            pass

    pass



cdef class WrapSQLSRV:
    




    @classmethod
    def attach_mdf(cls, const char* p1, const char* p2, const char* p3, const char* p4, const char* p5, const char* p6):

        try:


            _return_val = iAttachMDF_SQLSRV(get_p_geo(), p1, p2, p3, p4, p5, p6)
            return _return_val
        finally:
            pass

    @classmethod
    def detach_db(cls, const char* p1, const char* p2, const char* p3, const char* p4):

        try:


            _return_val = iDetachDB_SQLSRV(get_p_geo(), p1, p2, p3, p4)
            return _return_val
        finally:
            pass

    @classmethod
    def get_database_languages_lst(cls, WrapLST p1, const char* p2, const char* p3, const char* p4, int32_t p5):

        try:


            _return_val = iGetDatabaseLanguagesLST_SQLSRV(get_p_geo(), &p1.handle, p2, p3, p4, &p5)
            return _return_val
        finally:
            pass

    @classmethod
    def get_databases_lst(cls, WrapLST p1, const char* p2, const char* p3, const char* p4, int32_t p5):

        try:


            _return_val = iGetDatabasesLST_SQLSRV(get_p_geo(), &p1.handle, p2, p3, p4, &p5)
            return _return_val
        finally:
            pass

    @classmethod
    def get_login_gui(cls, const char* p1, const char* p2, const char* p4, int32_t p6, int32_t p7):
        cdef int32_t p3 = 4*128
        cdef int32_t p5 = 4*128
        cdef char* cp2 = NULL
        cdef char* cp4 = NULL

        try:
            cp2 = <char*>malloc(4*128)
            cp4 = <char*>malloc(4*128)

            strcpy(cp2, p2)
            strcpy(cp4, p4)

            IGetLoginGUI_SQLSRV(get_p_geo(), p1, cp2, &p3, cp4, &p5, &p6, &p7)
            return (cp2, cp4, p7)
        finally:
            if cp2: free(cp2)
            if cp4: free(cp4)


    @classmethod
    def get_servers_lst(cls, WrapLST p1):

        try:


            _return_val = iGetServersLST_SQLSRV(get_p_geo(), &p1.handle)
            return _return_val
        finally:
            pass

    pass



cdef class WrapSTK:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destr_SYS(get_p_geo(), &self.handle)





    def get_trans_parms(self, int32_t p2, double p3, WrapVV p4, WrapVV p5, int32_t p6, double p7, WrapVV p8, WrapVV p9):

        try:


            GetTransParms_STK(get_p_geo(), &self.handle, &p2, &p3, &p4.handle, &p5.handle, &p6, &p7, &p8.handle, &p9.handle)
            return (p2, p3, p6, p7)
        finally:
            pass


    def get_axis_format(self, int32_t p2):

        try:


            _return_val = iGetAxisFormat_STK(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def get_axis_parms(self, int32_t p2, double p3, double p4, double p5, const char* p6, double p8, double p9, double p10, int32_t p11, int32_t p12):
        cdef int32_t p7 = 4*64
        cdef char* cp6 = NULL

        try:
            cp6 = <char*>malloc(4*64)

            strcpy(cp6, p6)

            IGetAxisParms_STK(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, cp6, &p7, &p8, &p9, &p10, &p11, &p12)
            return (p2, p3, p4, p5, cp6, p8, p9, p10, p11)
        finally:
            if cp6: free(cp6)



    def get_fid_parms(self, double p2, double p3, double p4, const char* p5, double p7, const char* p8):
        cdef int32_t p6 = 4*64
        cdef int32_t p9 = 4*64
        cdef char* cp5 = NULL
        cdef char* cp8 = NULL

        try:
            cp5 = <char*>malloc(4*64)
            cp8 = <char*>malloc(4*64)

            strcpy(cp5, p5)
            strcpy(cp8, p8)

            IGetFidParms_STK(get_p_geo(), &self.handle, &p2, &p3, &p4, cp5, &p6, &p7, cp8, &p9)
            return (p2, p3, p4, cp5, p7, cp8)
        finally:
            if cp5: free(cp5)
            if cp8: free(cp8)



    def get_flag(self, int32_t p2):

        try:


            _return_val = iGetFlag_STK(get_p_geo(), &self.handle, &p2)
            return _return_val
        finally:
            pass


    def get_gen_parms(self, const char* p2, const char* p4, const char* p6, double p8, double p9, double p10, double p11, double p12, double p13, double p14, double p15):
        cdef int32_t p3 = 4*64
        cdef int32_t p5 = 4*64
        cdef int32_t p7 = 4*1040
        cdef char* cp2 = NULL
        cdef char* cp4 = NULL
        cdef char* cp6 = NULL

        try:
            cp2 = <char*>malloc(4*64)
            cp4 = <char*>malloc(4*64)
            cp6 = <char*>malloc(4*1040)

            strcpy(cp2, p2)
            strcpy(cp4, p4)
            strcpy(cp6, p6)

            IGetGenParms_STK(get_p_geo(), &self.handle, cp2, &p3, cp4, &p5, cp6, &p7, &p8, &p9, &p10, &p11, &p12, &p13, &p14, &p15)
            return (cp2, cp4, cp6, p8, p9, p10, p11, p12, p13, p14, p15)
        finally:
            if cp2: free(cp2)
            if cp4: free(cp4)
            if cp6: free(cp6)



    def get_grid_parms(self, int32_t p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, const char* p11, int32_t p13):
        cdef int32_t p12 = 4*64
        cdef char* cp11 = NULL

        try:
            cp11 = <char*>malloc(4*64)

            strcpy(cp11, p11)

            IGetGridParms_STK(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, cp11, &p12, &p13)
            return (p2, p3, p4, p5, p6, p7, p8, p9, p10, cp11)
        finally:
            if cp11: free(cp11)



    def get_label_parms(self, int32_t p2, double p3, int32_t p4, double p5, int32_t p6, double p7, const char* p8, double p10, const char* p11, int32_t p13, int32_t p14):
        cdef int32_t p9 = 4*64
        cdef int32_t p12 = 4*64
        cdef char* cp8 = NULL
        cdef char* cp11 = NULL

        try:
            cp8 = <char*>malloc(4*64)
            cp11 = <char*>malloc(4*64)

            strcpy(cp8, p8)
            strcpy(cp11, p11)

            IGetLabelParms_STK(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, cp8, &p9, &p10, cp11, &p12, &p13, &p14)
            return (p2, p3, p4, p5, p6, p7, cp8, p10, cp11, p13)
        finally:
            if cp8: free(cp8)
            if cp11: free(cp11)



    def get_profile(self, int32_t p2, double p3, double p4, const char* p5, int32_t p7, int32_t p8, int32_t p9, WrapVV p10, const char* p11, int32_t p13, const char* p14, double p16, const char* p17, int32_t p19):
        cdef int32_t p6 = 4*64
        cdef int32_t p12 = 4*128
        cdef int32_t p15 = 4*64
        cdef int32_t p18 = 4*64
        cdef char* cp5 = NULL
        cdef char* cp11 = NULL
        cdef char* cp14 = NULL
        cdef char* cp17 = NULL

        try:
            cp5 = <char*>malloc(4*64)
            cp11 = <char*>malloc(4*128)
            cp14 = <char*>malloc(4*64)
            cp17 = <char*>malloc(4*64)

            strcpy(cp5, p5)
            strcpy(cp11, p11)
            strcpy(cp14, p14)
            strcpy(cp17, p17)

            IGetProfile_STK(get_p_geo(), &self.handle, &p2, &p3, &p4, cp5, &p6, &p7, &p8, &p9, &p10.handle, cp11, &p12, &p13, cp14, &p15, &p16, cp17, &p18, &p19)
            return (p2, p3, p4, cp5, p7, p8, p9, cp11, p13, cp14, p16, cp17, p19)
        finally:
            if cp5: free(cp5)
            if cp11: free(cp11)
            if cp14: free(cp14)
            if cp17: free(cp17)



    def get_profile_ex(self, int32_t p2, double p3, double p4, const char* p5, int32_t p7, int32_t p8, int32_t p9, int32_t p10, WrapVV p11, const char* p12, int32_t p14, const char* p15, double p17, const char* p18, int32_t p20):
        cdef int32_t p6 = 4*64
        cdef int32_t p13 = 4*128
        cdef int32_t p16 = 4*64
        cdef int32_t p19 = 4*64
        cdef char* cp5 = NULL
        cdef char* cp12 = NULL
        cdef char* cp15 = NULL
        cdef char* cp18 = NULL

        try:
            cp5 = <char*>malloc(4*64)
            cp12 = <char*>malloc(4*128)
            cp15 = <char*>malloc(4*64)
            cp18 = <char*>malloc(4*64)

            strcpy(cp5, p5)
            strcpy(cp12, p12)
            strcpy(cp15, p15)
            strcpy(cp18, p18)

            IGetProfileEx_STK(get_p_geo(), &self.handle, &p2, &p3, &p4, cp5, &p6, &p7, &p8, &p9, &p10, &p11.handle, cp12, &p13, &p14, cp15, &p16, &p17, cp18, &p19, &p20)
            return (p2, p3, p4, cp5, p7, p8, p9, p10, cp12, p14, cp15, p17, cp18, p20)
        finally:
            if cp5: free(cp5)
            if cp12: free(cp12)
            if cp15: free(cp15)
            if cp18: free(cp18)



    def get_symb_parms(self, const char* p2, double p4, const char* p5, const char* p7, int32_t p9, int32_t p10, double p11, int32_t p12, WrapVV p13, WrapVV p14, int32_t p15, const char* p16, double p18, const char* p19):
        cdef int32_t p3 = 4*64
        cdef int32_t p6 = 4*64
        cdef int32_t p8 = 4*64
        cdef int32_t p17 = 4*64
        cdef int32_t p20 = 4*64
        cdef char* cp2 = NULL
        cdef char* cp5 = NULL
        cdef char* cp7 = NULL
        cdef char* cp16 = NULL
        cdef char* cp19 = NULL

        try:
            cp2 = <char*>malloc(4*64)
            cp5 = <char*>malloc(4*64)
            cp7 = <char*>malloc(4*64)
            cp16 = <char*>malloc(4*64)
            cp19 = <char*>malloc(4*64)

            strcpy(cp2, p2)
            strcpy(cp5, p5)
            strcpy(cp7, p7)
            strcpy(cp16, p16)
            strcpy(cp19, p19)

            IGetSymbParms_STK(get_p_geo(), &self.handle, cp2, &p3, &p4, cp5, &p6, cp7, &p8, &p9, &p10, &p11, &p12, &p13.handle, &p14.handle, &p15, cp16, &p17, &p18, cp19, &p20)
            return (cp2, p4, cp5, cp7, p9, p10, p11, p12, p15, cp16, p18, cp19)
        finally:
            if cp2: free(cp2)
            if cp5: free(cp5)
            if cp7: free(cp7)
            if cp16: free(cp16)
            if cp19: free(cp19)



    def get_title_parms(self, const char* p2, const char* p4, int32_t p6, double p7, double p8, int32_t p9, double p10, double p11, const char* p12, double p14, const char* p15, int32_t p17):
        cdef int32_t p3 = 4*128
        cdef int32_t p5 = 4*128
        cdef int32_t p13 = 4*64
        cdef int32_t p16 = 4*64
        cdef char* cp2 = NULL
        cdef char* cp4 = NULL
        cdef char* cp12 = NULL
        cdef char* cp15 = NULL

        try:
            cp2 = <char*>malloc(4*128)
            cp4 = <char*>malloc(4*128)
            cp12 = <char*>malloc(4*64)
            cp15 = <char*>malloc(4*64)

            strcpy(cp2, p2)
            strcpy(cp4, p4)
            strcpy(cp12, p12)
            strcpy(cp15, p15)

            IGetTitleParms_STK(get_p_geo(), &self.handle, cp2, &p3, cp4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, cp12, &p13, &p14, cp15, &p16, &p17)
            return (cp2, cp4, p6, p7, p8, p9, p10, p11, cp12, p14, cp15)
        finally:
            if cp2: free(cp2)
            if cp4: free(cp4)
            if cp12: free(cp12)
            if cp15: free(cp15)



    def set_flag(self, int32_t p2, int32_t p3):

        try:


            ISetFlag_STK(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_array_colors(self, WrapITR p2):

        try:


            SetArrayColors_STK(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_axis_format(self, int32_t p2, int32_t p3):

        try:


            SetAxisFormat_STK(get_p_geo(), &self.handle, &p2, &p3)
            
        finally:
            pass


    def set_axis_parms(self, int32_t p2, double p3, double p4, double p5, const char* p6, double p7, double p8, double p9, int32_t p10, int32_t p11):

        try:


            SetAxisParms_STK(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, p6, &p7, &p8, &p9, &p10, &p11)
            
        finally:
            pass


    def set_fid_parms(self, double p2, double p3, double p4, const char* p5, double p6, const char* p7):

        try:


            SetFidParms_STK(get_p_geo(), &self.handle, &p2, &p3, &p4, p5, &p6, p7)
            
        finally:
            pass


    def set_gen_parms(self, const char* p2, const char* p3, const char* p4, double p5, double p6, double p7, double p8, double p9, double p10, double p11, double p12):

        try:


            SetGenParms_STK(get_p_geo(), &self.handle, p2, p3, p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11, &p12)
            
        finally:
            pass


    def set_grid_parms(self, int32_t p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10, const char* p11, int32_t p12):

        try:


            SetGridParms_STK(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, p11, &p12)
            
        finally:
            pass


    def set_label_parms(self, int32_t p2, double p3, int32_t p4, double p5, int32_t p6, double p7, const char* p8, double p9, const char* p10, int32_t p11, int32_t p12):

        try:


            SetLabelParms_STK(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, p8, &p9, p10, &p11, &p12)
            
        finally:
            pass


    def set_line_parm(self, int32_t p2):

        try:


            SetLineParm_STK(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass


    def set_profile(self, int32_t p2, double p3, double p4, const char* p5, int32_t p6, int32_t p7, int32_t p8, WrapVV p9, const char* p10, int32_t p11, const char* p12, double p13, const char* p14, int32_t p15):

        try:


            SetProfile_STK(get_p_geo(), &self.handle, &p2, &p3, &p4, p5, &p6, &p7, &p8, &p9.handle, p10, &p11, p12, &p13, p14, &p15)
            
        finally:
            pass


    def set_profile_ex(self, int32_t p2, double p3, double p4, const char* p5, int32_t p6, int32_t p7, int32_t p8, int32_t p9, WrapVV p10, const char* p11, int32_t p12, const char* p13, double p14, const char* p15, int32_t p16):

        try:


            SetProfileEx_STK(get_p_geo(), &self.handle, &p2, &p3, &p4, p5, &p6, &p7, &p8, &p9, &p10.handle, p11, &p12, p13, &p14, p15, &p16)
            
        finally:
            pass


    def set_symb_parms(self, const char* p2, double p3, const char* p4, const char* p5, int32_t p6, int32_t p7, double p8, int32_t p9, WrapVV p10, WrapVV p11, int32_t p12, const char* p13, double p14, const char* p15):

        try:


            SetSymbParms_STK(get_p_geo(), &self.handle, p2, &p3, p4, p5, &p6, &p7, &p8, &p9, &p10.handle, &p11.handle, &p12, p13, &p14, p15)
            
        finally:
            pass


    def set_title_parms(self, const char* p2, const char* p3, int32_t p4, double p5, double p6, int32_t p7, double p8, double p9, const char* p10, double p11, const char* p12, int32_t p13):

        try:


            SetTitleParms_STK(get_p_geo(), &self.handle, p2, p3, &p4, &p5, &p6, &p7, &p8, &p9, p10, &p11, p12, &p13)
            
        finally:
            pass


    def set_trans_parms(self, int32_t p2, double p3, int32_t p4, int32_t p5, int32_t p6, double p7, int32_t p8, int32_t p9):

        try:


            SetTransParms_STK(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9)
            
        finally:
            pass


    def set_va_index_start(self, int32_t p2):

        try:


            SetVAIndexStart_STK(get_p_geo(), &self.handle, &p2)
            
        finally:
            pass

    pass



cdef class WrapSTRINGS:
    




    @classmethod
    def launch_digitization_ui(cls, const char* p1, const char* p2):

        try:


            LaunchDigitizationUI_STRINGS(get_p_geo(), p1, p2)
            
        finally:
            pass

    pass



cdef class WrapTC:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_TC(get_p_geo(), &self.handle)




    @classmethod
    def create(cls, WrapIMG p1, double p2, double p3, double p4, double p5, double p6, double p7, int32_t p8, double p9, int32_t p10):

        try:


            _return_val = WrapTC(Create_TC(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10))
            return _return_val
        finally:
            pass

    @classmethod
    def create_ex(cls, WrapIMG p1, double p2, double p3, double p4, double p5, double p6, double p7, int32_t p8, double p9, int32_t p10, int32_t p11):

        try:


            _return_val = WrapTC(CreateEx_TC(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10, &p11))
            return _return_val
        finally:
            pass




    def grregter(self, WrapIMG p2, WrapIMG p3):

        try:


            Grregter_TC(get_p_geo(), &self.handle, &p2.handle, &p3.handle)
            
        finally:
            pass


    def grterain(self, WrapVV p2, WrapVV p3, WrapVV p4, WrapVV p5, WrapVV p6, WrapIMG p7, double p8):

        try:


            Grterain_TC(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle, &p5.handle, &p6.handle, &p7.handle, &p8)
            
        finally:
            pass


    def grterain2(self, WrapVV p2, WrapVV p3, WrapVV p4, WrapVV p5, WrapVV p6, WrapVV p7, WrapIMG p8, double p9):

        try:


            Grterain2_TC(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle, &p5.handle, &p6.handle, &p7.handle, &p8.handle, &p9)
            
        finally:
            pass


    def g_gterain(self, WrapVV p2, WrapVV p3, WrapVV p4, WrapVV p5, double p6, double p7, int32_t p8):

        try:


            GGterain_TC(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle, &p5.handle, &p6, &p7, &p8)
            
        finally:
            pass

    pass



cdef class WrapTEST:
    




    @classmethod
    def enable_disable_arc_engine_license(cls, int32_t p1):

        try:


            EnableDisableArcEngineLicense_TEST(get_p_geo(), &p1)
            
        finally:
            pass

    @classmethod
    def arc_engine_license(cls):

        try:


            _return_val = iArcEngineLicense_TEST(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def test_mode(cls):

        try:


            _return_val = iTestMode_TEST(get_p_geo())
            return _return_val
        finally:
            pass

    @classmethod
    def wrapper_test(cls, const char* p1, const char* p2):

        try:


            WrapperTest_TEST(get_p_geo(), p1, p2)
            
        finally:
            pass

    @classmethod
    def core_class(cls, const char* p1, const char* p2):

        try:


            CoreClass_TEST(get_p_geo(), p1, p2)
            
        finally:
            pass

    pass



cdef class WrapTIN:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_TIN(get_p_geo(), &self.handle)





    def copy(self, WrapTIN p2):

        try:


            Copy_TIN(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def create(cls, WrapVV p1, WrapVV p2, WrapVV p3):

        try:


            _return_val = WrapTIN(Create_TIN(get_p_geo(), &p1.handle, &p2.handle, &p3.handle))
            return _return_val
        finally:
            pass

    @classmethod
    def create_s(cls, WrapBF p1):

        try:


            _return_val = WrapTIN(CreateS_TIN(get_p_geo(), &p1.handle))
            return _return_val
        finally:
            pass



    @classmethod
    def export_xml(cls, const char* p1, int32_t p2, const char* p3):

        try:


            ExportXML_TIN(get_p_geo(), p1, &p2, p3)
            return p2
        finally:
            pass


    def get_convex_hull(self, WrapPLY p2):

        try:


            GetConvexHull_TIN(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_ipj(self, WrapIPJ p2):

        try:


            GetIPJ_TIN(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_joins(self, WrapVV p2, WrapVV p3, WrapVV p4):

        try:


            GetJoins_TIN(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass


    def get_mesh(self, WrapVV p2):

        try:


            GetMesh_TIN(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def get_nodes(self, WrapVV p2, WrapVV p3, WrapVV p4):

        try:


            GetNodes_TIN(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass


    def get_triangles(self, WrapVV p2, WrapVV p3, WrapVV p4):

        try:


            GetTriangles_TIN(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass


    def get_triangle(self, int32_t p2, double p3, double p4, double p5, double p6, double p7, double p8):

        try:


            GetTriangle_TIN(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5, &p6, &p7, &p8)
            return (p3, p4, p5, p6, p7, p8)
        finally:
            pass


    def get_voronoi_edges(self, WrapVV p2):

        try:


            GetVoronoiEdges_TIN(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def is_z_valued(self):

        try:


            _return_val = iIsZValued_TIN(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def locate_triangle(self, int32_t p2, double p3, double p4):

        try:


            _return_val = iLocateTriangle_TIN(get_p_geo(), &self.handle, &p2, &p3, &p4)
            return _return_val
        finally:
            pass


    def nodes(self):

        try:


            _return_val = iNodes_TIN(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def interp_vv(self, WrapVV p2, WrapVV p3, WrapVV p4):

        try:


            InterpVV_TIN(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass


    def triangles(self):

        try:


            _return_val = iTriangles_TIN(get_p_geo(), &self.handle)
            return _return_val
        finally:
            pass


    def linear_interp_vv(self, WrapVV p2, WrapVV p3, WrapVV p4):

        try:


            LinearInterpVV_TIN(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass


    def nearest_vv(self, WrapVV p2, WrapVV p3, WrapVV p4):

        try:


            NearestVV_TIN(get_p_geo(), &self.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass


    def range_xy(self, double p2, double p3, double p4, double p5):

        try:


            RangeXY_TIN(get_p_geo(), &self.handle, &p2, &p3, &p4, &p5)
            return (p2, p3, p4, p5)
        finally:
            pass


    def serial(self, WrapBF p2):

        try:


            Serial_TIN(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass


    def set_ipj(self, WrapIPJ p2):

        try:


            SetIPJ_TIN(get_p_geo(), &self.handle, &p2.handle)
            
        finally:
            pass

    pass



cdef class WrapTRND:
    




    @classmethod
    def get_max_min(cls, WrapVV p1, WrapVV p2, WrapVV p3, WrapVV p4, WrapVV p5, WrapVV p6, double p7, int32_t p8):

        try:


            GetMaxMin_TRND(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5.handle, &p6.handle, &p7, &p8)
            
        finally:
            pass

    @classmethod
    def get_mesh(cls, WrapDB p1, const char* p2, double p3, double p4, WrapVV p5, int32_t p6):

        try:


            GetMesh_TRND(get_p_geo(), &p1.handle, p2, &p3, &p4, &p5.handle, &p6)
            
        finally:
            pass

    @classmethod
    def trnd_db(cls, WrapDB p1, const char* p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10):

        try:


            TrndDB_TRND(get_p_geo(), &p1.handle, p2, &p3, &p4, &p5, &p6, &p7, &p8, &p9, &p10)
            
        finally:
            pass

    pass



cdef class WrapUNC:
    




    @classmethod
    def is_valid_utf16_char(cls, int32_t p1):

        try:


            _return_val = iIsValidUTF16Char_UNC(get_p_geo(), &p1)
            return _return_val
        finally:
            pass

    @classmethod
    def valid_symbol(cls, const char* p1, int32_t p2, int32_t p3):

        try:


            _return_val = iValidSymbol_UNC(get_p_geo(), p1, &p2, &p3)
            return _return_val
        finally:
            pass

    @classmethod
    def utf16_val_to_str(cls, int32_t p1, const char* p2):
        cdef int32_t p3 = 4*5
        cdef char* cp2 = NULL

        try:
            cp2 = <char*>malloc(4*5)

            strcpy(cp2, p2)

            UTF16ValToSTR_UNC(get_p_geo(), &p1, cp2, &p3)
            return cp2
        finally:
            if cp2: free(cp2)


    @classmethod
    def validate_symbols(cls, WrapVV p1, const char* p2, int32_t p3):

        try:


            ValidateSymbols_UNC(get_p_geo(), &p1.handle, p2, &p3)
            
        finally:
            pass

    pass



cdef class WrapVAU:
    




    @classmethod
    def prune(cls, WrapVA p1, WrapVV p2, int32_t p3):

        try:


            Prune_VAU(get_p_geo(), &p1.handle, &p2.handle, &p3)
            
        finally:
            pass

    @classmethod
    def total_vector(cls, WrapVA p1, WrapVA p2, WrapVA p3, WrapVA p4):

        try:


            TotalVector_VAU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass

    pass



cdef class WrapVVEXP:
    


    cdef int32_t handle
    
    def __cinit__(self, handle):
        self.handle = handle
        
    def __dealloc__(self):
        if self.handle != 0:
            Destroy_VVEXP(get_p_geo(), &self.handle)





    def add_vv(self, WrapVV p2, const char* p3):

        try:


            AddVV_VVEXP(get_p_geo(), &self.handle, &p2.handle, p3)
            
        finally:
            pass

    @classmethod
    def create(cls):

        try:


            _return_val = WrapVVEXP(Create_VVEXP(get_p_geo()))
            return _return_val
        finally:
            pass




    def do_formula(self, const char* p2, int32_t p3):

        try:


            DoFormula_VVEXP(get_p_geo(), &self.handle, p2, &p3)
            
        finally:
            pass

    pass



cdef class WrapVVU:
    




    @classmethod
    def average_repeat(cls, WrapVV p1, WrapVV p2):

        try:


            AverageRepeat_VVU(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def average_repeat_ex(cls, WrapVV p1, WrapVV p2, int32_t p3):

        try:


            AverageRepeatEx_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3)
            
        finally:
            pass

    @classmethod
    def average_repeat2(cls, WrapVV p1, WrapVV p2, WrapVV p3):

        try:


            AverageRepeat2_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def average_repeat2_ex(cls, WrapVV p1, WrapVV p2, WrapVV p3, int32_t p4):

        try:


            AverageRepeat2Ex_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4)
            
        finally:
            pass

    @classmethod
    def binary_search(cls, WrapVV p1, double p2, int32_t p3, int32_t p4):

        try:


            BinarySearch_VVU(get_p_geo(), &p1.handle, &p2, &p3, &p4)
            return (p3, p4)
        finally:
            pass

    @classmethod
    def box_cox(cls, WrapVV p1, double p2):

        try:


            BoxCox_VVU(get_p_geo(), &p1.handle, &p2)
            
        finally:
            pass

    @classmethod
    def bp_filt(cls, WrapVV p1, WrapVV p2, double p3, double p4, int32_t p5):

        try:


            BPFilt_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def clip(cls, WrapVV p1, double p2, double p3, int32_t p4):

        try:


            Clip_VVU(get_p_geo(), &p1.handle, &p2, &p3, &p4)
            
        finally:
            pass

    @classmethod
    def clip_to_detect_limit(cls, WrapVV p1, double p2, int32_t p3):

        try:


            ClipToDetectLimit_VVU(get_p_geo(), &p1.handle, &p2, &p3)
            
        finally:
            pass

    @classmethod
    def decimate(cls, WrapVV p1, int32_t p2):

        try:


            Decimate_VVU(get_p_geo(), &p1.handle, &p2)
            
        finally:
            pass

    @classmethod
    def deviation(cls, WrapVV p1, WrapVV p2, WrapVV p3, double p4, double p5, double p6, double p7, int32_t p8):

        try:


            Deviation_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass

    @classmethod
    def distance(cls, WrapVV p1, WrapVV p2, WrapVV p3, double p4, double p5, double p6, double p7):

        try:


            Distance_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5, &p6, &p7)
            
        finally:
            pass

    @classmethod
    def distance_non_cumulative(cls, WrapVV p1, WrapVV p2, WrapVV p3, double p4, double p5, double p6, double p7):

        try:


            DistanceNonCumulative_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5, &p6, &p7)
            
        finally:
            pass

    @classmethod
    def distance_3d(cls, WrapVV p1, WrapVV p2, WrapVV p3, double p4, WrapVV p5):

        try:


            Distance3D_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5.handle)
            
        finally:
            pass

    @classmethod
    def find_gaps_3d(cls, WrapVV p1, WrapVV p2, WrapVV p3, double p4, WrapVV p5):

        try:


            FindGaps3D_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5.handle)
            
        finally:
            pass

    @classmethod
    def dummy_range(cls, WrapVV p1, double p2, double p3, int32_t p4, int32_t p5):

        try:


            DummyRange_VVU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def dummy_range_ex(cls, WrapVV p1, double p2, double p3, int32_t p4, int32_t p5, int32_t p6):

        try:


            DummyRangeEx_VVU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5, &p6)
            
        finally:
            pass

    @classmethod
    def dummy_repeat(cls, WrapVV p1, int32_t p2):

        try:


            DummyRepeat_VVU(get_p_geo(), &p1.handle, &p2)
            
        finally:
            pass

    @classmethod
    def dup_stats(cls, WrapVV p1, WrapVV p2, WrapVV p3, WrapVV p4):

        try:


            DupStats_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass

    @classmethod
    def exp_dist(cls, WrapVV p1, int32_t p2, double p3, int32_t p4):

        try:


            ExpDist_VVU(get_p_geo(), &p1.handle, &p2, &p3, &p4)
            
        finally:
            pass

    @classmethod
    def filter(cls, WrapVV p1, WrapVV p2, int32_t p3):

        try:


            Filter_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3)
            
        finally:
            pass

    @classmethod
    def find_string_items(cls, WrapVV p1, WrapVV p2, int32_t p3, int32_t p4, int32_t p5, WrapVV p6):

        try:


            FindStringItems_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5, &p6.handle)
            
        finally:
            pass

    @classmethod
    def fractal_filter(cls, WrapVV p1, int32_t p2, int32_t p3, WrapVV p4):

        try:


            FractalFilter_VVU(get_p_geo(), &p1.handle, &p2, &p3, &p4.handle)
            
        finally:
            pass

    @classmethod
    def close_xy(cls, WrapVV p1, WrapVV p2, double p3, double p4):

        try:


            _return_val = iCloseXY_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4)
            return _return_val
        finally:
            pass

    @classmethod
    def close_xym(cls, WrapVV p1, WrapVV p2, WrapVV p3, double p4, double p5):

        try:


            _return_val = iCloseXYM_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5)
            return _return_val
        finally:
            pass

    @classmethod
    def close_xyz(cls, WrapVV p1, WrapVV p2, WrapVV p3, double p4, double p5, double p6):

        try:


            _return_val = iCloseXYZ_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5, &p6)
            return _return_val
        finally:
            pass

    @classmethod
    def close_xyzm(cls, WrapVV p1, WrapVV p2, WrapVV p3, WrapVV p4, double p5, double p6, double p7):

        try:


            _return_val = iCloseXYZM_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5, &p6, &p7)
            return _return_val
        finally:
            pass

    @classmethod
    def dummy_back_tracks(cls, WrapVV p1):

        try:


            _return_val = iDummyBackTracks_VVU(get_p_geo(), &p1.handle)
            return _return_val
        finally:
            pass

    @classmethod
    def find_dummy(cls, WrapVV p1, int32_t p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            _return_val = iFindDummy_VVU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5)
            return _return_val
        finally:
            pass

    @classmethod
    def interp(cls, WrapVV p1, int32_t p2, int32_t p3):

        try:


            Interp_VVU(get_p_geo(), &p1.handle, &p2, &p3)
            
        finally:
            pass

    @classmethod
    def qc_fill_gaps(cls, WrapVV p1, WrapVV p2, WrapVV p3, WrapVV p4, double p5):

        try:


            _return_val = iQCFillGaps_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5)
            return _return_val
        finally:
            pass

    @classmethod
    def search_text(cls, WrapVV p1, const char* p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6):

        try:


            _return_val = iSearchText_VVU(get_p_geo(), &p1.handle, p2, &p3, &p4, &p5, &p6)
            return _return_val
        finally:
            pass

    @classmethod
    def mask(cls, WrapVV p1, WrapVV p2):

        try:


            Mask_VVU(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def mask_and(cls, WrapVV p1, WrapVV p2, WrapVV p3):

        try:


            MaskAND_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def mask_or(cls, WrapVV p1, WrapVV p2, WrapVV p3):

        try:


            MaskOR_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def nl_filt(cls, WrapVV p1, WrapVV p2, int32_t p3, double p4):

        try:


            NLFilt_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4)
            
        finally:
            pass

    @classmethod
    def noise_check(cls, WrapVV p1, WrapVV p2, double p3, int32_t p4):

        try:


            NoiseCheck_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4)
            
        finally:
            pass

    @classmethod
    def noise_check2(cls, WrapVV p1, WrapVV p2, WrapVV p3, double p4, int32_t p5):

        try:


            NoiseCheck2_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def normal_dist(cls, WrapVV p1, int32_t p2, double p3, double p4, int32_t p5):

        try:


            NormalDist_VVU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def offset_circles(cls, WrapVV p1, WrapVV p2, double p3, double p4, WrapVV p5, WrapVV p6):

        try:


            OffsetCircles_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5.handle, &p6.handle)
            
        finally:
            pass

    @classmethod
    def offset_correct(cls, WrapVV p1, WrapVV p2, double p3, int32_t p4, WrapVV p5, WrapVV p6):

        try:


            OffsetCorrect_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5.handle, &p6.handle)
            
        finally:
            pass

    @classmethod
    def offset_correct2(cls, WrapVV p1, WrapVV p2, double p3, double p4, WrapVV p5, WrapVV p6):

        try:


            OffsetCorrect2_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5.handle, &p6.handle)
            
        finally:
            pass

    @classmethod
    def offset_correct3(cls, WrapVV p1, WrapVV p2, double p3, double p4, double p5, WrapVV p6, WrapVV p7):

        try:


            OffsetCorrect3_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5, &p6.handle, &p7.handle)
            
        finally:
            pass

    @classmethod
    def offset_correct_xyz(cls, WrapVV p1, WrapVV p2, WrapVV p3, double p4, double p5, double p6, double p7, WrapVV p8, WrapVV p9, WrapVV p10):

        try:


            OffsetCorrectXYZ_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5, &p6, &p7, &p8.handle, &p9.handle, &p10.handle)
            
        finally:
            pass

    @classmethod
    def offset_rectangles(cls, WrapVV p1, WrapVV p2, double p3, double p4, double p5, WrapVV p6, WrapVV p7):

        try:


            OffsetRectangles_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5, &p6.handle, &p7.handle)
            
        finally:
            pass

    @classmethod
    def pick_peak(cls, WrapVV p1, WrapVV p2, double p3, int32_t p4):

        try:


            PickPeak_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4)
            
        finally:
            pass

    @classmethod
    def pick_peak2(cls, WrapVV p1, WrapVV p2, double p3, double p4):

        try:


            PickPeak2_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4)
            
        finally:
            pass

    @classmethod
    def pick_peak3(cls, WrapVV p1, WrapVV p2, WrapVV p3, double p4, double p5, WrapVV p6, WrapVV p7, WrapVV p8, WrapVV p9):

        try:


            PickPeak3_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5, &p6.handle, &p7.handle, &p8.handle, &p9.handle)
            
        finally:
            pass

    @classmethod
    def poly_fill(cls, WrapVV p1, int32_t p2, WrapVV p3):

        try:


            PolyFill_VVU(get_p_geo(), &p1.handle, &p2, &p3.handle)
            
        finally:
            pass

    @classmethod
    def poly_fill2(cls, WrapVV p1, WrapVV p2, int32_t p3, WrapVV p4):

        try:


            PolyFill2_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4.handle)
            
        finally:
            pass

    @classmethod
    def polygon_mask(cls, WrapVV p1, WrapVV p2, WrapVV p3, WrapPLY p4, int32_t p5):

        try:


            PolygonMask_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5)
            
        finally:
            pass

    @classmethod
    def prune(cls, WrapVV p1, WrapVV p2, int32_t p3):

        try:


            Prune_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3)
            
        finally:
            pass

    @classmethod
    def qc(cls, WrapVV p1, WrapVV p2, WrapVV p3, double p4, double p5, double p6, double p7, int32_t p8):

        try:


            QC_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5, &p6, &p7, &p8)
            
        finally:
            pass

    @classmethod
    def range_vector_mag(cls, WrapVV p1, WrapVV p2, double p3, double p4):

        try:


            RangeVectorMag_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4)
            return (p3, p4)
        finally:
            pass

    @classmethod
    def regress(cls, WrapVV p1, WrapVV p2, double p3, double p4):

        try:


            Regress_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4)
            return (p3, p4)
        finally:
            pass

    @classmethod
    def rel_var_dup(cls, WrapVV p1, WrapVV p2, double p3, int32_t p4):

        try:


            RelVarDup_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4)
            return (p3, p4)
        finally:
            pass

    @classmethod
    def remove_dummy(cls, WrapVV p1):

        try:


            RemoveDummy_VVU(get_p_geo(), &p1.handle)
            
        finally:
            pass

    @classmethod
    def remove_dummy2(cls, WrapVV p1, WrapVV p2):

        try:


            RemoveDummy2_VVU(get_p_geo(), &p1.handle, &p2.handle)
            
        finally:
            pass

    @classmethod
    def remove_dummy3(cls, WrapVV p1, WrapVV p2, WrapVV p3):

        try:


            RemoveDummy3_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def remove_dummy4(cls, WrapVV p1, WrapVV p2, WrapVV p3, WrapVV p4):

        try:


            RemoveDummy4_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle)
            
        finally:
            pass

    @classmethod
    def remove_dup(cls, WrapVV p1, WrapVV p2, int32_t p3):

        try:


            RemoveDup_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3)
            
        finally:
            pass

    @classmethod
    def remove_xy_dup(cls, WrapVV p1, WrapVV p2, WrapVV p3, int32_t p4):

        try:


            RemoveXYDup_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4)
            
        finally:
            pass

    @classmethod
    def remove_xy_dup_index(cls, WrapVV p1, WrapVV p2, WrapVV p3):

        try:


            RemoveXYDupIndex_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle)
            
        finally:
            pass

    @classmethod
    def rolling_stats(cls, WrapVV p1, WrapVV p2, int32_t p3, int32_t p4, int32_t p5):

        try:


            RollingStats_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4, &p5)
            
        finally:
            pass

    @classmethod
    def search_replace(cls, WrapVV p1, double p2, double p3):

        try:


            SearchReplace_VVU(get_p_geo(), &p1.handle, &p2, &p3)
            
        finally:
            pass

    @classmethod
    def search_replace_text(cls, WrapVV p1, int32_t p2, int32_t p3, const char* p4, const char* p5, int32_t p6):

        try:


            SearchReplaceText_VVU(get_p_geo(), &p1.handle, &p2, &p3, p4, p5, &p6)
            
        finally:
            pass

    @classmethod
    def search_replace_text_ex(cls, WrapVV p1, int32_t p2, int32_t p3, const char* p4, const char* p5, int32_t p6, int32_t p7):

        try:


            SearchReplaceTextEx_VVU(get_p_geo(), &p1.handle, &p2, &p3, p4, p5, &p6, &p7)
            return p7
        finally:
            pass

    @classmethod
    def spline(cls, WrapVV p1, WrapVV p2, WrapVV p3, int32_t p4, double p5, double p6, double p7, int32_t p8, int32_t p9):

        try:


            Spline_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4, &p5, &p6, &p7, &p8, &p9)
            
        finally:
            pass

    @classmethod
    def spline2(cls, WrapVV p1, WrapVV p2, WrapVV p3, WrapVV p4, int32_t p5):

        try:


            Spline2_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3.handle, &p4.handle, &p5)
            
        finally:
            pass

    @classmethod
    def tokenize_to_values(cls, WrapVV p1, const char* p2):

        try:


            _return_val = iTokenizeToValues_VVU(get_p_geo(), &p1.handle, p2)
            return _return_val
        finally:
            pass

    @classmethod
    def translate(cls, WrapVV p1, double p2, double p3):

        try:


            Translate_VVU(get_p_geo(), &p1.handle, &p2, &p3)
            
        finally:
            pass

    @classmethod
    def trend(cls, WrapVV p1, int32_t p2, WrapVV p3):

        try:


            Trend_VVU(get_p_geo(), &p1.handle, &p2, &p3.handle)
            
        finally:
            pass

    @classmethod
    def trend2(cls, WrapVV p1, WrapVV p2, int32_t p3, WrapVV p4):

        try:


            Trend2_VVU(get_p_geo(), &p1.handle, &p2.handle, &p3, &p4.handle)
            
        finally:
            pass

    @classmethod
    def uniform_dist(cls, WrapVV p1, int32_t p2, double p3, double p4, int32_t p5):

        try:


            UniformDist_VVU(get_p_geo(), &p1.handle, &p2, &p3, &p4, &p5)
            
        finally:
            pass

    pass

